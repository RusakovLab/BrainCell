
begintemplate UtilsForFakeMechanismForNetCon

    public getNumVars, getVarNameAndArraySize, getVarUnits, getNetConVar, setNetConVar
    public mechName, numGlobalVars
    
    external pyObj, seh
    
    strdef mechName
    numGlobalVars = -1
    
    objref _pyUnitsDict, _tempNetCon, this
    _tempValue = -1
    
    
    proc init() {
        strdef pyCommand
        
        mechName = "NetCon"
        numGlobalVars = 0
        
        sprint(pyCommand, "{'threshold': 'mV', 'delay': 'ms', 'weight': '', '%s': ''}", seh.metaVarName)
        _pyUnitsDict = pyObj.ev(pyCommand)
    }
    
    func getNumVars() {
        pyObj.pyValuesDict = $o1
        return pyObj.ev("len(pyValuesDict)")
    }
    
    func getVarNameAndArraySize() {
        pyObj.pyValuesDict = $o1
        pyObj.varIdx = $2
        $s3 = pyObj.ev("list(pyValuesDict.keys())[int(varIdx)]")
        return 1
    }
    
    proc getVarUnits() {
        strdef varName
        varName = $s1
        $s2 = _pyUnitsDict.__getitem__(varName)
    }
    
    func getNetConVar() { localobj nil
        strdef varNameWithIndex, hocCommand
        
        _tempNetCon = $o1
        varNameWithIndex = $s2
        
        sprint(hocCommand, "_tempValue = _tempNetCon.%s", varNameWithIndex)
        execute(hocCommand, this)
        
        _tempNetCon = nil
        
        return _tempValue
    }
    
    proc setNetConVar() { localobj nil
        strdef varNameWithIndex, hocCommand
        
        _tempNetCon = $o1
        varNameWithIndex = $s2
        _tempValue = $3
        
        sprint(hocCommand, "_tempNetCon.%s = _tempValue", varNameWithIndex)
        execute(hocCommand, this)
        
        _tempNetCon = nil
    }
    
endtemplate UtilsForFakeMechanismForNetCon


objref utils4FakeMech4SynNetCon
utils4FakeMech4SynNetCon = new UtilsForFakeMechanismForNetCon()
