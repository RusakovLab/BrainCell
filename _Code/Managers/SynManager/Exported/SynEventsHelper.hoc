
begintemplate SynEventsHelper

    public ifMetaVarThenUpdateStatus, createNewSynEventsFilterWatcherButTryToInherit, isSefwEnabled
    public isMinRPlt1
    
    external mcu, enumSynCompIdxs
    external inhomAndStochLibrary
    external utils4FakeMech4SynNetCon
    
    objref allComps
    
    isMinRPlt1 = -1
    
    objref this
    
    
    proc init() {
        allComps = $o1
    }
    
    proc ifMetaVarThenUpdateStatus() { local minValue
        strdef varName
        varName = $s1
        minValue = $2
        if (mcu.isMetaVar(varName)) {
            isMinRPlt1 = (minValue < 1)
        }
    }
    
    objref _mechStd
    
    proc createNewSynEventsFilterWatcherButTryToInherit() { local wasSefwPresentBefore, is3Or1PartInSynStruc_old, release_probability localobj syn, trgPp, sefwPp, sefwNetCon, nil
    
        syn = $o1
        wasSefwPresentBefore = $2
        is3Or1PartInSynStruc_old = $3
        trgPp = $o4
        
        // Prepare the output point process
        if (wasSefwPresentBefore) {
            sefwPp = syn.sefwPp
        } else {
            _mechStd = allComps.o(enumSynCompIdxs.netCon).mechStds[utils4FakeMech4SynNetCon.metaMechIdx][utils4FakeMech4SynNetCon.metaVarTypeIdx]
            
            if (_mechStd != nil) {
                // This equals NaN if the var was made inhomogen earlier,
                // but we'll restore all inhomogeneities shortly downstream calling inhomAndStochLibrary.onSynStrucChange
                release_probability = _mechStd.get(utils4FakeMech4SynNetCon.metaVarName, utils4FakeMech4SynNetCon.metaArrayIndex)
            } else {
                // We are in the exported nano HOC file, and all NetCon params are default (so its mechStd is nil)
                release_probability = 1
            }
            
            sefwPp = new SynEventsFilterWatcher()     // Keep the name in sync with UtilsForFakeMechanismForNetCon ctor
            sefwPp.release_probability = release_probability
            // The "seed" will be set shortly downstream (once per rank)
        }
        
        // Prepare the output NetCon
        sefwNetCon = new NetCon(sefwPp, trgPp)
        if (wasSefwPresentBefore) {
            createNewFakeMechStdForNetConAndInFrom(syn.sefwNetCon)
        } else {
            if (is3Or1PartInSynStruc_old) {
                createNewFakeMechStdForNetConAndInFrom(syn.netCon)
            } else {
                // We'll use the _mechStd defined above
            }
        }
        if (_mechStd != nil) {
            // This inserts NaN-s for inhomogen vars,
            // but we'll restore all inhomogeneities shortly downstream calling inhomAndStochLibrary.onSynStrucChange
            _mechStd.out(sefwNetCon)
        }
        // The second NetCon has no delay
        sefwNetCon.delay = 0
        
        $o5 = sefwPp
        $o6 = sefwNetCon
        
        _mechStd = nil
    }
    
    func isSefwEnabled() {
        if (isMinRPlt1) {
            return 1
        }
        return inhomAndStochLibrary.isAnyStochVarsForSynsInTheSet(this)     // Do not move to the IF OR for higher performance
    }
    
    // All next staff is private
    
    
    proc createNewFakeMechStdForNetConAndInFrom() { localobj srcNetCon
        srcNetCon = $o1
        execute("_mechStd = new FakeMechanismStandardForNetCon()", this)        // The template is loaded after this file
        _mechStd.in(srcNetCon)
    }
    
endtemplate SynEventsHelper
