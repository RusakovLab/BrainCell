
{ load_file("../../AltRunControl/Exported/alt_stdrun.hoc") }
loadIfNotDeclared("AltRunControlWidget", "../../AltRunControl/Exported/AltRunControlWidget.hoc")

{ makeSureDeclared("altRunControlWidget", "objref %s", "%s = new AltRunControlWidget()") }


objref ecsManagerMainWidget, exportManagerMainWidget

begintemplate ManageAndRunWidget

    public show, showBioManagerHandler, showSynManagerHandler, showGapJuncManagerHandler, showECSManagerHandler, showAltRunControlHandler, onNanoReseedOrUpdateHandler, dismissHandler
    
    external isAstrocyteOrNeuron
    external mechManagerMainWidget, synSetsWidget, gapJuncSetsWidget, ecsManagerMainWidget, exportManagerMainWidget, altRunControlWidget
    external mmAllComps, gjmAllGapJuncSets, smAllSynSets
    external mwh, mmIcrHelper
    external inhomAndStochLibrary
    external getMaxDist, dismissIfNotNil, codeContractViolation
    external eachItemInList
    
    objref mainBox, this
    
    enumBioGjSynEcs = -1
    
    
    proc init() {
        enumBioGjSynEcs = $1
    }
    
    proc show() {
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            if (enumBioGjSynEcs == 0) {
                xbutton("Show biophys manager", "showBioManagerHandler()")
            } else if (enumBioGjSynEcs == 1) {
                xbutton("Show gap junc manager", "showGapJuncManagerHandler()")
            } else if (enumBioGjSynEcs == 2) {
                xbutton("Show synapse manager", "showSynManagerHandler()")
            } else if (enumBioGjSynEcs == 3) {
                xbutton("Show ECS manager", "showECSManagerHandler()")
            } else {
                codeContractViolation()
            }
            xbutton("Show Alt Run Control", "showAltRunControlHandler()")
            xpanel()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("Manage and Run", 25, 575, -1, -1)
    }
    
    proc showBioManagerHandler() { localobj nil
        dismissIfNotNil(exportManagerMainWidget)
        dismissIfNotNil(mechManagerMainWidget)
        
        if (mmAllComps.count() == 0) {
            mwh.showWarningBox("Cannot open the biophys manager because there are no compartments.")
            return
        }
        
        mmIcrHelper.rescanNow()
        
        if (mechManagerMainWidget == nil) {
            execute("mechManagerMainWidget = new MechManagerMainWidget()", this)
        }
        
        mechManagerMainWidget.show()
        mechManagerMainWidget.mechOpSelectHandler()
    }
    
    proc showGapJuncManagerHandler() { local wasNil localobj nil
        dismissIfNotNil(exportManagerMainWidget)
        dismissIfNotNil(gapJuncSetsWidget)
        
        wasNil = (gapJuncSetsWidget == nil)
        
        if (wasNil) {
            mwh.startIntercepting() // For the warnings shown by pyObj.ms_warnIfNoRecordForGapJunc
            // !!!!! re-test this:
            //       tiny BUG: the warnings are not shown again when user closes GapJuncManagerMainWidget and opens it again
            execute("gapJuncSetsWidget = new GapJuncSetsWidget()", this)
        }
        
        gapJuncSetsWidget.show()
        
        if (wasNil) {
            mwh.endIntercepting()
        }
    }
    
    proc showSynManagerHandler() { localobj nil
        dismissIfNotNil(exportManagerMainWidget)
        dismissIfNotNil(synSetsWidget)
        
        if (synSetsWidget == nil) {
            execute("synSetsWidget = new SynSetsWidget()", this)
        }
        
        synSetsWidget.show()
    }
    
    proc showECSManagerHandler() { localobj nil
        dismissIfNotNil(exportManagerMainWidget)
        dismissIfNotNil(ecsManagerMainWidget)
        
        if (ecsManagerMainWidget == nil) {
            execute("ecsManagerMainWidget = new ExtracellularManagerMainWidget()", this)
        }
        
        ecsManagerMainWidget.show()
    }
    
    proc showAltRunControlHandler() {
        dismissIfNotNil(altRunControlWidget)
        altRunControlWidget.show()
    }
    
    proc onNanoReseedOrUpdateHandler() { local isReseedOrUpdate, cond1, cond2, enumRescanType localobj gapJuncSet, synSet, nil
        isReseedOrUpdate = $1
        
        cond1 = (isReseedOrUpdate && (mechManagerMainWidget != nil || gapJuncSetsWidget != nil || synSetsWidget != nil || ecsManagerMainWidget != nil))
        cond2 = (inhomAndStochLibrary.getNumInhomVarsForTaps(1, -1) != 0 || inhomAndStochLibrary.getNumInhomVarsForTaps(0, -1) != 0)
        if (cond1 || cond2) {
            // Must not be called because we block the panel in Main UI
            codeContractViolation()
        }
        
        // !!! BUG: we don't reach this code when ManageAndRunWidget is nil (i.e. before the 1st opening)
        for eachItemInList(gapJuncSet, gjmAllGapJuncSets) {
            gapJuncSet.reCalcAndCacheDistInGapJuncs()
        }
        if (!isAstrocyteOrNeuron) {
            for eachItemInList(synSet, smAllSynSets) {
                synSet.reCalcAndCacheDistInSyns()
            }
        }
        
        inhomAndStochLibrary.onNanoReseedOrUpdate()
        dismissManagers()
        
        enumRescanType = 4 - isReseedOrUpdate
        mmIcrHelper.scheduleRescan(enumRescanType)
    }
    
    proc dismissHandler() {
        dismissManagers()
        // !! dismissIfNotNil(altRunControlWidget)
        mainBox.unmap()
    }
    
    // All next staff is private
    
    
    proc dismissManagers() {
        dismissIfNotNil(mechManagerMainWidget)
        dismissIfNotNil(gapJuncSetsWidget)
        dismissIfNotNil(synSetsWidget)
        dismissIfNotNil(ecsManagerMainWidget)
    }
    
endtemplate ManageAndRunWidget
