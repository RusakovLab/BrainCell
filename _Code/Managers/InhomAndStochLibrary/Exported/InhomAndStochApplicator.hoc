
begintemplate InhomAndStochApplicator
    
    public startPlayingVars, stopPlayingVars, onInit, onStep
    
    external isAstrocyteOrNeuron
    external smAllSynSets
    external inhomAndStochLibrary
    external eachItemInList
    external codeContractViolation
    
    
    iterator eachActiveSpecialVarFromLib() { codeContractViolation() }
    
    // out: isWaitingForCallbacks
    func startPlayingVars() { local isAllPlayed, isThisPlayed localobj specVar
        isAllPlayed = 1
        for eachActiveSpecialVarFromLib(specVar) {
            isThisPlayed = specVar.setPlayIfPossible()
            isAllPlayed = isAllPlayed && isThisPlayed
        }
        if (!isAllPlayed) {
            return 1
        }
        if (isAstrocyteOrNeuron) {
            return 0
        } else {
            return isMinRPlt1ForNeuron()
        }
    }
    
    proc stopPlayingVars() { localobj specVar
        for eachActiveSpecialVarFromLib(specVar) {
            specVar.stopPlayingVars()
        }
    }
    
    proc onInit() { localobj specVar
        for eachActiveSpecialVarFromLib(specVar) {
            specVar.onInit()
        }
    }
    
    proc onStep() { localobj specVar
        for eachActiveSpecialVarFromLib(specVar) {
            specVar.onStep()
        }
        if (!isAstrocyteOrNeuron) {
            afterStepForNeuron()
        }
    }
    
    // All next staff is private
    
    
    iterator eachActiveSpecialVarFromLib() { local specVarIdx localobj activeSpecVars
        activeSpecVars = inhomAndStochLibrary.activeSpecVars
        for specVarIdx = 0, activeSpecVars.count() - 1 {
            $o1 = activeSpecVars.o(specVarIdx)
            iterator_statement
        }
    }
    
    proc afterStepForNeuron() { localobj synSet, syn
        for eachItemInList(synSet, smAllSynSets) {
            if (!synSet.seh.isSefwEnabled()) {
                continue
            }
            for eachItemInList(syn, synSet.allSyns) {
                // !! it would be better to set it back to 0 in MOD code rather than here,
                //    but I couldn't figure out what type of block in MOD file should contain the assignment operator to execute it in the right time
                syn.sefwPp.isAnyEventsOnThisIter = 0
            }
        }
    }
    
    func isMinRPlt1ForNeuron() { local synSetIdx localobj synSet
        for synSetIdx = 0, smAllSynSets.count() - 1 {   // Don't replace with "eachItemInList" because we return
            synSet = smAllSynSets.o(synSetIdx)
            if (synSet.seh.isMinRPlt1) {
                return 1
            }
        }
        return 0
    }
    
endtemplate InhomAndStochApplicator


objref inhomAndStochApplicator
inhomAndStochApplicator = new InhomAndStochApplicator()
