
_userDefinedHocDistFuncArgument = -1
_userDefinedHocDistFuncResult = -1

begintemplate CustomCodeDistFuncHelper

    public selectedHandler, calculateAt, onJustBeforeFirstSection, onJustBeforeNewSection, onJustAfterLastSection, exportParams, importParams, dismissHandler
    public parentWidget, isSkipOneSelect
    public modelIdx     // For CodeFromFileDistFuncHelper
    
    external codeContractViolation, printMsgAndRaiseError, printNotImplementedMsgAndRaiseError
    external pyObj
    external _userDefinedHocDistFuncArgument, _userDefinedHocDistFuncResult
    
    objref parentWidget, this
    
    modelIdx = -1
    
    strdef oneLinerHocDistFuncName, oneLinerHocDistFuncBody
    
    objref _oneLinerPyDistFuncLambda
    strdef oneLinerPyDistFuncBody
    
    strdef userDefinedHocDistFuncName, userDefinedPyDistFuncName
    
    isSkipOneSelect = -1
    
    
    proc init() { local numArg
    
        numArg = numarg()
        
        if (numArg == 0) {
            // Empty by design (we are being created in the exported HOC file or in the process of biophys JSON import or from SeedingDensityHelper,
            // so will be inited in proc importParams shortly downstream)
        } else if (numArg == 1) {
            setModelIdx($1)
            oneLinerHocDistFuncBody = "x/10 + 50*sin(2*PI*x/200) * tanh(x/100)"
            oneLinerPyDistFuncBody = "x/10 + 50*sin(2*pi*x/200) * tanh(x/100)"
            userDefinedHocDistFuncName = "myDistFunc"
            userDefinedPyDistFuncName = "myDistFunc"
        } else {
            codeContractViolation()
        }
        
        oneLinerHocDistFuncName = "_oneLinerHocDistFunc"
        
        isSkipOneSelect = 0
    }
    
    func selectedHandler() { local numArg, isJustLoaded, isAccept
        strdef hocCommand, hint1, hint2, text
        
        if (isSkipOneSelect) {
            isSkipOneSelect = 0
            return 0
        }
        
        numArg = numarg()
        if (numArg == 0) {
            isJustLoaded = 0
        } else if (numArg == 1) {
            isJustLoaded = $1
        } else {
            codeContractViolation()
        }
        
        hint1 = " The expression must depend on \"x\"."
        if (!isJustLoaded) {
            hint2 = " (We assume you've defined the function in console manually or loaded from file.)"
        } else {
            hint2 = ""
        }
        
        if (modelIdx == 0) {
            sprint(text, "Enter HOC expression (one-liner).%s", hint1)
            isAccept = string_dialog(text, oneLinerHocDistFuncBody)
            if (!isAccept) {
                return 1
            }
            defineHocOneLinerFunction(oneLinerHocDistFuncBody)
        } else if (modelIdx == 1) {
            // !! keep in sync with SeedingDensityWidget.show
            sprint(text, "Enter Python expression (one-liner).%s We've done \"from math import *\" for you.", hint1)
            isAccept = string_dialog(text, oneLinerPyDistFuncBody)
            if (!isAccept) {
                return 1
            }
            definePythonOneLinerFunction(oneLinerPyDistFuncBody)
        } else if (modelIdx == 2) {
            sprint(text, "Enter name of your HOC function. $1 is x, return is y.%s", hint2)
            isAccept = string_dialog(text, userDefinedHocDistFuncName)
            if (!isAccept) {
                return 1
            }
        } else if (modelIdx == 3) {
            sprint(text, "Enter name of your Python function. The input argument is x, return is y.%s", hint2)
            isAccept = string_dialog(text, userDefinedPyDistFuncName)
            if (!isAccept) {
                return 1
            }
        } else {
            codeContractViolation()
        }
        
        return 0
    }
    
    func calculateAt() { local x
        x = $1
        
        if (modelIdx == 0) {
            return _oneLinerHocDistFunc(x)
        } else if (modelIdx == 1) {
            return _oneLinerPyDistFuncLambda.__call__(x)
        } else if (modelIdx == 2) {
            return callUserDefinedHocDistFunc(userDefinedHocDistFuncName, x)
        } else if (modelIdx == 3) {
            return callPythonUserDefinedFunction(userDefinedPyDistFuncName, x)
        } else {
            codeContractViolation()
        }
    }
    
    proc onJustBeforeFirstSection() {
        // Empty by design
    }
    
    proc onJustBeforeNewSection() {
        // Empty by design
    }
    
    proc onJustAfterLastSection() {
        // Empty by design
    }
    
    proc exportParams() { localobj vecOfVals, listOfStrs
        vecOfVals = $o1
        listOfStrs = $o2
        
        if (modelIdx == 2 || modelIdx == 3) {
            printNotImplementedMsgAndRaiseError("Cannot export \"Custom function\" inhomogeneity model.")
        }
        
        vecOfVals.resize(1)
        vecOfVals.x(0) = modelIdx
        listOfStrs.append(new String(oneLinerHocDistFuncBody))
        listOfStrs.append(new String(oneLinerPyDistFuncBody))
        listOfStrs.append(new String(userDefinedHocDistFuncName))
        listOfStrs.append(new String(userDefinedPyDistFuncName))
    }
    
    proc importParams() { localobj vecOfVals, listOfStrs
        vecOfVals = $o1
        listOfStrs = $o2
        
        if (vecOfVals.size() != 1 || listOfStrs.count() != 4) {
            codeContractViolation()
        }
        
        setModelIdx(vecOfVals.x(0))
        oneLinerHocDistFuncBody = listOfStrs.o(0).s
        oneLinerPyDistFuncBody = listOfStrs.o(1).s
        userDefinedHocDistFuncName = listOfStrs.o(2).s
        userDefinedPyDistFuncName = listOfStrs.o(3).s
        
        if (modelIdx == 0) {
            defineHocOneLinerFunction(oneLinerHocDistFuncBody)
        } else if (modelIdx == 1) {
            definePythonOneLinerFunction(oneLinerPyDistFuncBody)
        } else {
            codeContractViolation()
        }
    }
    
    proc dismissHandler() {
        // Empty by design
    }
    
    // All next staff is private
    
    
    func _oneLinerHocDistFunc() { codeContractViolation() }
    
    proc defineHocOneLinerFunction() { local isSuccess
        strdef oneLinerHocDistFuncBody, hocCommand
        
        oneLinerHocDistFuncBody = $s1
        
        sprint(hocCommand, "func %s() { local x\nx = $1\nreturn %s }", oneLinerHocDistFuncName, oneLinerHocDistFuncBody)
        isSuccess = execute1(hocCommand, this)
        // !! BUG: something is wrong with error hendling here, e.g. user can enter "1x" and get no error
        if (!isSuccess) {
            printMsgAndRaiseError("Failed to define the function. Please check the syntax.")
        }
    }
    
    func callUserDefinedHocDistFunc() {
        strdef userDefinedHocDistFuncName, hocCommand
        
        userDefinedHocDistFuncName = $s1
        _userDefinedHocDistFuncArgument = $2
        
        // !! try to invent a better way to call a top-level func encapsulating both x and y into this template;
        //    think about push_object in HOC or hocObj.* in Python or execute(*, this) in HOC
        sprint(hocCommand, "_userDefinedHocDistFuncResult = %s(_userDefinedHocDistFuncArgument)", userDefinedHocDistFuncName)
        execute(hocCommand)
        
        return _userDefinedHocDistFuncResult
    }
    
    proc definePythonOneLinerFunction() { local status
        strdef oneLinerPyDistFuncBody, pyCode
        
        oneLinerPyDistFuncBody = $s1
        
        status = nrnpython("from math import *")
        if (!status) {
            // !! printPythonErrMsgAndStop
            printMsgAndRaiseError("Exception raised in Python code (caught in definePythonOneLinerFunction)")
        }
        sprint(pyCode, "lambda x : %s", oneLinerPyDistFuncBody)
        _oneLinerPyDistFuncLambda = pyObj.ev(pyCode)
    }
    
    func callPythonUserDefinedFunction() { local x, status
        strdef userDefinedPyDistFuncName, pyCommand
        
        userDefinedPyDistFuncName = $s1
        x = $2
        
        pyObj.x = x
        
        sprint(pyCommand, "y = %s(x)", userDefinedPyDistFuncName)
        status = nrnpython(pyCommand)
        if (!status) {
            // !! printPythonErrMsgAndStop
            printMsgAndRaiseError("Exception raised in Python code (caught in callPythonUserDefinedFunction)")
        }
        
        return pyObj.y
    }
    
    proc setModelIdx() {
        modelIdx = $1
        if (modelIdx < 0 || modelIdx > 3) {
            codeContractViolation()
        }
    }
    
endtemplate CustomCodeDistFuncHelper
