
// !!!! create a singleton template "PPComp" to be called from both SynPPComp and GapJuncPPComp

// !!!! mostly copied from SynPPComp: try to replace both SynPPComp and GapJuncPPComp with one TapPPComp
    
begintemplate GapJuncPPComp
    
    public name, enumDmPpFk, enumPpRole, isMechVarTypeInhom, mechStds
    public isMechVarInhom, prepareVarsEditorHeader, getDistRange, getSecList, markMechDirty, updateStatsCurve, updateVerbatimModelCurve, applyInhomogeneity
    public isMechVarTypeInhom, mechStds, isMechDirty
    
    external mth, math, mcu
    external tapSet
    external stringsEqual, codeContractViolation
    external enumGapJuncPpRoles, enumArgTypes
    
    strdef name
    enumDmPpFk = -1
    enumPpRole = -1
    objref gapJuncSet
    
    double isMechVarTypeInhom[1][1]     // 0/1 flags
    // !! would it make sense to create these MechanismStandard-s without 2nd ctor arg and get rid of 2nd dimension in this array?
    objref mechStds[1][1]
    double isMechDirty[1]               // 0/1 flags
    
    objref this
    
    
    proc init() { local numArg, argType, numMechs, mechIdx, varType, varTypeIdx localobj impRedObj, actFirstPpOrNil, mechStd, nil
        strdef actPpName, thisPpName
        
        numArg = numarg()
        if (numArg != 2) {
            codeContractViolation()
        }
        
        argType = argtype(1)
        if (argType == enumArgTypes.objref_) {
            // Load data from the imported reduced template (part 1)
            impRedObj = $o1
            gapJuncSet = $o2
            name = impRedObj.name
        } else if (argType == enumArgTypes.strdef_) {
            name = $s1
            gapJuncSet = $o2
        } else {
            codeContractViolation()
        }
        
        enumDmPpFk = 1
        enumPpRole = enumGapJuncPpRoles.sngPp
        
        numMechs = mth.getNumMechs(enumDmPpFk)
        
        double isMechVarTypeInhom[numMechs][3]  // 0/1 flags
        objref mechStds[numMechs][3]            // 0: "PARAMETER", 1: "ASSIGNED", 2: "STATE"
        double isMechDirty[numMechs]            // 0/1 flags
        
        gapJuncSet.getPpNameOrEmpty(actPpName)
        if (gapJuncSet.allGapJuncs.count() > 0) {
            actFirstPpOrNil = gapJuncSet.allGapJuncs.o(0).sngPp
        } else {
            actFirstPpOrNil = nil
        }
        
        for mechIdx = 0, numMechs - 1 {
            mth.getMechName(1, mechIdx, thisPpName)
            
            for varType = 1, 3 {    // 1: "PARAMETER", 2: "ASSIGNED", 3: "STATE"
                mechStd = new MechanismStandard(thisPpName, varType)
                
                if (stringsEqual(thisPpName, actPpName) && actFirstPpOrNil != nil) {
                    // It's a code contract that all the gap juncs have homogeneous PP-s at the time of new GapJuncPPComp-s construction
                    // (but this does not apply to "start with BrainCell export" mode)
                    mechStd.in(actFirstPpOrNil)
                }
                
                varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
                mechStds[mechIdx][varTypeIdx] = mechStd
            }
        }
        
        // !! search for inhomogeneities in the vars
        
        if (impRedObj == nil) {
            return
        }
        
        // Load data from the imported reduced template (part 2)
        
        mechIdx = impRedObj.mechIdx
        for varType = 1, 3 {    // 1: "PARAMETER", 2: "ASSIGNED", 3: "STATE"
            varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
            mechStd = impRedObj.mechStds[mechIdx][varTypeIdx]
            if (mechStd != nil) {
                mechStds[mechIdx][varTypeIdx] = mechStd     // Replacing it just to have NaN-s for all inhom vars
                mcu.setOneIfNeededIn_isMechVarTypeInhom(this, mechIdx, varType)
            }
        }
    }
    
    // !! code dupl. with MechComp
    func isMechVarInhom() { local mechIdx, varType, arrayIndex, varTypeIdx
        strdef varName
        mechIdx = $1
        varType = $2
        varName = $s3
        arrayIndex = $4
        if (varType == -1) {    // -1: "GLOBAL"
            return 0
        }
        varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
        return math.isNaN(mechStds[mechIdx][varTypeIdx].get(varName, arrayIndex))
    }
    
    // !! mostly code dupl. with MechComp
    // !! it would be better to move this to MechTypeHelper
    proc prepareVarsEditorHeader() { local mechIdx, varType
        strdef varTypeName, mechName
        
        mechIdx = $1
        varType = $2
        
        mth.getMechName(1, mechIdx, mechName)
        mth.getVarTypeName(varType, varTypeName)
        sprint($s3, "%s in %s (all %s variables):", mechName, name, varTypeName)
    }
    
    proc getDistRange() {
        gapJuncSet.getDistRange(&$&1, &$&2)
    }
    
    obfunc getSecList() {
        return gapJuncSet.getSecList()
    }
    
    proc markMechDirty() { local mechIdx
        mechIdx = $1
        isMechDirty[mechIdx] = 1
    }
    
    proc updateStatsCurve() { local yMin, yMax, varType, arraySize, arrayIndex, y localobj graph, mechStd, gapJunc, pp, nil
        strdef mechName, varName, actPpName
        
        graph = $o1
        yMin = $&2
        yMax = $&3
        mechName = $s4
        varType = $5
        varName = $s6
        arraySize = $7  // Just a placeholder
        arrayIndex = $8
        
        gapJuncSet.getPpNameOrEmpty(actPpName)
        if (!stringsEqual(actPpName, mechName)) {
            // The actual gap junctions don't have PPs with this !!!role!!! or use different PPs
            return
        }
        
        mechStd = new MechanismStandard(mechName, varType)
        
        for tapSet.updateStatsCurveIter(gapJunc, gapJuncSet.allGapJuncs, graph, &y, &yMin, &yMax) {
            pp = gapJunc.sngPp
            mechStd.in(pp)
            y = mechStd.get(varName, arrayIndex)
        }
        
        $&2 = yMin
        $&3 = yMax
    }
    
    proc updateVerbatimModelCurve() {
        // It's a code contract that all the gap juncs have homogeneous PP-s at the time of new GapJuncPPComp-s construction
        codeContractViolation()
    }
    
    // Keep in sync with SynPPComp.applyInhomogeneity and ReducedPPComp2.applyInhomogeneity
    proc applyInhomogeneity() { local varType, arraySize, arrayIndex, y localobj distFuncHelper, mechStd, gapJunc, thisPp
        strdef mechName, varName
        
        mechName = $s1
        varType = $2
        varName = $s3
        arraySize = $4  // Just a placeholder
        arrayIndex = $5
        distFuncHelper = $o6
        
        if (varType == -1) {    // -1: "GLOBAL"
            codeContractViolation()
        }
        
        mechStd = new MechanismStandard(mechName, varType)
        
        for tapSet.applyInhomogeneityIter(gapJunc, gapJuncSet.allGapJuncs, distFuncHelper) {
            thisPp = gapJunc.sngPp
            mechStd.in(thisPp)
            y = distFuncHelper.calculateAt(gapJunc.dist)
            // !! BUG: "variable_domain" used in "MechanismStandard.panel()" is ignored in "MechanismStandard.set()" and "MechanismStandard.out()",
            //      so we can use any invalid value here without even a warning
            mechStd.set(varName, y, arrayIndex)
            mechStd.out(thisPp)
        }
    }
    
endtemplate GapJuncPPComp
