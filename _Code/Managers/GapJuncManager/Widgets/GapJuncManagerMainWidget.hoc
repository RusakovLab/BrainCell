
// !!! BUG: the changes are committed to gapJuncSet.seedingDensityHelper before user clicks "Apply"


// !!! if user seeds gap juncs on selected sections, is it OK to allow connecting the pointers outside this set of sections? (currently we do)

// !!! BUG: when creating internal GJ pointers, we don't care if the target section has the required biophys mech, so we can catch exceptions of type "* mechanism not inserted in section *"
// !!! BUG: when user selects an internal GJ PP that has no POINTER, we show the pointer locations on the Shape-s anyway (see GapJuncSet.updateMarks)
// !!! maybe BUG: we don't prevent seeding two random GJs in the same location; the same for two random internal GJ pointers

// !!! for func choicesSelectHandlerCore below, maybe there is no need to pass "_isExtOrInt" as an arg: use "isExtOrInt" instead

// !!! major code dup. with SynManagerMainWidget
begintemplate GapJuncManagerMainWidget

    public show, selectSectionsHandler_layer2, onListsFilterLevelChangedHandler, warnIfUserHasNotSelectedPP, applyChangesToGapJuncStrucIfNeeded, applyChangesToDirtyHomogenVarsIfNeeded, updateNumInhomVarsLabel, updateNumStochVarsLabel, dismissHandler
    
    external isAstrocyteOrNeuron
    external gjmAllGapJuncSets
    external mwh, mth, mcu4t, utils4FakeMech4GapJuncExtValue, inhomAndStochLibrary, mechsDllUtils, math
    external getGlobalVarsHint, showSeedingDensityWidget, stringEmpty, stringsEqual, stringToLowerCase, containsSubstring, createElasticSpacer, createEmptyPanel, dismissIfNotNil, codeContractViolation
    external enumGapJuncCompIdxs
    external seedingDensityWidget, gjmlfw, varsEditorSubWidget
    external pyObj
    
    objref mainBox, deck1, deck2, decks3[2], decks4[2], decks5[2], shapeBox
    objref extChoices, intChoices
    strdef maxDistVarLabel, numGapJuncsLabel, numInhomVarsVarLabel, numStochVarsVarLabel
    
    objref parentWidget, ssSubWidget
    
    isReseed = -1
    isReseedingRequired = -1
    
    defExtChoiceIdx = -1
    defIntChoiceIdx = -1
    
    listBoxWidth = -1
    listBoxHeight = -1
    
    gapJuncSetIdx = -1
    objref gapJuncSet
    objref allComps
    
    isExtOrInt = -1
    isAllOrSomeSecsSeeded = -1
    objref selected_ref
    maxNumGapJuncsPerSec = -1
    maxRadiusForIntGapJuncs = -1
    isCrissCrossForIntGapJuncs = -1
    
    objref this
    
    
    proc init() {
        parentWidget = $o1
        
        isReseed = 0
        isReseedingRequired = 0
        
        extChoices = new List()
        intChoices = new List()
        
        listBoxWidth = 145
        listBoxHeight = 214
    }
    
    _isShow = -1
    
    proc show() { local maxDist localobj hBox, vBox
        strdef text
        
        gapJuncSetIdx = $1
        maxDist = $2
        
        // Just for shorter syntax within this widget
        gapJuncSet = gjmAllGapJuncSets.o(gapJuncSetIdx)
        allComps = gapJuncSet.allComps
        
        // These temp copies are used to avoid committing the changes to gapJuncSet before user clicks "Apply"
        isExtOrInt = gapJuncSet.isExtOrInt
        isAllOrSomeSecsSeeded = gapJuncSet.isAllOrSomeSecsSeeded
        selected_ref = gapJuncSet.selected_ref
        maxNumGapJuncsPerSec = gapJuncSet.maxNumGapJuncsPerSec
        maxRadiusForIntGapJuncs = gapJuncSet.maxRadiusForIntGapJuncs
        isCrissCrossForIntGapJuncs = gapJuncSet.isCrissCrossForIntGapJuncs
        
        if (!isAstrocyteOrNeuron && !isExtOrInt) {
            codeContractViolation()
        }
        
        while (1) {
            // Prepare available choices for External GJ PP and Internal GJ PP
            onListsFilterLevelChangedHandler(1)
            
            // Prepare default selections for External GJ PP and Internal GJ PP
            defExtChoiceIdx = chooseDefSelItemIdx(extChoices)
            defIntChoiceIdx = chooseDefSelItemIdx(intChoices)
            if ((isExtOrInt && defExtChoiceIdx != -1) || (!isExtOrInt && defIntChoiceIdx != -1)) {
                break
            }
            
            gjmlfw.loosenFilter()
        }
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            xlabel("No changes will be applied to gap junctions until you click the \"Apply\" button.")
            getGlobalVarsHint("applied", text)
            xlabel(text)
            xpanel()
            hBox = new HBox()
            hBox.intercept(1)
            {
                xpanel("")
                updateNumGapJuncsLabel()
                xvarlabel(numGapJuncsLabel)
                updateNumInhomVarsLabel()
                xvarlabel(numInhomVarsVarLabel)
                updateNumStochVarsLabel()
                xvarlabel(numStochVarsVarLabel)
                setMaxDistVarLabel(maxDist)     // !!! maybe remove this label at all or show the dist range only given selected gap junc type
                xvarlabel(maxDistVarLabel)      //
                xpanel()
                vBox = new VBox()
                vBox.intercept(1)
                {
                    xpanel("")
                    xlabel("Gap junctions type:")
                    if (isAstrocyteOrNeuron) {
                        xradiobutton("External (with other cells)", "gapJuncTypeChangedHandler(1)", isExtOrInt)
                        xradiobutton("Internal (within this astrocyte)", "gapJuncTypeChangedHandler(0)", !isExtOrInt)
                    } else {
                        xlabel("External (with other cells)")
                    }
                    xpanel()
                    deck1 = new Deck()
                    deck1.intercept(1)
                    {
                        xpanel("")
                        xlabel("External gap junction structure:")
                        sprint(text, "[Stub -> Pointer -> ] %s PP -> Section", allComps.o(enumGapJuncCompIdxs.extGjPp).name)
                        xlabel(text)
                        xpanel()
                        xpanel("")
                        xlabel("Internal gap junction structure:")
                        sprint(text, "Other Section -> Pointer -> %s PP -> Section", allComps.o(enumGapJuncCompIdxs.intGjPp).name)
                        xlabel(text)
                        xpanel()
                    }
                    deck1.intercept(0)
                    // deck1.flip_to(*)     // Will be done below in gapJuncTypeChangedHandler
                    deck1.map()
                }
                vBox.intercept(0)
                vBox.map()
            }
            hBox.intercept(0)
            hBox.map()
            
            deck2 = new Deck()
            deck2.intercept(1)
            {
                hBox = new HBox()
                hBox.intercept(1)
                {
                    vBox = new VBox()
                    vBox.intercept(1)
                    {
                        xpanel("")
                        xlabel("External GJ Point Process:")
                        xpanel()
                        extChoices.browser("", "s")
                        extChoices.select_action("extChoicesSelectHandler(hoc_ac_)")
                        decks3[1] = createEditPPVarsDeck(enumGapJuncCompIdxs.extGjPp)
                    }
                    vBox.intercept(0)
                    vBox.map("", -1, -1, listBoxWidth + 3.6, listBoxHeight)     // !!! hack
                    
                    createWhereToSeedBox(1)
                }
                hBox.intercept(0)
                hBox.map()
                
                hBox = new HBox()
                hBox.intercept(1)
                {
                    vBox = new VBox()
                    vBox.intercept(1)
                    {
                        xpanel("")
                        xlabel("Internal GJ Point Process:")
                        xpanel()
                        intChoices.browser("", "s")
                        intChoices.select_action("intChoicesSelectHandler(hoc_ac_)")
                        decks3[0] = createEditPPVarsDeck(enumGapJuncCompIdxs.intGjPp)
                    }
                    vBox.intercept(0)
                    vBox.map("", -1, -1, listBoxWidth, listBoxHeight)
                    
                    createWhereToSeedBox(0)
                }
                hBox.intercept(0)
                hBox.map()
            }
            deck2.intercept(0)
            // deck2.flip_to(*)     // Will be done below in gapJuncTypeChangedHandler
            deck2.map("", -1, -1, 1, listBoxHeight)
            
            xpanel("")
            xlabel("")
            xbutton("Apply", "applyHandler()")
            xcheckbox("Reseed all GJs in new random locations", &isReseed, "isReseedCheckBoxHandler()")
            xlabel("")
            xbutton("* Show all locations", "showAllLocationsHandler()")
            mcu4t.addHintBelowShowAllLocationsButton()
            if (isAstrocyteOrNeuron) {
                xlabel("  (to review the Int GJ Pointer locations, select \"PointProcessMark\")")
            }
            xlabel("")
            xbutton("Adjust list filter (I cannot find a PP in the list above)", "adjustListFilterHandler()")
            xpanel()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("Manager of gap junctions", 400, 10, -1, -1)
        
        _isShow = 1
        {
            gapJuncTypeChangedHandler(isExtOrInt)
            selectNewExt(defExtChoiceIdx)
            selectNewInt(defIntChoiceIdx)
        }
        _isShow = 0
        
        whereToSeedChangedHandler(isAllOrSomeSecsSeeded)
        
        if (!isExtOrInt) {
            gapJuncSet.deployMarkerPointProcessesForIntGapJuncPointers()
        }
        showAllLocationsHandler()
        
        forceOrUnforceReseeding(0)
    }
    
    // If called from ListsFilterWidget, then:
    //  populate 2 lists based on the filter level (preserving the old selections if possible) and switch the decks respectively
    // If called from "init", then:
    //  populate 2 lists based on the filter level
    proc onListsFilterLevelChangedHandler() { local isCalledFromInit, extChoiceIdx, intChoiceIdx, mechIdx, isForIntUseOnly, doesReqSec, isGapInName, doesHavePtr, isAccNCTrg, isAddToExtList, isAddToIntList localobj newItem
        strdef oldExtSelMechName, oldIntSelMechName, mechName
        
        isCalledFromInit = $1
        
        if (!isCalledFromInit) {
            mcu4t.getSelMechNameOrEmptyString(extChoices, oldExtSelMechName)
            mcu4t.getSelMechNameOrEmptyString(intChoices, oldIntSelMechName)
        } else {
            oldExtSelMechName = ""
            oldIntSelMechName = ""
        }
        
        extChoices.remove_all()
        intChoices.remove_all()
        
        extChoiceIdx = -1
        intChoiceIdx = -1
        
        // (Re)populate the lists based on the filter level
        for mechIdx = 0, mth.getNumMechs(1) - 1 {
            
            mth.getMechName(1, mechIdx, mechName)
            
            isForIntUseOnly = mechsDllUtils.isThisMechForIntUseOnly(mechName)
            doesReqSec = mth.doesPointProcessRequireSection(mechIdx)
            isGapInName = analyzeMechName(mechName, &doesHavePtr)
            isAccNCTrg = mth.isPointProcessAcceptableNetConTarget(mechIdx)
            
            if (gjmlfw.filterLevel < 0 || gjmlfw.filterLevel > 3) {
                codeContractViolation()
            }
            
            // No filtration
            isAddToExtList = 1
            isAddToIntList = 1
            
            if (gjmlfw.filterLevel >= 1) {
                // Minimum filtration
                isAddToExtList = !isForIntUseOnly
                isAddToIntList = !isForIntUseOnly
            }
            if (gjmlfw.filterLevel >= 2) {
                // Moderate filtration
                isAddToExtList = isAddToExtList && doesReqSec && isGapInName
                isAddToIntList = isAddToIntList && doesReqSec && isGapInName && doesHavePtr
            }
            if (gjmlfw.filterLevel >= 3) {
                // Maximum filtration
                isAddToExtList = isAddToExtList && !isAccNCTrg
                isAddToIntList = isAddToIntList && !isAccNCTrg
            }
            
            // !! not sure about isAddToExtList and isAddToIntList: imagine a PP that has NetCon input, but can work even without a NetCon;
            //    we can add or remove !isAccNCTrg and !isAccNCSrc to the AND condition in any combination
            
            newItem = new ItemOfFilteredBrowsedList(mechIdx, mechName)
            
            if (isAddToExtList) {
                mcu4t.appendAndSelectIfMechNameEqual(extChoices, newItem, oldExtSelMechName, &extChoiceIdx)
            }
            if (isAddToIntList) {
                mcu4t.appendAndSelectIfMechNameEqual(intChoices, newItem, oldIntSelMechName, &intChoiceIdx)
            }
        }
        
        if (!isCalledFromInit) {
            selectNewExt(extChoiceIdx)
            selectNewInt(intChoiceIdx)
            
            // !! BUG: if switched to some less restrictive filter for the first time,
            //         the last 2 visible items are shown out of the list bottom until user resizes the widget a bit
            //         doNotify() doesn't help
        }
        
        // At this point, we can have list(s) with no selection (if user switched from less restrictive to more restrictive filter)
    }
    
    func warnIfUserHasNotSelectedPP() { local isOK
        isOK = 1
        mwh.startIntercepting()
        {
            if (isExtOrInt && extChoices.selected() == -1) {
                mcu4t.showPleaseSelectPpMsg(allComps, enumGapJuncCompIdxs.extGjPp)
                isOK = 0
            } else if (!isExtOrInt && intChoices.selected() == -1) {
                mcu4t.showPleaseSelectPpMsg(allComps, enumGapJuncCompIdxs.intGjPp)
                isOK = 0
            }
        }
        mwh.endIntercepting()
        return isOK
    }
    
    func applyChangesToGapJuncLocIfNeeded() {
        
        getOldPpName($s1)
        
        if (!isReseed) {
            return 0
        }
        
        commitVarsToGapJuncSet()
        
        mwh.showPleaseWaitBox("Reseeding GJ PPs / Ptrs in new random locations.")
        {
            gapJuncSet.applyChangesToLoc()
        }
        mwh.hidePleaseWaitBox()
        
        updateNumGapJuncsLabel()
        
        forceOrUnforceReseeding(0)
        
        return 1
    }
    
    func applyChangesToGapJuncStrucIfNeeded() { local numArg, isLocChanged, isExtOrInt_old, mechIdx, isSmthChanged
        strdef mechNameOrEmpty_old, mechName
        
        numArg = numarg()
        if (numArg == 0) {
            isLocChanged = 0
            isExtOrInt_old = getIsExtOrInt()
            getOldPpName(mechNameOrEmpty_old)
        } else if (numArg == 3) {
            isLocChanged = $1
            isExtOrInt_old = $2
            mechNameOrEmpty_old = $s3
        } else {
            codeContractViolation()
        }
        
        mechIdx = getSelMechIdxAndOptionalName(mechName)
        
        commitVarsToGapJuncSet()
        
        mwh.showPleaseWaitBox("Creating GJ PP structure.")
        {
            isSmthChanged = gapJuncSet.applyChangesToStrucIfNeeded(gapJuncSetIdx, mechIdx, mechName, isLocChanged, isExtOrInt_old, mechNameOrEmpty_old)
        }
        mwh.hidePleaseWaitBox()
        
        if (isSmthChanged) {
            updateNumInhomVarsLabel()
            updateNumStochVarsLabel()
            parentWidget.onApplyInChildHandler(gapJuncSetIdx)
        }
        
        return isSmthChanged
    }
    
    func applyChangesToDirtyHomogenVarsIfNeeded() { local mechIdx, isSmthChanged
        
        mechIdx = getSelMechIdxAndOptionalName()
        
        commitVarsToGapJuncSet()
        
        mwh.showPleaseWaitBox("Updating GJ PP homogen vars.")
        {
            isSmthChanged = gapJuncSet.applyChangesToDirtyHomogenVars(mechIdx)
        }
        mwh.hidePleaseWaitBox()
        
        updateNumInhomVarsLabel()
        
        return isSmthChanged
    }
    
    proc updateNumInhomVarsLabel() {
        mcu4t.updateNumInhomVarsLabel(1, gapJuncSetIdx, numInhomVarsVarLabel)
    }
    
    proc updateNumStochVarsLabel() {
        mcu4t.updateNumStochVarsLabel(1, gapJuncSetIdx, numStochVarsVarLabel)
    }
    
    proc dismissHandler() { localobj nil
        
        if (mainBox == nil) {
            return
        }
        
        if (!mainBox.ismapped()) {
            return
        }
        
        shapeBox.unmap()
        
        dismissChilds()
        
        mainBox.unmap()
        
        if (!gapJuncSet.isExtOrInt) {   // Don't use the temp copy "isExtOrInt" here
            gapJuncSet.destroyMarkerPointProcessesForIntGapJuncPointers()
        }
        
        gapJuncSet = nil    // Not to keep an extra reference to gapJuncSet.allGapJuncs
        allComps = nil          // Just in case
        selected_ref = nil      //
    }
    
    // All next staff is private
    
    
    // !!! code dup. with SpineSeedingSubWidget and MainUI
    proc createWhereToSeedBox() { local _isExtOrInt, h localobj vBox1, hBox, vBox2, deck
        strdef Word, Wor, text
        
        _isExtOrInt = $1
        
        if (_isExtOrInt) {
            Word = "External"
            Wor = "Ext"
        } else {
            Word = "Internal"
            Wor = "Int"
        }
        
        vBox1 = new VBox()
        vBox1.intercept(1)
        {
            xpanel("")
            sprint(text, "Where to seed the %s GJs:", Word)
            xlabel(text)
            xpanel()
            hBox = new HBox()
            hBox.intercept(1)
            {
                xpanel("")
                xradiobutton("All sections", "whereToSeedChangedHandler(1)", isAllOrSomeSecsSeeded == 1)
                xradiobutton("Some sections (I will select them)", "whereToSeedChangedHandler(0)", isAllOrSomeSecsSeeded == 0)
                xpanel()
                deck = new Deck()
                decks4[_isExtOrInt] = deck
                deck.intercept(1)
                {
                    createEmptyPanel()
                    xpanel("")
                    xbutton("Select", "selectSectionsHandler()")
                    xpanel()
                }
                deck.intercept(0)
                // deck.flip_to(*)  // Will be done later in whereToSeedChangedHandler
                deck.map()
            }
            hBox.intercept(0)
            hBox.map()
            xpanel("")
            sprint(text, "How dense to seed the %s GJs:", Word)
            xlabel(text)
            xpanel()
            xpanel("")
            sprint(text, "Max numb %s GJs per section", Wor)
            xpvalue(text, &maxNumGapJuncsPerSec, 1, "forceOrUnforceReseeding(1)")
            sprint(text, "Edit Min distribution over branches for %s GJs", Wor)
            xbutton(text, "_showSeedingDensityWidget()")
            xpanel()
            deck = new Deck()
            decks5[_isExtOrInt] = deck
            deck.intercept(1)
            {
                createEmptyPanel()
                vBox2 = new VBox()
                vBox2.intercept(1)
                {
                    if (_isExtOrInt) {
                        xpanel("")
                        sprint(text, "With what value (stub) to feed the %s GJ pointer:", Word)
                        xlabel(text)
                        xpanel()
                        xpanel("")
                        xbutton("Edit the value", "editExtValueHandler()")
                        xpanel()
                        h = 131.25
                    } else {
                        xpanel("")
                        sprint(text, "Where to connect the %s GJ pointer:", Word)
                        xlabel(text)
                        xpanel()
                        xpanel("")
                        xpvalue("Max radius of connection", &maxRadiusForIntGapJuncs, 1, "forceOrUnforceReseeding(1)")
                        xpanel()
                        xpanel("")
                        // !!! when user switches this, it would be better not to force the reseeding gap juncs and ptrs in new random locations
                        xcheckbox("Place PPs by pairs (criss-cross connection)", &isCrissCrossForIntGapJuncs, "forceOrUnforceReseeding(1)")
                        xpanel()
                        h = 152.75
                    }
                    createElasticSpacer()
                }
                vBox2.intercept(0)
                vBox2.map("", -1, -1, 1, h)
            }
            deck.intercept(0)
            // deck.flip_to(*)      // Will be done later in {ext/int}ChoicesSelectHandler
            deck.map()
        }
        vBox1.intercept(0)
        vBox1.map()
    }
    
    proc setMaxDistVarLabel() { local maxDist
        maxDist = $1
        sprint(maxDistVarLabel, "Max distance for cell: %g (%s)", maxDist, units("L"))
    }
    
    proc updateNumGapJuncsLabel() { local numGapJuncs
        numGapJuncs = gapJuncSet.allGapJuncs.count()
        sprint(numGapJuncsLabel, "Number of GJs in this set: %d", numGapJuncs)
    }
    
    proc gapJuncTypeChangedHandler() { local cardIdx
        isExtOrInt = $1
        dismissChilds(1)
        cardIdx = 1 - isExtOrInt
        deck1.flip_to(cardIdx)
        deck2.flip_to(cardIdx)
        cardIdx = 1 - isAllOrSomeSecsSeeded
        decks4[isExtOrInt].flip_to(cardIdx)
        forceOrUnforceReseeding(1)
    }
    
    proc whereToSeedChangedHandler() { local cardIdx
        isAllOrSomeSecsSeeded = $1
        dismissIfNotNil(ssSubWidget)
        cardIdx = 1 - isAllOrSomeSecsSeeded
        decks4[isExtOrInt].flip_to(cardIdx)
        forceOrUnforceReseeding(1)
    }
    
    proc selectSectionsHandler() {
        dismissIfNotNil(ssSubWidget)
        ssSubWidget = new SectionsSelectorWidget(3, selected_ref)
        ssSubWidget.show(900, 100)      // --> selectSectionsHandler_layer2
    }
    
    proc selectSectionsHandler_layer2() {
        // User cannot switch between ext and int GJs in GapJuncManagerMainWidget when SectionsSelectorWidget is shown
        selected_ref = $o1
        
        forceOrUnforceReseeding(1)
    }
    
    proc _showSeedingDensityWidget() {
        
        showSeedingDensityWidget(gapJuncSet.seedingDensityHelper, 900, 300)
        
        forceOrUnforceReseeding(1)
    }
    
    proc editExtValueHandler() {
        editMechVarsOrExtValueCommonPrologue()
        
        varsEditorSubWidget = new VarsEditorWidget(2, 1, gapJuncSetIdx, enumGapJuncCompIdxs.extGjExtValue, utils4FakeMech4GapJuncExtValue.mechIdx, 1)
        varsEditorSubWidget.show()
    }
    
    // !!! code dup. with SynManagerMainWidget
    func chooseDefSelItemIdx() { local idx localobj list
        strdef ppName
        
        list = $o1
        
        gapJuncSet.getPpNameOrEmpty(ppName)
        
        if (stringEmpty(ppName)) {
            return 0
        }
        
        for idx = 0, list.count() - 1 {
            if (stringsEqual(list.o(idx).s, ppName)) {
                return idx
            }
        }
        
        return -1
    }
    
    proc selectNewExt() { local extChoiceIdx
        extChoiceIdx = $1
        mcu4t.selectAndScroll(extChoices, extChoiceIdx)
        extChoicesSelectHandler(extChoiceIdx)
    }
    
    proc selectNewInt() { local intChoiceIdx
        intChoiceIdx = $1
        mcu4t.selectAndScroll(intChoices, intChoiceIdx)
        intChoicesSelectHandler(intChoiceIdx)
    }
    
    // !!! a lot of code dup. with SynManagerMainWidget below
    
    proc extChoicesSelectHandler() { local isNoSelection, doesHavePtr
        strdef mechName
        
        defExtChoiceIdx = $1
        
        isNoSelection = choicesSelectHandlerCore(1, extChoices, defExtChoiceIdx, &doesHavePtr, mechName)
        if (isNoSelection) {
            return
        }
        
        if (doesHavePtr) {
            utils4FakeMech4GapJuncExtValue.setNewVarCore(mechName)
        }
    }
    
    proc intChoicesSelectHandler() { local isNoSelection, doesHavePtr
        strdef mechName, line1, line2
        
        defIntChoiceIdx = $1
        
        if (!_isShow) {
            mwh.startIntercepting()
        }
        isNoSelection = choicesSelectHandlerCore(0, intChoices, defIntChoiceIdx, &doesHavePtr, mechName)
        if (isNoSelection) {
            if (!_isShow) {
                mwh.endIntercepting()
            }
            return
        }
        
        if (!doesHavePtr) {
            sprint(line1, "The \"%s\" PP has no POINTER, so it's not suitable for internal GJ.", mechName)
            line2 = "But we'll use it anyway, and these GJs will work like the external ones."
            mwh.showWarningBox(line1, line2)
        }
        
        if (!_isShow) {
            mwh.endIntercepting()
        }
    }
    
    // !!!! maybe don't pass _isExtOrInt as an arg here
    func choicesSelectHandlerCore() { local _isExtOrInt, defChoiceIdx, mechIdxOrMinus1, doesHavePtr, cardIdx localobj choices, deck
        strdef mechName
        
        _isExtOrInt = $1
        choices = $o2
        defChoiceIdx = $3
        
        deck = decks5[_isExtOrInt]
        
        mechIdxOrMinus1 = flipEditPPVarsDeckAndDismissChilds(decks3[_isExtOrInt], choices, defChoiceIdx)
        if (mechIdxOrMinus1 == -1) {
            deck.flip_to(0)
            return 1
        }
        mth.getMechName(1, mechIdxOrMinus1, mechName)
        pyObj.ms_warnIfNoRecordForGapJunc(mechName)
        doesHavePtr = pyObj.ms_doesGapJuncHavePtr(mechName)
        cardIdx = doesHavePtr
        deck.flip_to(cardIdx)
        
        $&4 = doesHavePtr
        $s5 = mechName
        
        return 0
    }
    
    // !!! try to move this to ManagersCommonUtilsForTaps
    func flipEditPPVarsDeckAndDismissChilds() { local choiceIdx, mechIdx, cardIdx localobj deck, choices
        deck = $o1
        choices = $o2
        choiceIdx = $3
        if (choiceIdx != -1) {
            mechIdx = choices.o(choiceIdx).idx
            cardIdx = 1 + mechIdx
            deck.flip_to(cardIdx)
        } else {
            mechIdx = -1
            deck.flip_to(0)
        }
        dismissChilds(1)
        return mechIdx
    }
    
    // !!! try to move this to ManagersCommonUtilsForTaps
    obfunc createEditPPVarsDeck() { local ppCompIdx, mechIdx localobj deck
        
        ppCompIdx = $1
        
        deck = new Deck()
        deck.intercept(1)
        {
            createEmptyPanel()
            for mechIdx = 0, mth.getNumMechs(1) - 1 {
                insertPanelWithMenu(ppCompIdx, mechIdx)
            }
        }
        deck.intercept(0)
        // deck.flip_to(*)  // Will be done in extChoicesSelectHandler or intChoicesSelectHandler later
        deck.map()
        
        return deck
    }
    
    proc insertPanelWithMenu() { local ppCompIdx, mechIdx
        strdef label
        
        ppCompIdx = $1
        mechIdx = $2
        
        sprint(label, "Edit %s PP vars", allComps.o(ppCompIdx).name)
        
        xpanel("")
        xmenu(label)
        {
            // Alternatively, we can show it as a separate item on top of the panel, but it looks worse
            insertGlobalItem(mechIdx)
            
            insertNotGlobalItem(ppCompIdx, 1, mechIdx)  // PARAMETER
            insertNotGlobalItem(ppCompIdx, 2, mechIdx)  // ASSIGNED
            insertNotGlobalItem(ppCompIdx, 3, mechIdx)  // STATE
            
            // !! rare case: if this mech does not have any vars at all (e.g. PointProcessMark), then need to show a message about that once user clicks the menu
            //    (actually, the menu must be replaced with a button in that case)
            // sprint(text, "The mechanism \"%s\" does not have any variables.", mechName)
            // mwh.showWarningBox(text)
        }
        xmenu()
        xpanel()
    }
    
    proc insertGlobalItem() { local mechIdx
        mechIdx = $1
        if (mth.doesMechHaveGlobalVars(1, mechIdx)) {
            insertItemCore(-1, -1, mechIdx)     // args: not_used, GLOBAL, mechIdx
        }
    }
    
    proc insertNotGlobalItem() { local ppCompIdx, varType, mechIdx
        ppCompIdx = $1
        varType = $2
        mechIdx = $3
        
        if (mth.doesMechHaveNotGlobalVars(1, mechIdx, varType)) {
            insertItemCore(ppCompIdx, varType, mechIdx)
        }
    }
    
    proc insertItemCore() { local ppCompIdx, varType, mechIdx
        strdef varTypeName, text, handlerHocCommand
        
        ppCompIdx = $1    // Will not be used if varType == -1 ("GLOBAL")
        varType = $2
        mechIdx = $3
        
        mth.getVarTypeName(varType, varTypeName)
        
        sprint(text, "Edit %s variables", varTypeName)
        sprint(handlerHocCommand, "editMechVarsHandler(%d, %d, %d)", ppCompIdx, mechIdx, varType)
        xbutton(text, handlerHocCommand)
    }
    
    proc editMechVarsHandler() { local ppCompIdx, mechIdx, varType, varTypeIdx localobj ppComp, mechStd
        strdef header, mechName
        
        ppCompIdx = $1  // Will not be used if varType == -1 ("GLOBAL")
        mechIdx = $2
        varType = $3
        
        editMechVarsOrExtValueCommonPrologue()
        
        if (varType != -1) {
            // Convert from varType to varTypeIdx
            varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
            
            ppComp = allComps.o(ppCompIdx)
            
            mechStd = ppComp.mechStds[mechIdx][varTypeIdx]
            
            if (mechStd.count() == 0) {
                codeContractViolation()
            }
            
            // Deprecated editor
            // ppComp.prepareVarsEditorHeader(mechIdx, varType, header)
            // mechStd.panel(header)
            
            // New editor
            varsEditorSubWidget = new VarsEditorWidget(1, 1, gapJuncSetIdx, ppCompIdx, mechIdx, varType)
            varsEditorSubWidget.show()
        } else {
            if (!mth.doesMechHaveGlobalVars(1, mechIdx)) {
                codeContractViolation()
            }
            
            mth.getMechName(1, mechIdx, mechName)
            varsEditorSubWidget = new GlobalsEditorWidget()
            varsEditorSubWidget.show(mechName, 435, 100)
        }
    }
    
    proc applyHandler() { local isOK, isExtOrInt_old, isLocChanged, isSmthChanged
        strdef mechNameOrEmpty_old
        
        isOK = warnIfUserHasNotSelectedPP()
        if (!isOK) {
            return
        }
        
        dismissChilds()
        
        isExtOrInt_old = getIsExtOrInt()
        
        isLocChanged = applyChangesToGapJuncLocIfNeeded(mechNameOrEmpty_old)
        isSmthChanged = applyChangesToGapJuncStrucIfNeeded(isLocChanged, isExtOrInt_old, mechNameOrEmpty_old) || isLocChanged
        
        if (isLocChanged) {     // !!! maybe do this after calling applyChangesToDirtyHomogenVarsIfNeeded?
            inhomAndStochLibrary.onTapLocChange(1, gapJuncSetIdx)
        }
        
        // !!! maybe no need to do this when isStrucChanged because it's already done, so we need just to unset isDirty flags
        isSmthChanged = applyChangesToDirtyHomogenVarsIfNeeded() || isSmthChanged
        
        if (isLocChanged) {
            showAllLocationsUpdate()
        }
        
        mcu4t.showApplyMsg(isSmthChanged, "gap junctions")
        
        forceOrUnforceReseeding(0)
        
        parentWidget.onApplyInChildHandler(gapJuncSetIdx)
    }
    
    // !! code dup. with SynManagerMainWidget.showAllLocationsHandler
    proc showAllLocationsHandler() { localobj shape
        strdef title
        
        if (isExtOrInt) {
            title = "External GJ PP locations"
        } else {
            title = "Internal GJ PP and Ptr locations"
        }
        
        shapeBox = new VBox()
        shapeBox.intercept(1)
        {
            shape = new Shape()
            shape.exec_menu("View = plot")
            gapJuncSet.updateMarks(shape, 1)
        }
        shapeBox.intercept(0)
        shapeBox.map(title, 965, 10, 300, 250)
    }
    
    proc showAllLocationsUpdate() {
        if (shapeBox.ismapped()) {
            showAllLocationsHandler()
        }
    }
    
    proc isReseedCheckBoxHandler() {
        if (isReseedingRequired && !isReseed) {
            isReseed = 1
            mwh.showWarningBox("The reseeding is required after the changes you've made")
        }
    }
    
    proc adjustListFilterHandler() {
        dismissChilds()
        gjmlfw.show(this)
    }
    
    proc forceOrUnforceReseeding() { local isForce
        isForce = $1
        isReseed = isForce
        isReseedingRequired = isForce
    }
    
    func analyzeMechName() { local isGapInName, doesHavePtr
        strdef mechName, mechNameLower
        mechName = $s1
        
        stringToLowerCase(mechName, mechNameLower)
        isGapInName = containsSubstring(mechNameLower, "gap")
        
        doesHavePtr = pyObj.ms_doesGapJuncHavePtr(mechName)
        
        $&2 = doesHavePtr
        
        return isGapInName
    }
    
    proc editMechVarsOrExtValueCommonPrologue() { local isExtOrInt_old, isLocChanged
        strdef mechNameOrEmpty_old
        
        dismissChilds()
        
        isExtOrInt_old = getIsExtOrInt()
        
        isLocChanged = applyChangesToGapJuncLocIfNeeded(mechNameOrEmpty_old)
        if (isLocChanged) {
            applyChangesToGapJuncStrucIfNeeded(1, isExtOrInt_old, mechNameOrEmpty_old)
            inhomAndStochLibrary.onTapLocChange(1, gapJuncSetIdx)
            // !!!?? applyChangesToDirtyHomogenVarsIfNeeded()
            showAllLocationsUpdate()
        }
    }
    
    func getIsExtOrInt() {
        return gapJuncSet.getIsExtOrInt()
    }
    
    proc getOldPpName() {
        gapJuncSet.getPpNameOrEmpty($s1)    // !!! maybe disallow "Empty" here and rename
    }
    
    func getSelMechIdxAndOptionalName() { local numArg localobj choices
        numArg = numarg()
        if (numArg > 1) {
            codeContractViolation()
        }
        
        if (isExtOrInt) {
            choices = extChoices
        } else {
            choices = intChoices
        }
        
        if (numArg == 1) {
            mcu4t.getSelMechNameOrEmptyString(choices, $s1)
        }
        
        return mcu4t.getSelMechIdxOrMinusOne(choices)
    }
    
    proc commitVarsToGapJuncSet() {
        gapJuncSet.isExtOrInt = isExtOrInt
        gapJuncSet.isAllOrSomeSecsSeeded = isAllOrSomeSecsSeeded
        gapJuncSet.selected_ref = selected_ref
        gapJuncSet.maxNumGapJuncsPerSec = maxNumGapJuncsPerSec
        gapJuncSet.maxRadiusForIntGapJuncs = maxRadiusForIntGapJuncs
        gapJuncSet.isCrissCrossForIntGapJuncs = isCrissCrossForIntGapJuncs
    }
    
    proc dismissChilds() { local numArg, isIgnoreListsFilterWidget
        numArg = numarg()
        if (numArg > 1) {
            codeContractViolation()
        }
        
        if (numArg == 1) {
            isIgnoreListsFilterWidget = $1
        } else {
            isIgnoreListsFilterWidget = 0
        }
        
        dismissIfNotNil(ssSubWidget)
        dismissIfNotNil(seedingDensityWidget)
        
        mcu4t.dismissChilds(isIgnoreListsFilterWidget, 0, -1, gjmlfw, varsEditorSubWidget)
    }
    
endtemplate GapJuncManagerMainWidget
