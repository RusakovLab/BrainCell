
veryMinSeedingDistance = 0.1    // um


begintemplate SeedingDensityWidget
    
    public show, dismissHandler
    
    external veryMinSeedingDistance
    external unmapIfNotNil, codeContractViolation
    
    objref mainBox, deck, textEditor
    
    objref seedingDensityHelper
    
    
    proc show() { local numArg, x, y, cardIdx localobj vBox
        strdef str1, str2, str3, text, hint
        
        numArg = numarg()
        if (numArg != 1 && numArg != 3) {
            codeContractViolation()
        }
        seedingDensityHelper = $o1
        if (numArg == 3) {
            x = $2
            y = $3
        } else {
            x = 250
            y = 245
        }
        
        seedingDensityHelper.onShowInSeedingDensityWidget(str1, str2, str3)
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            sprint(text, "How to seed the %s along %s:", str1, str2)
            xlabel(text)
            xradiobutton("Uniform", "isUniformChangedHandler(1)", seedingDensityHelper.isUniform)
            xradiobutton("Non-uniform, using func(dist)", "isUniformChangedHandler(0)", !seedingDensityHelper.isUniform)
            xlabel("")
            xpanel()
            deck = new Deck()
            deck.intercept(1)
            {
                xpanel("")
                // xlabel("Initial min. distance between stalks/spines is limit value that cannot be reduced using panel.")
                // xlabel("To decrease this value, increase value - MaxNumberStalksPerDendrite/MaxNumberSpinesPerDendrite")
                xpvalue("Min distribution over branches", &seedingDensityHelper.minSeedingDistance, 1)
                xpanel()
                vBox = new VBox()
                vBox.intercept(1)
                {
                    xpanel("")
                    // !! keep in sync with CustomCodeDistFuncHelper.selectedHandler
                    sprint(text, "Enter Python expression (one-liner) for \"Min distribution over branches (%s)\" > 0.", units("L"))
                    xlabel(text)
                    xlabel("The expression must depend on \"x\". We've done \"from math import *\" for you.")
                    xpanel()
                    textEditor = new TextEditor(seedingDensityHelper.oneLinerPyDistFuncBody)
                    textEditor.map()
                }
                vBox.intercept(0)
                vBox.map()
            }
            deck.intercept(0)
            // deck.flip_to(*)  // Will be done below in isUniformChangedHandler
            deck.map()
            xpanel("")
            sprint(hint, "Hints: The lower value, the higher density of %s;", str1)
            xlabel(hint)
            sprint(hint, "           the value is capped from below at %g (%s).", veryMinSeedingDistance, units("L"))
            xlabel(hint)
            xbutton(str3, "doneHandler()")
            xpanel()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("Min distribution over branches", x, y, 380, 210)
        
        isUniformChangedHandler(seedingDensityHelper.isUniform)
    }
    
    proc dismissHandler() { localobj nil
        unmapIfNotNil(mainBox)
        seedingDensityHelper = nil
    }
    
    // All next staff is private
    
    
    proc isUniformChangedHandler() { local cardIdx
        seedingDensityHelper.isUniform = $1
        cardIdx = !seedingDensityHelper.isUniform
        deck.flip_to(cardIdx)
    }
    
    proc doneHandler() { local isClose
        isClose = seedingDensityHelper.onDoneInSeedingDensityWidget(textEditor.text())
        
        if (isClose) {
            dismissHandler()
        }
    }
    
endtemplate SeedingDensityWidget


proc showSeedingDensityWidget() { local numArg, x, y localobj seedingDensityHelper, nil
    
    numArg = numarg()
    if (numArg != 1 && numArg != 3) {
        codeContractViolation()
    }
    seedingDensityHelper = $o1
    if (numArg == 3) {
        x = $2
        y = $3
    }
    
    if (seedingDensityWidget == nil) {
        seedingDensityWidget = new SeedingDensityWidget()
    } else {
        seedingDensityWidget.dismissHandler()
    }
    
    if (numArg == 3) {
        seedingDensityWidget.show(seedingDensityHelper, x, y)
    } else {
        seedingDensityWidget.show(seedingDensityHelper)
    }
}
