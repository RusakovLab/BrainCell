
{ load_file("Exported/InterModularSectionUtilsPart1_Exported.hoc") }
{ load_file("Exported/InterModularSectionUtilsPart2_Exported.hoc") }


// Get the name of the currently accessed section (either object name or array name)
// Here are some examples:
//  "secName"                               -> "secName"
//  "secArrName[12]"                        -> "secArrName"
//  "secArrName[12][34]"                    -> "secArrName"
//  "objArrName[12].secName"                -> "objArrName[12].secName"
//  "objArrName[12][34].secName"            -> "objArrName[12][34].secName"
//  "objArrName[12].secArrName[34]"         -> "objArrName[12].secArrName"
//  "objArrName[12].secArrName[34][56]"     -> "objArrName[12].secArrName"
//  "objArrName[12][34].secArrName[56]"     -> "objArrName[12][34].secArrName"
//  "objArrName[12][34].secArrName[56][78]" -> "objArrName[12][34].secArrName"
// $s1 (output) - The section name
proc getCurrentSecName() {
    strdef pyCommand
    // !! for better performance, maybe don't use the regular expression here at all
    //    or, at least, compile it once with re.compile and then reuse
    sprint(pyCommand, "(exec('import re'), re.sub(r'(\\[\\d+\\])+$', '', '%s'))[1]", secname())
    $s1 = pyObj.ev(pyCommand)
}

// Get names of all created sections (either object name or array name)
// Returns List of String-s containing all unique names
obfunc getAllSectionNames() { local isFound localobj secNamesHocList, secNamesPySet
    strdef secName
    
    secNamesHocList = new List()
    secNamesPySet = pyObj.set()
    
    forall {
        getCurrentSecName(secName)
        
        // Check if we have found this name before
        isFound = pyObj.isInPySet(secNamesPySet, secName)
        
        if (!isFound) {
            secNamesHocList.append(new String(secName))
            secNamesPySet.add(secName)
        }
    }
    
    return secNamesHocList
}

// !! the range returned by this func depends on the initial segmentation;
//    do I need to apply some default segmentation before calling it?
func getDistRangeGivenSections() { local distMin, distMax, isDisconnected, x, dist localobj list_ref
    
    list_ref = $o1
    
    distMin = math.inf
    distMax = -1
    
    isDisconnected = 0
    // We could check just 2 end points for each section for higher performance,
    // but there is no guarantee that the distance centre was not placed somewhere in this compartment inside a section
    for eachSecInList(list_ref) {
        for (x) {
            dist = distance(x)
            if (isDisconnectedDistance(dist)) {
                isDisconnected = 1
                break
            }
            math.updateMinMax(&distMin, &distMax, dist)
        }
    }
    
    if (isDisconnected) {
        return 1
    }
    
    $&2 = distMin
    $&3 = distMax
    
    return 0
}

// !! the range returned by this func depends on the initial segmentation;
//    do I need to apply some default segmentation before calling it?
// !!! major code dup. with getDistRangeGivenSections
func getMaxDist() { local maxDist, isDisconnected, x, dist
    
    maxDist = -1
    
    isDisconnected = 0
    // We could check just 2 end points for each section for higher performance,
    // but there is no guarantee that the distance centre was not placed somewhere in this compartment inside a section
    forall {
        for (x) {
            dist = distance(x)
            if (isDisconnectedDistance(dist)) {
                isDisconnected = 1
                break
            }
            maxDist = math.max(maxDist, dist)
        }
    }
    
    if (isDisconnected) {
        return 1
    }
    
    $&1 = maxDist
    
    return 0
}

func isDisconnectedDistance() { local dist
    dist = $1
    return (dist == 1e20)   // NEURON docs read: "If a continuous path does not exist the return value is 1e20"
}

// For all sections from this SectionList, add corresponding SectionRef to the List
// $o1 - The SectionList
// $o2 - The List
proc secListToListOfSecRef() { localobj secList, list_ref
    secList = $o1
    list_ref = $o2
    forsec secList {
        list_ref.append(new SectionRef())
    }
}

obfunc listOfSecRefToSecList() { localobj list_ref, secList
    list_ref = $o1
    secList = new SectionList()
    for eachSecInList(list_ref) {
        secList.append()
    }
    return secList
}

func capDiam() {
    // If user sets too small "diam" for a section, NEURON resets it to 1e-9 when user enters
    //  Tools -> Distributed Mechanisms -> Viewers -> Shape Name
    // and then double clicks on a section in the list.
    // So we cap "diam" in advance just to avoid the unexpected behaviour later.
    return math.max($1, 1e-9)
}

// Delete all sections
// (The names remain declared and cannot be used for anything else than creating new sections and section arrays)
proc deleteAllSections() {
    forall {
        delete_section()
    }
}

// Check if the currently accessed section belongs to a dendrite
// Input: usedNamesForDendrites (taken from the top level)
// Returns: 0/1 flag
func checkIfCurrentSecIsDendrite() { local idxOrMinus1
    strdef secName
    
    getCurrentSecName(secName)
    
    // !! improve performance here using Set in Python
    idxOrMinus1 = findItemInListByString(usedNamesForDendrites, secName)
    
    return (idxOrMinus1 != -1)
}

// For the current section and all its children subtree, take only those sections which are selectable, and add SectionRef-s to the List
// $o1 - The List
// $o2 - The plugin object that implements "isCurrentSectSelectable" predicate func
proc addThisAndFilteredChildSecRefsToTheList() { localobj list_ref, in_plugin, secList
    list_ref = $o1
    in_plugin = $o2
    
    secList = new SectionList()
    secList.subtree()
    
    forsec secList {
        if (in_plugin.isCurrentSectSelectable()) {
            list_ref.append(new SectionRef())
        }
    }
}

// For all duplicate sections, remove SectionRef-s from the List, so only one copy remains
// $o1 - The List
proc removeAllDupSecRefsFromTheList() { localobj list_ref, secList
    list_ref = $o1
    
    secList = listOfSecRefToSecList(list_ref)
    secList.unique()
    
    list_ref.remove_all()
    secListToListOfSecRef(secList, list_ref)
}

iterator eachRandomlySeededSlotInSecList() { local numSlotsPerSec, secIdx, slotIdx, connectionPoint, minSeedingDistance, controlFactor, invNormFactor localobj list_ref, seedingDensityHelper, randomSeeder
    
    list_ref = $o2
    numSlotsPerSec = $3
    seedingDensityHelper = $o4
    randomSeeder = $o5
    
    for secIdx = 0, list_ref.count() - 1 {
        list_ref.o(secIdx).sec {
            for slotIdx = 0, numSlotsPerSec - 1 {
                connectionPoint = slotIdx / numSlotsPerSec
                minSeedingDistance = seedingDensityHelper.getMinSeedingDistance(connectionPoint)
                controlFactor = minSeedingDistance * numSlotsPerSec
                invNormFactor = L / controlFactor                       // !! this can be > 1
                if (randomSeeder.uniform(0, 1) < invNormFactor) {       // !! use .repick() for performance
                    $&1 = connectionPoint
                    iterator_statement
                }
            }
        }
    }
}
