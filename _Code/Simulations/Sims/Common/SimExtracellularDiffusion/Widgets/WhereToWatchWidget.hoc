
// !!!!! try to use shape.flush() in "proc updateShape" for higher performance

begintemplate WhereToWatchWidget

    public show, dismissHandler
    public enumWhereToWatch
    
    external plotShapeUtils
    external gridRegion
    external createEmptyPanel, addEmptyLabels, unmapIfNotNil
    external enumMouseEvents
    
    enumWhereToWatch = -1
    isShowAllSrcs = -1
    
    objref mainBox, shape, gridSettingsDeck, twoDimGridPlaneDeck, nmbOfPtsDeck, deployDestroyDeck
    
    objref ecssShowHelper
    
    
    proc init() {
        
        // Defaults
        enumWhereToWatch = 0
        isShowAllSrcs = 1
        
        ecssShowHelper = new ECSsShowHelper()
    }
    
    _isSkipShapeUpdate = -1
    
    proc show() { localobj vBox1, vBox2, vBox3, hBox, spacerDeck
        strdef menuToolName
        
        mainBox = new HBox()
        mainBox.intercept(1)
        {
            vBox1 = new VBox()
            vBox1.intercept(1)
            {
                xpanel("")
                xlabel("Where to watch the variable:")
                xpanel()
                xpanel("")
                xradiobutton("Each segment of each section", "whereToWatchChangedHandler(0)", enumWhereToWatch == 0)
                xradiobutton("Some custom grid in space", "whereToWatchChangedHandler(1)", enumWhereToWatch == 1)
                xradiobutton("Both 2 above", "whereToWatchChangedHandler(2)", enumWhereToWatch == 2)
                xpanel()
                gridSettingsDeck = new Deck()
                gridSettingsDeck.intercept(1)
                {
                    createEmptyPanel()
                    vBox2 = new VBox()
                    vBox2.intercept(1)
                    {
                        hBox = new HBox()
                        hBox.intercept(1)
                        {
                            vBox3 = new VBox()
                            vBox3.intercept(1)
                            {
                                xpanel("")
                                xlabel("The grid type:")
                                xpanel()
                                spacerDeck = new Deck()
                                spacerDeck.intercept(1)
                                {
                                    xpanel("")
                                    xradiobutton("2D grid", "gridTypeChangedHandler(0)", !gridRegion.is3dOr2dGrid)  // !!! or "Planar" ?
                                    xradiobutton("3D grid", "gridTypeChangedHandler(1)", gridRegion.is3dOr2dGrid)   // !!! or "Volumetric" ?
                                    xpanel()
                                }
                                spacerDeck.intercept(0)
                                spacerDeck.flip_to(0)
                                spacerDeck.map()
                            }
                            vBox3.intercept(0)
                            vBox3.map()
                            twoDimGridPlaneDeck = new Deck()
                            twoDimGridPlaneDeck.intercept(1)
                            {
                                createEmptyPanel()
                                vBox3 = new VBox()
                                vBox3.intercept(1)
                                {
                                    xpanel("")
                                    xlabel("2D grid plane:")
                                    xpanel()
                                    spacerDeck = new Deck()
                                    spacerDeck.intercept(1)
                                    {
                                        xpanel("")
                                        xradiobutton("XY", "twoDimGridPlaneChangedHandler(0)", gridRegion.twoDimGridPlaneIdx == 0)
                                        xradiobutton("ZY", "twoDimGridPlaneChangedHandler(1)", gridRegion.twoDimGridPlaneIdx == 1)
                                        xradiobutton("XZ", "twoDimGridPlaneChangedHandler(2)", gridRegion.twoDimGridPlaneIdx == 2)
                                        xpanel()
                                    }
                                    spacerDeck.intercept(0)
                                    spacerDeck.flip_to(0)
                                    spacerDeck.map()
                                }
                                vBox3.intercept(0)
                                vBox3.map()
                            }
                            twoDimGridPlaneDeck.intercept(0)
                            // twoDimGridPlaneDeck.flip_to(*)  // Will be done in gridTypeChangedHandler below
                            twoDimGridPlaneDeck.map()
                        }
                        hBox.intercept(0)
                        hBox.map()
                        xpanel("")
                        xlabel("Number of points:")
                        xpanel()
                        nmbOfPtsDeck = new Deck()
                        nmbOfPtsDeck.intercept(1)
                        {
                            // !!!!! maybe add handlers to prevent fractional values for nx, ny and nz
                            xpanel("")
                            xpvalue("Nx", &gridRegion.nx, 1)
                            xpvalue("Ny", &gridRegion.ny, 1)
                            xpanel()
                            xpanel("")
                            xpvalue("Nz", &gridRegion.nz, 1)
                            xpvalue("Ny", &gridRegion.ny, 1)
                            xpanel()
                            xpanel("")
                            xpvalue("Nx", &gridRegion.nx, 1)
                            xpvalue("Nz", &gridRegion.nz, 1)
                            xpanel()
                            xpanel("")
                            xpvalue("Nx", &gridRegion.nx, 1)
                            xpvalue("Ny", &gridRegion.ny, 1)
                            xpvalue("Nz", &gridRegion.nz, 1)
                            xpanel()
                        }
                        nmbOfPtsDeck.intercept(0)
                        // nmbOfPtsDeck.flip_to(*)     // Will be done in gridTypeChangedHandler below
                        nmbOfPtsDeck.map()
                    }
                    vBox2.intercept(0)
                    vBox2.map()
                }
                gridSettingsDeck.intercept(0)
                // gridSettingsDeck.flip_to(*)     // Will be done in whereToWatchChangedHandler below
                gridSettingsDeck.map()
                xpanel("")
                addEmptyLabels(2)
                xbutton("Done", "doneHandler()")
                xpanel()
            }
            vBox1.intercept(0)
            vBox1.map()
            vBox1 = new VBox()
            vBox1.intercept(1)
            {
                hBox = new HBox()
                hBox.intercept(1)
                {
                    xpanel("")
                    xradiobutton("XY projection", "viewDirectionChangedHandler(0)", ecssShowHelper.viewDirIdx == 0)
                    xradiobutton("ZY projection", "viewDirectionChangedHandler(1)", ecssShowHelper.viewDirIdx == 1)
                    xradiobutton("XZ projection", "viewDirectionChangedHandler(2)", ecssShowHelper.viewDirIdx == 2)
                    xpanel()
                    xpanel("")
                    xradiobutton("Show all srcs for all species", "showAllSrcsChangedHandler(1)", isShowAllSrcs)
                    xradiobutton("Hide all srcs for all species", "showAllSrcsChangedHandler(0)", !isShowAllSrcs)
                    xpanel()
                }
                hBox.intercept(0)
                hBox.map()
                shape = new Shape()
                ecssShowHelper.setShape(shape)
                deployDestroyDeck = new Deck()
                deployDestroyDeck.intercept(1)
                {
                    createEmptyPanel()
                    hBox = new HBox()
                    hBox.intercept(1)
                    {
                        xpanel("")
                        xbutton("Deploy grid", "gridRegion.deployGrid()")
                        xpanel()
                        xpanel("")
                        xbutton("Destroy grid", "destroyGrid()")
                        xpanel()
                    }
                    hBox.intercept(0)
                    hBox.map("", -1, -1, 1, 61)
                }
                deployDestroyDeck.intercept(0)
                // deployDestroyDeck.flip_to(*)    // Will be done in whereToWatchChangedHandler below
                deployDestroyDeck.map()
                xpanel("")
                xlabel("Hint 1: Drag the anchor points to adjust the grid region.")
                xlabel("Hint 2: After adding/deleting/moving/resizing an extracellular source,")
                xlabel("            close this widget and open again (just to update the Shape).")
                xlabel("Warning: Don't use \"3D Rotate\" when editing the grid region")
                xlabel("                (toggle \"XY/ZY/XZ projection\" instead).")
                xpanel()
            }
            vBox1.intercept(0)
            vBox1.map()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("Where to watch the variable", 700, 475, -1, -1)
        
        _isSkipShapeUpdate = 1
        {
            whereToWatchChangedHandler(enumWhereToWatch)        // --> updateShape
            gridTypeChangedHandler(gridRegion.is3dOr2dGrid)     // --> updateShape
        }
        _isSkipShapeUpdate = 0
        viewDirectionChangedHandler(ecssShowHelper.viewDirIdx)  // --> updateShape
        
        menuToolName = "Edit Grid Region"
        shape.menu_tool(menuToolName, "mouseEventsHandler")
        shape.exec_menu(menuToolName)
    }
    
    proc dismissHandler() {
        ecssShowHelper.dismissShape()
        unmapIfNotNil(mainBox)
    }
    
    // All next staff is private
    
    
    proc whereToWatchChangedHandler() { local enumWhereToWatch_old, cardIdx
        enumWhereToWatch_old = enumWhereToWatch
        
        enumWhereToWatch = $1
        
        cardIdx = (enumWhereToWatch != 0)
        gridSettingsDeck.flip_to(cardIdx)
        deployDestroyDeck.flip_to(cardIdx)
        
        if ((enumWhereToWatch_old == 0 && enumWhereToWatch > 0) || (enumWhereToWatch == 0 && enumWhereToWatch_old > 0)) {
            updateShape()
        }
    }
    
    proc gridTypeChangedHandler() { local cardIdx
        gridRegion.is3dOr2dGrid = $1
        
        cardIdx = 1 - gridRegion.is3dOr2dGrid
        twoDimGridPlaneDeck.flip_to(cardIdx)
        if (!gridRegion.is3dOr2dGrid) {
            cardIdx = gridRegion.twoDimGridPlaneIdx
        } else {
            cardIdx = 3
        }
        nmbOfPtsDeck.flip_to(cardIdx)
        
        updateShape()
    }
    
    proc twoDimGridPlaneChangedHandler() { local cardIdx
        gridRegion.twoDimGridPlaneIdx = $1
        
        cardIdx = gridRegion.twoDimGridPlaneIdx
        nmbOfPtsDeck.flip_to(cardIdx)
        
        updateShape()
    }
    
    proc viewDirectionChangedHandler() {
        ecssShowHelper.viewDirIdx = $1
        
        plotShapeUtils.setViewDir(shape, ecssShowHelper.viewDirIdx)
        shape.exec_menu("View = plot")
        
        updateShape()
    }
    
    proc showAllSrcsChangedHandler() {
        isShowAllSrcs = $1
        
        updateShape()
    }
    
    proc destroyGrid() {
        // !!!!! not sure why, but without the decoration, simple call of "gridRegion.destroyGrid()" is followed
        //       by much longer UI freezing time compared to "gridRegion.deployGrid()"
        //       when we work with massive grids (e.g. 100 x 100 x 10)
        shape.erase()
        {
            gridRegion.destroyGrid()
        }
        updateShape()
    }
    
    proc mouseEventsHandler() { local eventType, x_sc, y_sc, keystate, isUpdate
        eventType = $1
        x_sc = $2
        y_sc = $3
        keystate = $4   // Just a placeholder
        
        if (enumWhereToWatch == 0) {
            // !!!!! maybe turn off/on the mouse events in gridTypeChangedHandler using "shape.exec_menu"
            return
        }
        
        if (eventType == enumMouseEvents.press) {
            gridRegion.onMousePress(x_sc, y_sc)
        } else (eventType == enumMouseEvents.dragging) {
            isUpdate = gridRegion.onMouseDrag(x_sc, y_sc, ecssShowHelper.viewDirIdx)
            if (isUpdate) {
                updateShape()
            }
        }
    }
    
    proc doneHandler() {
        dismissHandler()
    }
    
    proc updateShape() {
        if (_isSkipShapeUpdate) {
            return
        }
        if (0) {
            // !!!!! much faster, but the ECSs labels step down each time we call "proc updateShape"
            shape.erase()
        } else {
            shape.erase_all()
            shape.observe()
        }
        if (isShowAllSrcs) {
            ecssShowHelper.showAllSrcs()
        }
        if (enumWhereToWatch != 0) {
            gridRegion.showEdgesAndAnchorPoints(shape, ecssShowHelper.viewDirIdx)
        }
    }
    
endtemplate WhereToWatchWidget
