
// !!!!! BUGs:
// * we hit the codeContractViolation in "proc onPlayerInit" if:
//   enable a grid in WhereToWatchWidget and then click "!! Show some random test data" in SimExtracellularDiffusion or
//   change the grid in WhereToWatchWidget and then click "Show the last record once again" in SimExtracellularDiffusion
// * the range variable name and the colourbar disappeared from the PlotShape
//   UPD: to have the colourbar (exactly in the corner), try to switch to Space Plot, and then back to Shape Plot;
//        at least, doing this manually makes the desired effect; use this approach in Inhomogeneity Editor as well
// * the PlotShape shows all sections in yellow when deploying just 1 Na+ sphere src with a series of on-off pulses
// * when user drags the slider to an edge, sometimes "t (ms)" and "Frame" get stuck on some middle value
// * for long animations, the "up" and "down" mini-arrows for "Frame" make step > 1

// !!!!! memos:
// * if enumWhereToWatch > 0 and user destroyed the grid, then don't forget to deploy it before the animation
// * don't forget to restore the old concentration in the sections when user closes the widget (but need to memorize it first)

// !!!!! ideas:
// * maybe make it possible to click on the PlotShape to make an "instant" Graph of the var vs time for the selected segment
// * if enumWhereToWatch == 2, maybe make it possible to hide either all cell sections or all grid sections
// * try to use plotShape.flush() in "proc updatePlotShape" for higher performance

begintemplate NeuronPlayerWidget

    public onPlayerInit, onPlayerShow, dismissHandler
    
    // Just a workaround to avoid the error in GraphUtils.parseVarsFromTheGraph
    public interval, frameTime, frameIdx_1Based
    
    external getRecSectsListAndNumSegms, assignRangeVarFromRecord
    external listOfSecRefToSecList, unmapIfNotNil, codeContractViolation
    external math, plotShapeUtils, gridRegion, gridOfSections
    external pyObj
    
    objref mainBox, plotShape
    
    isShowAllSrcs = -1
    isAnimated = -1
    interval = -1           // s
    frameTime = -1          // ms
    frameIdx_1Based = -1
    // !!!!! we use a different var for the slider to avoid the freezing problem for long animations caused by two factors:
    //       the slider has fixed resolution (0.01 of the range), we round the frame index to the nearest integer
    frameIdxForSlider_1Based = -1
    
    // !!!!! maybe only 2nd is enough everywhere
    objref list_ref
    objref listOfSecRef
    
    objref ecssShowHelper
    objref timer
    
    
    proc init() {
        
        // Defaults
        isShowAllSrcs = 1
        // !!!!! maybe stick to "FPS" instead of "interval" (and try to get the display refresh rate info with Python)
        interval = 0.1      // s
        
        ecssShowHelper = new ECSsShowHelper()
        
        timer = new Timer("onTimerStep()")
        
        units(&interval, "s")
        units(&frameTime, units("t"))
        
        variable_domain(&interval, 0.001, 1)    // s
    }
    
    // The recorded animation info
    objref _rangeVar
    objref _timeGrid
    _numFrames = -1
    strdef _varNameWithIndex
    _rangeVar_min = -1
    _rangeVar_max = -1
    
    proc onPlayerInit() { local time_min, time_max, numSegms
        
        dismissHandler()
        
        _rangeVar = $o1
        _timeGrid = $o2
        _varNameWithIndex = $s3
        _rangeVar_min = $4
        _rangeVar_max = $5
        
        // Default
        frameIdx_1Based = 1
        
        _numFrames = pyObj.len(_timeGrid)
        time_min = pyObj.getArrayElem(_timeGrid, 0)
        time_max = pyObj.getArrayElem(_timeGrid, _numFrames - 1)
        
        setTimeAndFrameIdxForSlider()
        
        list_ref = getRecSectsListAndNumSegms(&numSegms)
        if (numSegms != pyObj.len(pyObj.getArrayElem(_rangeVar, 0))) {
            codeContractViolation()
        }
        
        listOfSecRef = listOfSecRefToSecList(list_ref)
        
        if (gridRegion.is3dOr2dGrid) {
            ecssShowHelper.viewDirIdx = 0   // 0: XY
        } else {
            ecssShowHelper.viewDirIdx = gridRegion.twoDimGridPlaneIdx
        }
        
        variable_domain(&frameTime, time_min, time_max)
        variable_domain(&frameIdx_1Based, 1, _numFrames)
    }
    
    proc onPlayerShow() { localobj hBox, nil
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            xlabel("Visual style settings:")
            if (gridOfSections != nil) {
                xpvalue("Grid sec diam", &gridOfSections.gridSecDiam, 1, "gridOfSections.applyNewGridSecDiam()")
                gridOfSections.applyNewGridSecDiam()
            }
            xpvalue("Src marker size", &ecssShowHelper.markerSize, 1, "updatePlotShape()")
            xpanel()
            
            hBox = new HBox()
            hBox.intercept(1)
            {
                xpanel("")
                xradiobutton("XY projection", "viewDirectionChangedHandler(0)", ecssShowHelper.viewDirIdx == 0)
                xradiobutton("ZY projection", "viewDirectionChangedHandler(1)", ecssShowHelper.viewDirIdx == 1)
                xradiobutton("XZ projection", "viewDirectionChangedHandler(2)", ecssShowHelper.viewDirIdx == 2)
                xpanel()
                xpanel("")
                xradiobutton("Show all srcs for all species", "showAllSrcsChangedHandler(1)", isShowAllSrcs)
                xradiobutton("Hide all srcs for all species", "showAllSrcsChangedHandler(0)", !isShowAllSrcs)
                xpanel()
            }
            hBox.intercept(0)
            hBox.map()
            
            plotShape = new PlotShape(listOfSecRef)
            ecssShowHelper.setShape(plotShape)
            plotShape.variable(_varNameWithIndex)
            plotShape.scale(_rangeVar_min, _rangeVar_max)
            plotShape.exec_menu("Show Diam")
            plotShape.exec_menu("Shape Plot")
            // !!!!! maybe remove the unnecessary menu items
            
            xpanel("")
            xcheckbox("Animate / Pause", &isAnimated, "animateCheckBoxHandler()")
            xlabel("")
            // !!!!! maybe rename to "Seconds per step" (see "Movie Run") or "Scrn update invl" (see "RunControl")
            xpvalue("Interval", &interval, 1, "intervalChangedHandler()")
            xlabel("")
            // !!!!! cannot hide the unwanted checkboxes without hiding the wanted up/down mini-buttons
            xpvalue("t", &frameTime, 1, "timeChangedHandler()")
            xpvalue("Frame", &frameIdx_1Based, 1, "frameChangedHandler(frameIdx_1Based)")
            xslider(&frameIdxForSlider_1Based, 1, _numFrames, "frameChangedHandler(frameIdxForSlider_1Based)", 0, 1)
            // !!!!! xslider(&var, [low, high], ["send_cmd"], [vert], [slow])
            // xslider(&frameIdxForSlider_1Based, 1, _numFrames, "frameChangedHandler(frameIdxForSlider_1Based)")
            xpanel()
            xpanel("")
            xlabel("Warnings:")
            xlabel("1. The nanogeometry is neither recorded nor shown on the PlotShape above.")
            xlabel("2. \"3D Rotate\" leads to incorrect presentation of the extracellular sources")
            xlabel("     (toggling \"XY/ZY/XZ projection\" is recommended).")
            xpanel()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("NEURON player", 700, 260, -1, -1)      // !!!!! review the name (not to confuse with NEURON native panel names)
        
        // !!!!! don't update the PlotShape twice below (see WhereToWatchWidget)
        
        viewDirectionChangedHandler(ecssShowHelper.viewDirIdx)
        
        intervalChangedHandler()
        
        isAnimated = 1
        animateCheckBoxHandler()
    }
    
    proc dismissHandler() { localobj nil
        
        // !!!!! don't forget to call it when user closes SimExtracellularDiffusion widget
        
        isAnimated = 0
        animateCheckBoxHandler()
        
        ecssShowHelper.dismissShape()
        
        unmapIfNotNil(mainBox)
        
        // !!!!! need to do this only when user exits the sim
        if (0) {
            _rangeVar = nil
            _timeGrid = nil
            list_ref = nil
        }
    }
    
    // All next staff is private
    
    
    proc viewDirectionChangedHandler() {
        ecssShowHelper.viewDirIdx = $1
        
        plotShapeUtils.setViewDir(plotShape, ecssShowHelper.viewDirIdx)
        plotShape.exec_menu("View = plot")
        
        updatePlotShape()
    }
    
    proc showAllSrcsChangedHandler() {
        isShowAllSrcs = $1
        
        updatePlotShape()
    }
    
    proc animateCheckBoxHandler() {
        if (isAnimated) {
            timer.start()
        } else {
            _isTimerEndRequest = 1
            timer.end()
            
            // !!!!! fragile
            nrnpython("import time\ntime.sleep(0.1)")
            _isTimerEndRequest = 0
            _isBusy = 0
        }
    }
    
    proc intervalChangedHandler() { local isAnimated_old
        isAnimated_old = isAnimated
        
        if (isAnimated) {
            isAnimated = 0
            animateCheckBoxHandler()
        }
        
        timer.seconds(interval)
        
        if (isAnimated_old) {
            isAnimated = 1
            animateCheckBoxHandler()
        }
    }
    
    _frameTime_last = -1    // ms
    
    proc timeChangedHandler() { local frameIdx_1Based_new
        isAnimated = 0
        animateCheckBoxHandler()
        
        frameIdx_1Based_new = 1 + pyObj.getIdxInSortedArray(_timeGrid, frameTime)
        
        // !!!!! a workaround for the problem that the "down" mini-arrow for "t (ms)" didn't work
        //       (still have a problem that clicking this button we never step several frames in contrast to the "up" mini-arrow)
        if (frameTime < _frameTime_last && frameIdx_1Based_new == frameIdx_1Based) {
            frameIdx_1Based_new = math.max(1, frameIdx_1Based_new - 1)
        }
        
        frameIdx_1Based = frameIdx_1Based_new
        setTimeAndFrameIdxForSlider()
        
        showOneFrame()
    }
    
    proc frameChangedHandler() { local _frameIdx_1Based
        _frameIdx_1Based = $1
        
        isAnimated = 0
        animateCheckBoxHandler()
        
        frameIdx_1Based = int(0.5 + _frameIdx_1Based)   // Rounding to the nearest integer
        setTimeAndFrameIdxForSlider()
        
        showOneFrame()
    }
    
    // !!!!! code dup with WhereToWatchWidget
    proc updatePlotShape() {
        if (0) {
            // !!!!! much faster, but the ECSs labels step down each time we call "proc updatePlotShape"
            plotShape.erase()
        } else {
            plotShape.erase_all()
            plotShape.observe(listOfSecRef)
        }
        if (isShowAllSrcs) {
            ecssShowHelper.showAllSrcs()
        }
    }
    
    // !!!!! not sure if this is needed (it looks like the timer prevents repeated calls itself)
    // !!!!! but if needed, then it would be better to use some mutex from Python
    _isBusy = -1
    
    _isTimerEndRequest = -1
    
    proc onTimerStep() {
        if (_isBusy) {
            // !!!!! it looks like we never hit this branch
            return
        }
        _isBusy = 1
        {
            showOneFrame()
            
            if (!_isTimerEndRequest) {
                if (frameIdx_1Based == _numFrames) {
                    frameIdx_1Based = 1
                } else {
                    frameIdx_1Based += 1
                }
                setTimeAndFrameIdxForSlider()
            } else {
                _isTimerEndRequest = 0
            }
        }
        _isBusy = 0
    }
    
    proc showOneFrame() { localobj oneFrame
        oneFrame = pyObj.getArrayElem(_rangeVar, frameIdx_1Based - 1)
        assignRangeVarFromRecord(list_ref, _varNameWithIndex, oneFrame)
        
        plotShape.flush()
        doNotify()
    }
    
    proc setTimeAndFrameIdxForSlider() {
        frameTime = pyObj.getArrayElem(_timeGrid, frameIdx_1Based - 1)
        _frameTime_last = frameTime
        frameIdxForSlider_1Based = frameIdx_1Based
    }
    
endtemplate NeuronPlayerWidget


// !!!!! make it private to SimExtracellularDiffusion
objref neuronPlayerWidget
neuronPlayerWidget = new NeuronPlayerWidget()
