
{ load_file("../../../Clamps/SEClampHelper.hoc") }

proc GluIteration() { codeContractViolation() }

begintemplate SimGlutamate
    
    public preShowCheck, show, advance, dismissHandler
    public biophysJsonFileNameOrEmpty, isCustomProcAdvance, isAltRunControl
    
    // Just a workaround to avoid the error in GraphUtils.parseVarsFromTheGraph
    public PX, PY, PZ, R_FRAP, TimeBegin, MaxGlu, PX2, Gluin, Tau1, Tau2
    
    external GluIteration
    external seClampHelper
    external altRunControlWidget
    external tstop
    external removeItemFromList, unmapIfNotNil
    external soma_ref
    external graphList, fast_flush_list
    
    strdef biophysJsonFileNameOrEmpty
    isCustomProcAdvance = -1
    isAltRunControl = -1
    
    // UI
    objref vBoxGluMain, vBoxGraphSEClamp, /* vBoxGraphGluout, */ vBoxPlotShapeVoltage, vBoxPlotShapeGluOut, vBoxPlotShapeitrans, graphSEClamp, graphGluout, plotShapeVoltage, plotShapeGluOut, plotShapeitrans
    
    
    proc init() {
        biophysJsonFileNameOrEmpty = "SimGlutamate.json"
        isCustomProcAdvance = 1
        isAltRunControl = 0
    }
    
    func preShowCheck() {
        return 0
    }
    
    // Opens Glutamate simulation window.
    proc show() {
        initParamsGlutamate()
        seClampHelper.deployClamp()
        showGlutamateUi()
    }
    
    // Updates gluo/glui values on the cell.
    proc advance() {
        fadvance()
        GluIteration(PX, PY, R_FRAP, TimeBegin, Tau1, MaxGlu, PX2, Gluin, Tau2, PZ)
        // graphGluout.exec_menu("View = plot")
        graphSEClamp.exec_menu("View = plot")
    }
    
    proc dismissHandler() {
        
        // removeItemFromList(graphList[1], graphGluout)
        removeItemFromList(graphList[1], graphSEClamp)
        removeItemFromList(fast_flush_list, plotShapeGluOut)
        removeItemFromList(fast_flush_list, plotShapeVoltage)
        removeItemFromList(fast_flush_list, plotShapeitrans)
        
        unmapIfNotNil(vBoxGluMain)
        unmapIfNotNil(vBoxGraphSEClamp)
        // unmapIfNotNil(vBoxGraphGluout)
        unmapIfNotNil(vBoxPlotShapeVoltage)
        unmapIfNotNil(vBoxPlotShapeGluOut)
        unmapIfNotNil(vBoxPlotShapeitrans)
        
        seClampHelper.removeClamp()
    }
    
    // All next staff is private
    
    
    // Sets initial UI and simulation parameters.
    proc initParamsGlutamate() {
        // Parameter of Glutamate release in two places
        PX = 0                // X- Coordinate of the place
        PY = -20              // Y - coordinate of the place
        PZ =0                 // Z - coordinate of the place
        PX2 = 0               // Distance in x-coordinate of another place of release. If you need to define a single place of release just PX2 = 0
        R_FRAP = 3.0          // Radius of release
        TimeBegin = 5         // Time of release
        Tau1 = 10             // Decay time of release
        Tau2 = 12             // Rise time of release
        MaxGlu = 0.01         // Maxium concentration of Glutamate in mM
        Gluin = 0.3           // intracellular concentration of Glutamate in mM
    }
    
    // Shows Glutamate simulation UI.
    proc showGlutamateUi() {
        vBoxGluMain = new VBox()
        vBoxGluMain.intercept(1)
        {
            xpanel("")
            xlabel("================== Uncaging glutamate ==================")
            xpvalue("X coordinate (um)", &PX, 1)
            xpvalue("Y coordinate (um)", &PY, 1)
            xpvalue("Z coordinate (um)", &PZ, 1)
            xpvalue("Uncaging radius (um)", &R_FRAP, 1)
            xpvalue("Uncaging onset (ms)", &TimeBegin, 1)
            xpvalue("Glutamate concentration Max (mM)", &MaxGlu, 1)
            xpvalue("Distance between two release (um)", &PX2, 1)
            //xpvalue("Intracellular Glutamate in (mM)", &Gluin, 1)
            xpvalue("Tau rise (ms)", &Tau1, 1)
            xpvalue("Tau decay (ms)", &Tau2, 1)
            xlabel("======================================================")
            xpanel(625,164)
            
            xpanel("")
            xlabel("================== Voltage clamp of soma==================")
            xpvalue("Somatic voltage clamp", &seClampHelper.seClamp.amp1, 1)
            xpvalue("Clamp duration", &seClampHelper.seClamp.dur1, 1)
            xlabel("----------------------------------------------------------------------------------------------------------")
            xpvalue("Simulation time (ms)", &tstop, 1)
            xbutton("Run simulation", "altRunControlWidget.initAndRunHandler()")
            xpanel(328,129)
        }
        vBoxGluMain.intercept(0)
        vBoxGluMain.map("Glu settings", 195, 102, 300, 380)
        
        // vBoxGraphGluout = new VBox()
        // vBoxGraphGluout.intercept(1)
        // {
        //     graphGluout = new Graph(0)
        //     graphList[1].append(graphGluout)
        //     graphGluout.size(0,150,-3.49246e-010,0.0101)
        //     graphGluout.view(0, -3.49246e-010, 150, 0.0101, 602, 705, 400, 200)
        //     graphGluout.addvar("soma_ref.o(0).sec.gluo( 0.05 )", 1, 1, 0.8, 0.9, 2)
        //     graphGluout.yaxis(0)
        //     graphGluout.label(0.5, 0.09, "Time (ms)", 2, 1, 0, 1, 1)
        //     graphGluout.label(0.1, 0.9, "[Glu]0 (mM)", 2, 1, 0, 1, 1)
        // }
        // vBoxGraphGluout.intercept(0)
        // vBoxGraphGluout.map("[Glu]0 vs Time", 602, 705, 400, 200)
        
        vBoxGraphSEClamp = new VBox()
        vBoxGraphSEClamp.intercept(1)
        {
            graphSEClamp = new Graph(0)
            graphList[1].append(graphSEClamp)
            graphSEClamp.size(0,150,0.015,0.025)
            graphSEClamp.view(0, 0.015, 150, 0.01, 1145, 705, 400, 200)
            graphSEClamp.addexpr("seClampHelper.seClamp.i", 1, 1, 0.8, 0.9, 2)
            graphSEClamp.yaxis(0)
            graphSEClamp.label(0.5, 0.9, "Time (ms)", 2, 1, 0, 1, 1)
            graphSEClamp.label(0.1, 0.09, "Clamp current (nA)", 2, 1, 0, 1, 1)
        }
        vBoxGraphSEClamp.intercept(0)
        vBoxGraphSEClamp.map("Clamp current vs Time", 1145, 705, 400, 200)
        
        vBoxPlotShapeGluOut = new VBox()
        vBoxPlotShapeGluOut.intercept(1)
        {
            plotShapeGluOut = new PlotShape(0)
            fast_flush_list.append(plotShapeGluOut)
            plotShapeGluOut.size(-50,50,-50,50)
            plotShapeGluOut.view(-50, -49.9003, 100, 100, 601, 102, 400.64, 400.32)
            plotShapeGluOut.exec_menu("Shape Plot")
            plotShapeGluOut.exec_menu("View = plot")
            plotShapeGluOut.variable("gluo")
            plotShapeGluOut.label(0.5, 0.09, "[Glutamate]0 (mM)", 2, 1, 0, 1, 1)
            plotShapeGluOut.show(0)
            plotShapeGluOut.scale(0,0.005)
        }
        vBoxPlotShapeGluOut.intercept(0)
        vBoxPlotShapeGluOut.map("[Glutamate]0", 601, 102, 400.64, 400.32)
        
        vBoxPlotShapeVoltage = new VBox()
        vBoxPlotShapeVoltage.intercept(1)
        {
            plotShapeVoltage = new PlotShape(0)
            fast_flush_list.append(plotShapeVoltage)
            plotShapeVoltage.size(-50,50,-50,50)
            plotShapeVoltage.view(-50, -49.9003, 100, 100, 1145, 102, 400.64, 400.32)
            plotShapeVoltage.exec_menu("Shape Plot")
            plotShapeVoltage.exec_menu("View = plot")
            plotShapeVoltage.variable("v")
            plotShapeVoltage.label(0.1, 0.99, "Transmembrane Voltage (mV)", 2, 1, 0, 1, 1)
            plotShapeVoltage.show(0)
            plotShapeVoltage.scale(-85,-83)
        }
        vBoxPlotShapeVoltage.intercept(0)
        vBoxPlotShapeVoltage.map("Transmembrane Voltage", 1145, 102, 400.64, 400.32)
        
        vBoxPlotShapeitrans = new VBox()
        vBoxPlotShapeitrans.intercept(1)
        {
            plotShapeitrans = new PlotShape(0)
            fast_flush_list.append(plotShapeitrans)
            plotShapeitrans.size(-50,50,-50,50)
            plotShapeitrans.view(-50, -49.9003, 100, 100, 1245, 202, 400.64, 400.32)
            plotShapeitrans.exec_menu("Shape Plot")
            plotShapeitrans.exec_menu("View = plot")
            plotShapeitrans.variable("itrans_GluTrans")
            plotShapeitrans.label(0.15, 0.99, "I (mA/cm2)", 2, 1, 0, 1, 1)
            plotShapeitrans.show(0)
            plotShapeitrans.scale(-0.07,0.07)
        }
        vBoxPlotShapeitrans.intercept(0)
        vBoxPlotShapeitrans.map("I", 1245, 202, 400.64, 400.32)
    }
    
endtemplate SimGlutamate


// Updates gluo/glui values on the cell.
// $1 - X coordinate circle center
// $2 - Y coordinate circle center
// $3 - Radius of a circle
// $4 - TimeBegin
// $5 - Time of rise
// $6 - Maximum Glu
// $7 - PX2
// $8 - Gluin
// $9 - Time decay
// $10 - Z coordinate circle center
// !! BUG: in some cases, this proc fails with error "glu_ion mechanism not inserted in section *",
//         e.g. for EndFoot in astrocyte or for the sections left unspecified during the basic import (neither marked as soma, dendrite nor axon)
proc GluIteration() { local tau1, tau2
    tau1 = $5
    tau2 = $9
    InitialGlutamateConcentration = 20e-6
    forall {
        if (( (geomMath.dist2D_PtToPt_squared($1, $2, x3d(1), y3d(1))  < $3^2) || (geomMath.dist2D_PtToPt_squared($1+$7, $2, x3d(1), y3d(1))  < $3^2))  && (abs($10-z3d(1)) < 10) && (t > $4)) {
            gluo = InitialGlutamateConcentration + $6*(tau2/(tau2-tau1)*(-exp(-(t-$4)/tau1) + exp(-(t-$4)/tau2)))
        } else  {
            gluo = InitialGlutamateConcentration
        }
        glui = $8
    }
}
