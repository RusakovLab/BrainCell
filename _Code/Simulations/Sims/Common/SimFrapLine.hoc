
{ load_file("Utils/FrapUtils.hoc") }

obfunc setInitialLineConcentration() { codeContractViolation() }

begintemplate SimFrapLine
    
    public preShowCheck, show, preRun, preContinue, advance, postRun, dismissHandler
    public biophysJsonFileNameOrEmpty, isCustomProcAdvance, isAltRunControl
    
    external setInitialLineConcentration, closeFileAndShowCompleteMsg
    external createVector, listOfSecRefToSecList, removeItemFromList, addVarToGraph, createEmptyPanel, unmapIfNotNil, codeContractViolation
    external geomMath, plotShapeUtils, graphUtils, mwh
    external eachSecInList
    external dendrite_ref
    external altRunControlWidget
    external tstop
    external flush_list, fast_flush_list, graphList
    external enumColours
    
    strdef biophysJsonFileNameOrEmpty
    isCustomProcAdvance = -1
    isAltRunControl = -1
    
    strdef outTxtFileRelPathName
    
    // UI
    objref mainBox, selectedSectionsBox, timeGraphBox, watchedPathBox
    objref deck, rangeVarGraph, plotShapeFrapioniLine
    objref plotShapeSelectedSections, timeGraph
    
    // Concentration file
    objref fileFrapLineConcentration
    
    // Sections affected by FRAP
    objref frapLineSecList
    
    isBleachingOrRecovery = -1
    
    objref xVec, yVec
    viewDirIdx = -1
    apIdx_last = -1
    enumLockLevel = -1
    
    
    proc init() {
        biophysJsonFileNameOrEmpty = "SimFrap.json"
        isCustomProcAdvance = 1
        isAltRunControl = 1
        
        outTxtFileRelPathName = "Text results/TimeFRAP.txt"
        
        viewDirIdx = 0      // XY plane
        enumLockLevel = 0
        
        fileFrapLineConcentration = new File()
    }
    
    func preShowCheck() {
        return 0
    }
    
    // Opens FRAP Line simulation window.
    proc show() {
        initParamsFrapLine()
        showFrapLineUi()
    }
    
    func preRun() { local isCancel
        strdef varStr
        
        isCancel = preContinue()
        if (isCancel) {
            return 1
        }
        
        selectedSectionsBox = new VBox()
        selectedSectionsBox.intercept(1)
        {
            removeItemFromList(fast_flush_list, plotShapeSelectedSections)
            plotShapeSelectedSections = new PlotShape(listOfSecRefToSecList(frapLineSecList))
            fast_flush_list.append(plotShapeSelectedSections)
        }
        selectedSectionsBox.intercept(0)
        selectedSectionsBox.map("Selected sections")
        
        timeGraphBox = new VBox()
        timeGraphBox.intercept(1)
        {
            removeItemFromList(graphList[0], timeGraph)
            timeGraph = new Graph()
            graphList[0].append(timeGraph)
            frapLineSecList.o(0).sec {
                sprint(varStr, "%s.frapioni(0.5)", secname())
            }
            addVarToGraph(timeGraph, varStr)
            graphUtils.setGraphSize(timeGraph, 0, tstop, getYmin(), getYmax())
            timeGraph.label(0.44, 0.015, "t (ms)")
            timeGraph.label(0.7, 0.945, "Concentration (mM)")
        }
        timeGraphBox.intercept(0)
        timeGraphBox.map("Concentration vs Time")
        
        fileFrapLineConcentration.printf("Time\tConcentration\n")
        
        return 0
    }
    
    func preContinue() {
        
        frapLineSecList = setInitialLineConcentration(xVec, yVec, LineWidth, BasicFRAP, AlphaFRAP, DFreeFRAP, viewDirIdx)
        
        // Bleaching just started
        print "Bleaching just started"
        isBleachingOrRecovery = 1
        
        if (frapLineSecList.count() == 0) {
            mwh.showWarningBox("Cannot start the simulation because the FRAP line doesn't touch any sections.")
            return 1
        }
        
        // !! we could move the code above from preContinue to preRun, but keep it here just so user can edit the FRAP line before continuing the simulation
        
        enumLockLevel = 1
        deck.flip_to(0)
        
        fileFrapLineConcentration.aopen(outTxtFileRelPathName)
        
        return 0
    }
    
    // Switches between bleaching/recovery and writes concentration to file.
    proc advance() { local cylinderVolume, FraRec, FraBasic, isBleachingOrRecovery_new, isBleachingJustStarted, isRecoveryJustStarted
        
        fadvance()
        
        FraRec = 0
        FraBasic = 0
        
        isBleachingOrRecovery_new = (t % (iterationTime*2) < iterationTime)
        
        if (isBleachingOrRecovery_new != isBleachingOrRecovery) {
            isBleachingJustStarted = (isBleachingOrRecovery_new > isBleachingOrRecovery)
            isRecoveryJustStarted = !isBleachingJustStarted
            isBleachingOrRecovery = isBleachingOrRecovery_new
        } else {
            isBleachingJustStarted = 0
            isRecoveryJustStarted = 0
        }
        
        for eachSecInList(frapLineSecList) {
            cylinderVolume = L*PI*diam^2/4
            FraRec += frapioni(0.5)*cylinderVolume
            FraBasic += cylinderVolume
            
            // Change Alpha for all sections in line
            if (isBleachingJustStarted) {
                // Bleaching every other iterationTime
                Alpha_FRAP = AlphaFRAP*BasicFRAP
            } else if (isRecoveryJustStarted) {
                // Recovering every iterationTime
                Alpha_FRAP = 0
            }
        }
        
        if (isBleachingJustStarted) {
            print "Bleaching just started"
        } else if (isRecoveryJustStarted) {
            print "Recovery just started"
        }
        
        // "division by zero" would happen here if frapLineSecList was empty, but we have prevented this case in "func preContinue"
        fileFrapLineConcentration.printf("%-6.5g\t%-6.5g\n", t, FraRec/FraBasic)
        
        if (t < tstop) {
            if (isBleachingJustStarted) {
                fileFrapLineConcentration.printf("----- BLEACHING STARTED -----\n")
            } else if (isRecoveryJustStarted) {
                fileFrapLineConcentration.printf("----- RECOVERY STARTED -----\n")
            }
        }
        
        // rangeVarGraph.exec_menu("View = plot")
        timeGraph.exec_menu("View = plot")
    }
    
    proc postRun() {
        closeFileAndShowCompleteMsg(fileFrapLineConcentration)
        
        enumLockLevel = 0
        deck.flip_to(1)
    }
    
    proc dismissHandler() {
        
        removeItemFromList(flush_list, rangeVarGraph)
        removeItemFromList(fast_flush_list, plotShapeFrapioniLine)
        removeItemFromList(fast_flush_list, plotShapeSelectedSections)
        removeItemFromList(graphList[0], timeGraph)
        
        unmapIfNotNil(selectedSectionsBox)
        unmapIfNotNil(timeGraphBox)
        unmapIfNotNil(watchedPathBox)
        unmapIfNotNil(mainBox)
        
        /* !!
        closeFileAndShowCompleteMsg(fileFrapLineConcentration)
        */
    }
    
    // All next staff is private
    
    
    // Inits UI and simulation parameters.
    proc initParamsFrapLine() { local defaultAlphaX, defaultY_Coor
        LineWidth = 1.5     // um, bleaching line width
        defaultAlphaX = 2   // um, the angle of inclination of a straight line
        defaultY_Coor = -20 // y = Alpha*x+ defaultY_Coor
        BasicFRAP = 0.2
        DFreeFRAP = 0.3     // (um2/ms)
        AlphaFRAP = 0.0001  // mM/ms
        iterations = 4
        iterationTime = 1000  // ms, This time parameter is necessary to reproduce the experimental course (Figure 2)
        
        updateTstop()
        
        setDefaultAnchorPoints(defaultAlphaX, defaultY_Coor)
    }
    
    // Updates simulation time according to the number of iterations and their time.
    proc updateTstop() {
        tstop = iterations*iterationTime*2
    }
    
    proc setDefaultAnchorPoints() { local defaultAlphaX, defaultY_Coor, ptIdx
        defaultAlphaX = $1
        defaultY_Coor = $2
        xVec = createVector(-50, 50)    // !! hardcode (keep in sync with defaultAlphaX and defaultY_Coor)
        yVec = new Vector(2)
        for ptIdx = 0, 1 {
            yVec.x[ptIdx] = defaultAlphaX * xVec.x[ptIdx] + defaultY_Coor
        }
    }
    
    // Shows FRAP Line UI.
    proc showFrapLineUi() { local distMin, distMax localobj vBox, rangeVarPlot, hBox, watchedPathPlotShape, pathSecList
        strdef menuToolName
        
        mainBox = new HBox()
        mainBox.intercept(1)
        {
            vBox = new VBox()
            vBox.intercept(1)
            {
                xpanel("")
                xlabel("====================== Initial parameters ======================")
                xlabel("Width of linear bleaching area in um")
                xvalue("Line width (um) ","LineWidth", 1, "updateStripMarker()", 0, 1)
                xlabel("---------------------------------------------------------------------------------------------------------------------")
                xlabel("Initial indicator  concentration")
                xvalue("Indicator concentration (mM)","BasicFRAP", 1, "", 0, 1)
                xlabel("Photobleaching rate")
                xvalue("Rate (mM/ms)","AlphaFRAP", 1, "", 0, 1)
                xvalue("DFree (um2/ms)","DFreeFRAP", 1, "", 0, 1)
                xlabel("===========================================================")
                xpanel(0)
                
                xpanel("")
                xlabel("========================== Running ==========================")
                xvalue("Duration of bleaching (recovery) (ms)","iterationTime", 1, "updateTstop()", 0, 1)
                xvalue("Bleaching-recovery iterations","iterations", 1, "updateTstop()", 0, 1)
                xlabel("Run simulation. Results are saved to the TimeFRAP.txt")
                xbutton("Run FRAP", "altRunControlWidget.initAndRunHandler()")
                xlabel("===========================================================")
                xpanel()
                
                rangeVarPlot = new RangeVarPlot("frapioni")
                dendrite_ref.o(10).sec rangeVarPlot.begin(0)        // !! fragile: get rid of explicit indices
                dendrite_ref.o(1).sec rangeVarPlot.end(1)           //
                dendrite_ref.o(10).sec {                            //
                    distMin = -distance(0)                          //
                }                                                   //
                dendrite_ref.o(1).sec {                             //
                    distMax = distance(1)                           //
                }                                                   //
                
                rangeVarGraph = new Graph()
                flush_list.append(rangeVarGraph)
                graphUtils.setGraphSize(rangeVarGraph, distMin, distMax, getYmin(), getYmax())
                rangeVarGraph.xaxis()
                rangeVarGraph.label(0.0340357, 0.94, "Concentration (mM)", 2, 1, 0, 0, 1)
                rangeVarGraph.label(0.45, 0.01, "Distance (um)", 2, 1, 0, 0, 1)
                rangeVarGraph.addobject(rangeVarPlot, enumColours.red, 1)
            }
            vBox.intercept(0)
            vBox.map()
            
            vBox = new VBox()
            vBox.intercept(1)
            {
                hBox = new HBox()
                hBox.intercept(1)
                {
                    deck = new Deck()
                    deck.intercept(1)
                    {
                        createEmptyPanel()
                        xpanel("")
                        xlabel("")
                        xradiobutton("XY projection", "viewDirectionChangedHandler(0)", viewDirIdx == 0)
                        xradiobutton("ZY projection", "viewDirectionChangedHandler(1)", viewDirIdx == 1)
                        xradiobutton("XZ projection", "viewDirectionChangedHandler(2)", viewDirIdx == 2)
                        xpanel()
                    }
                    deck.intercept(0)
                    deck.flip_to(1)
                    deck.map()
                    xpanel("")
                    xlabel("Hints: Drag 3 anchor points to rotate or shift the FRAP line,")
                    xlabel("           hold \"Shift\" to adjust its width.")
                    xlabel("Warning: Don't use \"3D Rotate\" when editing the line")
                    xlabel("                (toggle \"XY/ZY/XZ projection\" instead).")
                    xpanel()
                }
                hBox.intercept(0)
                hBox.map("", -1, -1, 1, 32)
                
                plotShapeFrapioniLine = new PlotShape(0)
                fast_flush_list.append(plotShapeFrapioniLine)
                plotShapeFrapioniLine.size(-50,50,-50,50)
                plotShapeFrapioniLine.view(-50, -50, 100, 100, 165, 169, 400.64, 400.32)
                plotShapeFrapioniLine.exec_menu("Shape Plot")
                plotShapeFrapioniLine.exec_menu("View = plot")
                menuToolName = "Edit FRAP Line"
                plotShapeFrapioniLine.menu_tool(menuToolName, "mouseEventsHandler")
                plotShapeFrapioniLine.variable("frapioni")
                plotShapeFrapioniLine.show(0)
                plotShapeFrapioniLine.scale(getYmin(), getYmax())
                plotShapeFrapioniLine.label(0.0340357, 0.94, "Concentration (mM)", 2, 1, 0, 0, 1)
                
                viewDirectionChangedHandler(viewDirIdx, 1)
            }
            vBox.intercept(0)
            vBox.map()
        }
        mainBox.intercept(0)
        mainBox.map("FRAP in Line")
        
        plotShapeFrapioniLine.exec_menu(menuToolName)
        
        watchedPathBox = new VBox()
        watchedPathBox.intercept(1)
        {
            watchedPathPlotShape = new PlotShape()
            watchedPathPlotShape.color_all(enumColours.grey)
            pathSecList = new SectionList()
            rangeVarPlot.list(pathSecList)
            watchedPathPlotShape.color_list(pathSecList, enumColours.red)
        }
        watchedPathBox.intercept(0)
        watchedPathBox.map("Watched path")
    }
    
    // !! code dup. with "FRAP in circle"
    proc viewDirectionChangedHandler() { local numArg, isCalledFromShow
        numArg = numarg()
        if (numArg < 1 || numArg > 2) {
            codeContractViolation()
        }
        
        viewDirIdx = $1
        if (numArg == 2) {
            isCalledFromShow = $2
            if (isCalledFromShow != 1) {
                codeContractViolation()
            }
        } else {
            isCalledFromShow = 0
        }
        
        plotShapeUtils.setViewDir(plotShapeFrapioniLine, viewDirIdx)
        
        updateStripMarker()
        
        if (!isCalledFromShow) {
            plotShapeFrapioniLine.exec_menu("View = plot")
        }
    }
    
    proc mouseEventsHandler() { local eventType, x_screen, y_screen, keystate, isPress, isMoveOrResize, isDrag
        eventType = $1
        x_screen = $2
        y_screen = $3
        keystate = $4
        
        // !! code dup. with "FRAP in circle"
        
        // !! BUG: we don't lock it when user uses RunControl or AltRunControl
        if (enumLockLevel > 0) {
            isPress = (eventType == 2)
            if (!isPress || enumLockLevel == 2) {
                return
            }
            // Just to prevent "Didn't close the previous panel" error
            enumLockLevel = 2
            // !! BUG: we still can hit "Segmentation violation" when clicking fast, but it seems to be a different error
            mwh.showWarningBox("Cannot edit the FRAP line when the simulation is running.")
            enumLockLevel = 1
            return
        }
        
        isMoveOrResize = (keystate != 2)    // 2: Shift
        if (isMoveOrResize) {
            isDrag = (eventType == 1)
            moveOneOrBothAnchorPoints(x_screen, y_screen, isDrag)
        } else {
            changeStripWidth(x_screen, y_screen)
        }
        updateStripMarker()
    }
    
    proc moveOneOrBothAnchorPoints() { local x_screen, y_screen, isDrag, apIdx, delta_x, delta_y, ptIdx
        x_screen = $1
        y_screen = $2
        isDrag = $3
        
        if (!isDrag) {
            apIdx = findNearestAnchorPoint(x_screen, y_screen)
            apIdx_last = apIdx
        } else {
            apIdx = apIdx_last
        }
        
        if (apIdx == 0 || apIdx == 1) {
            xVec.x[apIdx] = x_screen
            yVec.x[apIdx] = y_screen
        } else if (apIdx == 2) {
            delta_x = x_screen - xVec.mean()
            delta_y = y_screen - yVec.mean()
            for ptIdx = 0, 1 {
                xVec.x[ptIdx] += delta_x
                yVec.x[ptIdx] += delta_y
            }
        } else {
            codeContractViolation()
        }
    }
    
    func findNearestAnchorPoint() { local x_screen, y_screen, distSq1, distSq2, distSq3 localobj distSqVec
        x_screen = $1
        y_screen = $2
        
        distSq1 = geomMath.dist2D_PtToPt_squared(x_screen, y_screen, xVec.x[0], yVec.x[0])
        distSq2 = geomMath.dist2D_PtToPt_squared(x_screen, y_screen, xVec.x[1], yVec.x[1])
        distSq3 = geomMath.dist2D_PtToPt_squared(x_screen, y_screen, xVec.mean(), yVec.mean())
        
        distSqVec = createVector(distSq1, distSq2, distSq3)
        
        return distSqVec.min_ind()
    }
    
    // Following the visual style of: NEURON Main Menu -> Vector -> Draw: "%NEURONHOME%\lib\hoc\mkcurve.hoc"
    proc updateStripMarker() { local pdx, pdy, ptIdx, x, y, factor, ndx, ndy
        
        plotShapeFrapioniLine.erase()
        
        // The central line and the anchors
        pdx = xVec.x[1] - xVec.x[0]
        pdy = yVec.x[1] - yVec.x[0]
        createLineMarker(pdx, pdy, 0, 0, 9)
        for ptIdx = 0, 1 {
            plotShapeFrapioniLine.mark(xVec.x[ptIdx], yVec.x[ptIdx], "s", 8)
        }
        plotShapeFrapioniLine.mark(xVec.mean(), yVec.mean(), "S", 4, enumColours.red, 1)
        
        // The edge lines
        factor = LineWidth / geomMath.len2D(pdx, pdy) / 2   // !! error here if len == 0
        ndx = -pdy * factor
        ndy = pdx * factor
        createLineMarker(pdx, pdy, ndx, ndy, 1)
        createLineMarker(pdx, pdy, -ndx, -ndy, 1)
    }
    
    proc createLineMarker() { local pdx, pdy, ndx, ndy, colourIdx, factor, ptIdx, sign
        pdx = $1
        pdy = $2
        ndx = $3
        ndy = $4
        colourIdx = $5
        
        factor = 1000   // !! hardcode; it would be better to stick to the view boundaries, but there is no guarantee that user doesn't use pan (MMB press + move)
        pdx *= factor
        pdy *= factor
        
        plotShapeFrapioniLine.beginline(colourIdx, 0)
        sign = -1
        for ptIdx = 0, 1 {
            plotShapeFrapioniLine.line(xVec.x[ptIdx] + sign * pdx + ndx, yVec.x[ptIdx] + sign * pdy + ndy)
            sign = 1
        }
    }
    
    proc changeStripWidth() { local x_screen, y_screen
        x_screen = $1
        y_screen = $2
        LineWidth = 2 * geomMath.dist2D_PtToLine(x_screen, y_screen, xVec, yVec)
    }
    
    func getYmin() {
        return 0.85*BasicFRAP
    }
    
    func getYmax() {
        return 1*BasicFRAP
    }
    
endtemplate SimFrapLine


// Finds sections within a line and sets initial FRAP concentration on them.
// $1 - xVec - two X coords on the screen
// $2 - yVec - two Y coords on the screen
// $3 - Line width
// $4 - Basic concentration. The parameter can modulate the initial concentration of interest.
// $5 - Alpha - affects speed of the bleaching
// $6 - DFree
// $7 - viewDirIdx - the view direction (0 to 2)
// Returns: Sections affected by FRAP
obfunc setInitialLineConcentration() { local LineWidth, BasicConc, Alpha, DFree, viewDirIdx, u1, u2, ptToLineDist localobj xVec, yVec, frapLineSecList
    
    xVec = $o1
    yVec = $o2
    LineWidth = $3
    BasicConc = $4
    Alpha = $5
    DFree = $6
    viewDirIdx = $7
    
    frapLineSecList = new List()
    
    forall {
        frapion0_FRAP = BasicConc   // mM, The concentration of molecules used for the FRAP
        DFree_FRAP = DFree
        
        viewDirIdxToTwoCoordsForFrapSim(viewDirIdx, &u1, &u2)
        
        // !! for slightly better performance, we can implement a custom func that returns the square of the distance
        ptToLineDist = geomMath.dist2D_PtToLine(u1, u2, xVec, yVec)
        
        if (ptToLineDist < LineWidth / 2) {
            frapLineSecList.append(new SectionRef())
            Alpha_FRAP = Alpha * BasicConc
        }
    }
    
    return frapLineSecList
}
