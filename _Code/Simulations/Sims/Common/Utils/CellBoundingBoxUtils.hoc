
// !!!!! look for ".nearest(x, y)" everywhere in the project and use cbbUtils.minDistSqThresh

proc _getCellBoundingBox() { codeContractViolation() }

begintemplate CellBoundingBoxUtils

    public analyzeCellBoundingBox, getNearestAnchorPointIdxOrMinus1
    
    external  _getCellBoundingBox, codeContractViolation
    external math
    
    minDistSqThresh = -1
    
    
    func analyzeCellBoundingBox() { local numArg, xMin, yMin, zMin, xMax, yMax, zMax, Dx, Dy, Dz, D
        
        numArg = numarg()
        if (numArg != 6 && numArg != 9) {
            codeContractViolation()
        }
        
        _getCellBoundingBox(&xMin, &yMin, &zMin, &xMax, &yMax, &zMax)
        
        D = analyzeCellDimensionsAndCacheMinDistSqThresh(xMin, yMin, zMin, xMax, yMax, zMax, &Dx, &Dy, &Dz)
        
        $&1 = xMin
        $&2 = yMin
        $&3 = zMin
        $&4 = xMax
        $&5 = yMax
        $&6 = zMax
        
        if (numArg == 9) {
            $&7 = Dx
            $&8 = Dy
            $&9 = Dz
        }
        
        return D
    }
    
    // in: distSqVec OR distSq1, distSq2, distSq3, ...
    func getNearestAnchorPointIdxOrMinus1() { local numArg, minDistSq, selApIdx, numPts, i, distSq localobj distSqVec
        
        numArg = numarg()
        if (numArg == 0) {
            codeContractViolation()
        }
        
        minDistSq = math.inf
        selApIdx = -1
        
        if (numArg == 1) {
            distSqVec = $o1
            numPts = distSqVec.size()
            if (numPts < 2) {
                codeContractViolation()
            }
            for i = 0, numPts - 1 {
                distSq = distSqVec.x[i]
                if (distSq < minDistSq) {
                    minDistSq = distSq
                    selApIdx = i
                }
            }
        } else {
            for i = 1, numArg {
                distSq = $i
                if (distSq < minDistSq) {
                    minDistSq = distSq
                    selApIdx = i - 1
                }
            }
        }
        
        if (minDistSq > minDistSqThresh) {
            selApIdx = -1
        }
        
        return selApIdx
    }
    
    // All next staff is private
    
    
    func analyzeCellDimensionsAndCacheMinDistSqThresh() { local xMin, yMin, zMin, xMax, yMax, zMax, D, nndDims, Dx, Dy, Dz
        
        xMin = $1
        yMin = $2
        zMin = $3
        xMax = $4
        yMax = $5
        zMax = $6
        
        D = 1       // Size of a side for the equivalent cube / square having the same volume / area as the cell bounding box
        nndDims = 0     // The number of non-degenerate cell dimensions
        Dx = analyzeOneDimension(xMin, xMax, &D, &nndDims)
        Dy = analyzeOneDimension(yMin, yMax, &D, &nndDims)
        Dz = analyzeOneDimension(zMin, zMax, &D, &nndDims)
        if (nndDims > 0) {
            D = D ^ (1 / nndDims)
        } else {
            // Preventing "division by zero"
            D = 1
        }
        
        $&7 = Dx
        $&8 = Dy
        $&9 = Dz
        
        // !!!!! when user interacts with the anchor points, we use this heuristic
        //       just to make LMB press precision independent on the cell size
        minDistSqThresh = (0.25 * D) ^ 2
        
        return D
    }
    
    func analyzeOneDimension() { local uMin, uMax, du
        uMin = $1
        uMax = $2
        du = uMax - uMin
        if (du != 0) {
            $&3 *= du
            $&4 += 1
        }
        return du
    }
    
endtemplate CellBoundingBoxUtils


objref cbbUtils
cbbUtils = new CellBoundingBoxUtils()


// !!!!! maybe use segment centres instead of 3D points (see interpEachSegmCentreCoordsFromSec3DPointCoords)
// !!!!! maybe skip nanogeometry for better performance
proc _getCellBoundingBox() { local inf, xMin, yMin, zMin, xMax, yMax, zMax, numPts, ptIdx
    inf = math.inf
    xMin = inf
    yMin = inf
    zMin = inf
    xMax = -inf
    yMax = -inf
    zMax = -inf
    forall {
        numPts = n3d()
        for ptIdx = 0, numPts - 1 {
            math.updateMinMax(&xMin, &xMax, x3d(ptIdx))
            math.updateMinMax(&yMin, &yMax, y3d(ptIdx))
            math.updateMinMax(&zMin, &zMax, z3d(ptIdx))
        }
    }
    $&1 = xMin
    $&2 = yMin
    $&3 = zMin
    $&4 = xMax
    $&5 = yMax
    $&6 = zMax
}
