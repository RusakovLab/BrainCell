
// !! Ideas:
//    * update PrerequisitesCheck.hoc to make sure plotly, matplotlib, pandas, numpy and scipy are installed
//    * maybe make it possible to choose more than one watched var (a comma-separated list in the string_dialog)
//    * maybe make it possible to specify not only watched var, but also watched expression involving any math functions and one or more range vars
//    * maybe make selection of watchedRangeVarNameWithIndex more convenient: not string_dialog, but a widget with List-s like in Export module

// https://nrn.readthedocs.io/en/latest/example_of_generating_movie.html
// https://nrn.readthedocs.io/en/latest/python/visualization/plotshapeclass.html
// https://neuron.yale.edu/phpBB/viewtopic.php?p=19832

{ load_file("SimGABADiffusionBasketCellUtils/RangeVarAnimationSectionUtils.hoc") }
{ load_file("SimGABADiffusionBasketCellUtils/RangeVarAnimationRecord.hoc") }
{ load_file("SimGABADiffusionBasketCellUtils/RangeVarAnimationRecorder.hoc") }


begintemplate SimGABADiffusionBasketCell
    
    public preShowCheck, show, preRun, preContinue, advance, postRun, dismissHandler
    public biophysJsonFileNameOrEmpty, isCustomProcAdvance, isAltRunControl
    
    external createExtracellularGeneratorHintsPanel, createRecordingPeriodHint, showExtracellularManagerBaseWidget, applyExtracellularSourcesWithWaitBox
    external sourcePythonCode, stringEmpty, unmapIfNotNil, dismissIfNotNil
    external mwh, fbh, math, geomMath, ecsLibrary, speciesLibrary, compUtils, beih, rngUtils, mainUiLocker
    external manageAndRunWidget, altRunControlWidget
    external cvode, setdt
    external runStopAt, runStopIn, tstop, steps_per_ms
    external pyObj
    external pyEnumOutFileTypes, pyEnumInFileTypes
    
    strdef biophysJsonFileNameOrEmpty
    isCustomProcAdvance = -1
    isAltRunControl = -1
    
    objref rng
    objref axonCompOrNil
    objref mainBox, deck
    
    isSmthRecordedOrLoaded = -1
    
    isCreateOrLoad = -1
    frontEndIdx = -1
    isUseOpacitiesOrColours = -1
    numSrcs = -1
    radiusGen = -1
    DtOrMinus1 = -1
    
    isSaveToBinFile = -1
    isSaveToTxtFile = -1
    strdef binFilePathNameOrEmpty
    strdef txtFilePathNameOrEmpty
    
    objref record, recorder, player
    
    
    proc init() { local inf
        strdef unitsStr
        
        sourcePythonCode("\\Sims\\\\Neuron\\SimGABADiffusionBasketCellUtils\\PythonCode", "from RangeVarAnimationPlayer import RangeVarAnimationPlayer", "SimGABADiffusionBasketCell ctor")
        
        biophysJsonFileNameOrEmpty = ""     // !!
        isCustomProcAdvance = 1
        isAltRunControl = 1
        
        rng = rngUtils.getFor_sim_gabaDiffusion()
        
        isSmthRecordedOrLoaded = 0
        
        isCreateOrLoad = 1
        frontEndIdx = 1
        isUseOpacitiesOrColours = 1
        numSrcs = 100
        radiusGen = 50      // um
        // DtOrMinus1 will be set in proc show because we adjust "dt" after calling this ctor
        isSaveToBinFile = 1
        isSaveToTxtFile = 0
        
        inf = math.inf
        variable_domain(&numSrcs, 1, inf)
        
        variable_domain(&radiusGen, float_epsilon, inf)
        units(&radiusGen, units("L"))
        
        unitsStr = units(&dt)
        if (!stringEmpty(unitsStr)) {
            sprint(unitsStr, "in model time, %s", unitsStr)
        }
        units(&DtOrMinus1, unitsStr)    // Do not replace with "units(&DtOrMinus1, units(&dt))"
        
        record = new RangeVarAnimationRecord()
        recorder = new RangeVarAnimationRecorder(record)
        player = pyObj.RangeVarAnimationPlayer(record)
    }
    
    func preShowCheck() { local isCancel localobj missingCompNames, nil
        strdef axonCompName
        
        axonCompName = "Axon"
        compUtils.findDistMechCompByName(axonCompName, 0, axonCompOrNil)
        if (axonCompOrNil == nil) {
            missingCompNames = new List()
            missingCompNames.append(new String(axonCompName))
            beih.showMissingCompNamesWarning(missingCompNames, 1)
            return 1
        }
        
        if (mainUiLocker != nil) {  // !! nil in tests
            isCancel = mainUiLocker.makeSureNanoReseedingLocked()
            if (isCancel) {
                return 1
            }
        }
        
        return 0
    }
    
    proc show() { local isFirstShow localobj hBox, vBox
        
        isFirstShow = $1
        
        steps_per_ms = 0.01
        runStopAt = 5000    // ms
        runStopIn = 1000    // ms
        tstop = 10000       // ms
        dt = 100            // ms
        setdt()
        
        // Default recording period
        if (!cvode.active()) {
            DtOrMinus1 = 4 * dt
        } else {
            DtOrMinus1 = -1
        }
        
        if (isFirstShow) {
            // Create a default extracellular source of GABA
            ecsLibrary.deleteAll()
            ecsLibrary.addNewSource(1, "GABA", new ECSSpatialInfo(0, 0, 0, 0), new ECSTemporalInfo(2, 500, 1), new ECSCapacityInfo(0, 2, 1e4), new ECSSeriesInfo(500, 10, 500, 1))
        }
        
        // Showing it here rather than in createOrLoadHandler just to have SimGABADiffusionBasketCell in the focus
        // and ExtracellularManagerMainWidget in the background
        showExtracellularManagerBaseWidget()
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            hBox = new HBox()
            hBox.intercept(1)
            {
                xpanel("")
                xlabel("")
                xradiobutton("Create new animation", "createOrLoadHandler(1, 0)", isCreateOrLoad)
                xradiobutton("Play saved animation", "createOrLoadHandler(0, 0)", !isCreateOrLoad)
                xlabel("")
                xpanel()
                xpanel("")
                xlabel("Animation front end:")
                xradiobutton("Plotly (browser)", "frontEndIdx = 0", frontEndIdx == 0)
                xradiobutton("Pyplot (desktop)", "frontEndIdx = 1", frontEndIdx == 1)
                xradiobutton("Pyplot (browser)", "frontEndIdx = 2", frontEndIdx == 2)
                xpanel()
                xpanel("")
                xlabel("What to animate:")
                xradiobutton("Opacities", "isUseOpacitiesOrColours = 1", isUseOpacitiesOrColours == 1)
                xradiobutton("Colours", "isUseOpacitiesOrColours = 0", isUseOpacitiesOrColours == 0)
                xpanel()
                xpanel("")
                // !! just for test
                xbutton("!! Show some random test data", "playerTestHandler()")
                xbutton("Show the last record once again", "showLastHandler()")
                xpanel()
            }
            hBox.intercept(0)
            hBox.map()
            deck = new Deck()
            deck.intercept(1)
            {
                vBox = new VBox()
                vBox.intercept(1)
                {
                    xpanel("")
                    xlabel("1. Create a single source in any location using \"Manager of extracellular sources\".")
                    xlabel("2. Click \"Generate sources\" (below) to create \"Number of sources\" copies along axon sections")
                    xlabel("    within \"Radius of generation\" from the sections. The initial source will be deleted.")
                    xlabel("3. Adjust \"Recording period\", click \"Start simulation\" and specify the output file path and name.")
                    xpanel()
                    xpanel("")
                    xpvalue("Number of sources", &numSrcs, 1)
                    xpvalue("Radius of generation", &radiusGen, 1)
                    xlabel("")
                    xbutton("Generate sources", "generateHandler()")
                    xpanel()
                    createExtracellularGeneratorHintsPanel()
                    xpanel("")
                    xpvalue("Recording period, Dt", &DtOrMinus1, 1, "DtChangedHandler()")
                    createRecordingPeriodHint()
                    xbutton("Start simulation", "altRunControlWidget.initAndRunHandler()")
                    xcheckbox("Save animation to BIN file", &isSaveToBinFile)
                    xcheckbox("Save animation to TXT file", &isSaveToTxtFile)
                    xlabel("")
                    xpanel()
                }
                vBox.intercept(0)
                vBox.map()
                xpanel("")
                xlabel("")
                xbutton("Load BIN file", "loadBinFileHandler()")
                xpanel()
            }
            deck.intercept(0)
            // deck.flip_to(*)      // Will be done below in createOrLoadHandler
            deck.map("", -1, -1, 440, 389)
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("Basket cell GABA diffusion", 500, 545, -1, -1)
        
        createOrLoadHandler(isCreateOrLoad, 1)
    }
    
    func preRun() { local spcInsideCatIdx, isCancel, isEnabled localobj firstECS
        strdef msg, watchedRangeVarNameWithIndex
        
        msg = "Cannot proceed without any extracellular sources."
        
        // !! would it make sense to check if "Generate sources" button was clicked?
        
        if (ecsLibrary.isEmpty()) {
            mwh.showWarningBox(msg)
            return 1
        }
        
        if (!cvode.active() && DtOrMinus1 != -1 && DtOrMinus1 < dt) {
            // Just to prevent codeContractViolation in RangeVarAnimationRecord.onJustAfterRun
            mwh.showNotImplementedWarning("Cannot use \"Dt < dt\" with the fixed time step integration method.")
            return 1
        }
        
        firstECS = ecsLibrary.ecsList.o(0)
        spcInsideCatIdx = speciesLibrary.getSpeciesInsideCatIdx(firstECS.species)
        watchedRangeVarNameWithIndex = speciesLibrary.spcCatsList.o(firstECS.spcCatIdx).spcNamesList.o(spcInsideCatIdx).rangeVarName
        
        isCancel = !string_dialog("Please choose a range variable to record and animate:", watchedRangeVarNameWithIndex)
        if (isCancel) {
            return 1
        }
        
        // !! validate watchedRangeVarNameWithIndex here like we do for custom exposed/swept vars
        
        dismissIfNotNil(manageAndRunWidget)
        
        if (isSaveToBinFile) {
            isCancel = fbh.showSaveFileDialog(pyEnumOutFileTypes.binaryResultsBin, binFilePathNameOrEmpty)
            if (isCancel) {
                return 1
            }
        } else {
            binFilePathNameOrEmpty = ""
        }
        
        if (isSaveToTxtFile) {
            isCancel = fbh.showSaveFileDialog(pyEnumOutFileTypes.textResultsTxt, txtFilePathNameOrEmpty)
            if (isCancel) {
                return 1
            }
        } else {
            txtFilePathNameOrEmpty = ""
        }
        
        isEnabled = applyExtracellularSourcesWithWaitBox()
        if (!isEnabled) {
            mwh.showWarningBox(msg)
            return 1
        }
        
        recorder.onJustBeforeRun(watchedRangeVarNameWithIndex, DtOrMinus1)
        
        return 0
    }
    
    func preContinue() {
        return 0
    }
    
    proc advance() {
        fadvance()
        recorder.onStep()
    }
    
    proc postRun() {
        record.onJustAfterRun(binFilePathNameOrEmpty, txtFilePathNameOrEmpty)
        isSmthRecordedOrLoaded = 1
        
        player.play(frontEndIdx, isUseOpacitiesOrColours, 0)
    }
    
    proc dismissHandler() {
        // !! close pyplot desktop window (not only now, but also when showing a new animation)
        // !! delete the recorded vecs
        // !! maybe disable extracellular diffusion
        unmapIfNotNil(mainBox)
        
        steps_per_ms = 10
        runStopAt = 5   // ms
        runStopIn = 1   // ms
        tstop = 100     // ms
        dt = 0.1        // ms
        setdt()
    }
    
    // All next staff is private
    
    
    proc createOrLoadHandler() { local isCalledFromShow, cardIdx
        isCreateOrLoad = $1
        isCalledFromShow = $2
        
        cardIdx = !isCreateOrLoad
        deck.flip_to(cardIdx)
        
        if (isCalledFromShow) {
            return
        }
        
        if (isCreateOrLoad) {
            showExtracellularManagerBaseWidget()
        } else {
            dismissIfNotNil(manageAndRunWidget)
        }
    }
    
    // !! just for test
    proc playerTestHandler() {
        player.play(frontEndIdx, isUseOpacitiesOrColours, 1)
    }
    
    proc showLastHandler() {
        if (!isSmthRecordedOrLoaded) {
            mwh.showWarningBox("Please run the simulation once or load a saved animation file.")
            return
        }
        
        player.play(frontEndIdx, isUseOpacitiesOrColours, 0)
    }
    
    proc generateHandler() { local numECSs, isCancel, numSects, baseEcsRadiusOrMinus1, radiusGenCorr, srcIdx, secIdx, numPts, ptIdx, x_secPt, y_secPt, z_secPt, x_src, y_src, z_src localobj ecsList, baseECS, list_ref, newECS
        
        ecsList = ecsLibrary.ecsList
        
        numECSs = ecsList.count()
        if (numECSs == 0) {
            mwh.showWarningBox("Please create a single extracellular source using \"Manager of extracellular sources\".")
            return
        } else if (numECSs > 1) {
            isCancel = !boolean_dialog("There is more than one extracellular source. Can we delete all but the first one before the next step?", "Yes", "No")
            if (isCancel) {
                return
            }
        }
        
        dismissIfNotNil(manageAndRunWidget)     // Just in case
        
        baseECS = ecsList.o(0)
        
        ecsList.remove_all()
        
        list_ref = axonCompOrNil.list_ref
        numSects = list_ref.count()
        
        baseEcsRadiusOrMinus1 = baseECS.spatialInfo.radiusOrMinus1
        if (baseEcsRadiusOrMinus1 == -1) {
            radiusGenCorr = radiusGen
        } else {
            radiusGenCorr = radiusGen - baseEcsRadiusOrMinus1
        }
        
        for srcIdx = 0, numSrcs - 1 {
            
            // !! Simple implementation, just for demo;
            //    the placement of the sources is not uniform by "distance" along axon because we rely on section 3D points rather than segments;
            //    see also: NanoBranchesManager.reseedBranches
            
            secIdx = rng.discunif(0, numSects - 1)
            list_ref.o(secIdx).sec {
                numPts = n3d()
                ptIdx = rng.discunif(0, numPts - 1)
                x_secPt = x3d(ptIdx)
                y_secPt = y3d(ptIdx)
                z_secPt = z3d(ptIdx)
            }
            
            // !! maybe use minRadius = diam3d(ptIdx) / 2
            geomMath.rndPt3D_unifByVolInSphere(rng, x_secPt, y_secPt, z_secPt, radiusGenCorr, &x_src, &y_src, &z_src)
            
            newECS = baseECS.createShiftedCopy(x_src, y_src, z_src)
            ecsList.append(newECS)
        }
        
        showExtracellularManagerBaseWidget()    // This calls ecsList.select(0)
    }
    
    proc DtChangedHandler() {
        if (DtOrMinus1 <= 0) {
            DtOrMinus1 = -1
        }
    }
    
    proc loadBinFileHandler() { local isCancel
        strdef binFilePathName
        
        isCancel = fbh.showLoadFileDialog(pyEnumInFileTypes.binaryResultsBin, binFilePathName)
        if (isCancel) {
            return
        }
        
        record.loadFromBinFile(binFilePathName)
        isSmthRecordedOrLoaded = 1
        
        player.play(frontEndIdx, isUseOpacitiesOrColours, 0)
    }
    
endtemplate SimGABADiffusionBasketCell
