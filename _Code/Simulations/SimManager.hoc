
begintemplate SimulationManager
    
    public createSimulationsPanel, simIdxToWidget, preRun, preContinue, postRun
    
    external isAstrocyteOrNeuron
    external InsertElectricMechanisms, InsertGlutamateMechanisms, InsertPotassiumMechanisms
    external stringEmpty, codeContractViolation
    external mainUiLocker, mmIcrHelper, beih, mwh, pyObj
    external altRunControlWidget
    
    objref deck
    
    objref simIdxToWidget[1]
    
    simCatIdx = -1
    lastSimIdxOrMinus1 = -1
    isLastSimInited = -1
    
    double simIdxToLEDState[1]
    objref simIdxToIsFirstShow
    
    objref this
    
    
    proc init() { local numSims
        
        numSims = 11
        
        objref simIdxToWidget[numSims]
        if (!isAstrocyteOrNeuron) {
            execute("simIdxToWidget[0] = new SimVoltageCA1Neuron()", this)          // The template is not loaded for astrocytes
        }
        simIdxToWidget[1] = new SimExtracellularDiffusion()
        simIdxToWidget[2] = new SimFrapInCircleGeometry()
        simIdxToWidget[3] = new SimFrapLine()
        simIdxToWidget[4] = new SimSpatialVoltageDistributions()
        simIdxToWidget[5] = new SimConstantElectricalSimulations()
        simIdxToWidget[6] = new SimFrequencyElectricalSimulation()
        if (isAstrocyteOrNeuron) {
            execute("simIdxToWidget[7] = new SimCalciumDynamics()", this)           // The template is not loaded for neurons
        }
        simIdxToWidget[8] = new SimCalciumWave()
        simIdxToWidget[9] = new SimGlutamate()
        simIdxToWidget[10] = new SimPotassium()
        
        simCatIdx = 0
        
        double simIdxToLEDState[numSims]
        simIdxToIsFirstShow = new Vector(numSims, 1)
        
        lastSimIdxOrMinus1 = -1
    }
    
    proc createSimulationsPanel() {
        strdef text1, text2
        
        xpanel("")
        xlabel("===================== Simulations =====================")
        xlabel("")
        xlabel("Simulation category:")
        xradiobutton("Voltage", "simCatChangedHandler(0)", simCatIdx == 0)
        xradiobutton("Electric stimuli", "simCatChangedHandler(1)", simCatIdx == 1)
        xradiobutton("FRAP", "simCatChangedHandler(2)", simCatIdx == 2)
        xradiobutton("Calcium", "simCatChangedHandler(3)", simCatIdx == 3)
        xradiobutton("Other species", "simCatChangedHandler(4)", simCatIdx == 4)
        xlabel("")
        xpanel()
        deck = new Deck()
        deck.intercept(1)
        {
            xpanel("")
            if (!isAstrocyteOrNeuron) {
                xlabel("Basic voltage simulation of CA1-neuron")
                xstatebutton("CA1-neuron voltage", &simIdxToLEDState[0], "simSelectedHandler(0)")
                insertSpacer()
            }
            xlabel("Simulation of spatial distribution of voltage along dendrites") 
            xstatebutton("Membrane voltage distribution", &simIdxToLEDState[4], "simSelectedHandler(4)")
            insertSpacer()
            xpanel()
            xpanel("")
            xlabel("Parameters of somatic stimuli")
            xstatebutton("Constant electric stimuli", &simIdxToLEDState[5], "simSelectedHandler(5)")
            insertSpacer()
            xlabel("Parameters of sinusoidal stimulations into soma")
            xstatebutton("Variable electric stimuli", &simIdxToLEDState[6], "simSelectedHandler(6)")
            insertSpacer()
            xpanel()
            xpanel("")
            xlabel("Simulation of FRAP experiment with round-spot bleaching")
            xstatebutton("FRAP with round-spot bleaching", &simIdxToLEDState[2], "simSelectedHandler(2)")
            insertSpacer()
            xlabel("Simulation of line-scan FRAP")
            xstatebutton("Line-scan FRAP", &simIdxToLEDState[3], "simSelectedHandler(3)")
            insertSpacer()
            xpanel()
            xpanel("")
            if (isAstrocyteOrNeuron) {
                xlabel("Parameters for microscopic calcium dynamics")
                xstatebutton("Microscopic calcium dynamics", &simIdxToLEDState[7], "simSelectedHandler(7)")
                insertSpacer()
            }
            xlabel("Calcium Wave simulations")
            xstatebutton("Calcium Wave", &simIdxToLEDState[8], "simSelectedHandler(8)")
            insertSpacer()
            xpanel()
            xpanel("")
            if (isAstrocyteOrNeuron) {
                text1 = "Potassium diffusion simulation for astrocyte"
                text2 = "Astrocyte K+ diffusion"
            } else {
                text1 = "GABA diffusion simulation for basket cell interneuron"
                text2 = "Basket cell GABA diffusion"
            }
            xlabel(text1)
            xstatebutton(text2, &simIdxToLEDState[1], "simSelectedHandler(1)")
            insertSpacer()
            xlabel("Cell model with Glutamate transporters")
            xstatebutton("Membrane biophysics with glutamate transport", &simIdxToLEDState[9], "simSelectedHandler(9)")
            insertSpacer()
            xlabel("Cell model with potassium dynamics")
            xstatebutton("Dynamics of intra and extracellular K+", &simIdxToLEDState[10], "simSelectedHandler(10)")
            insertSpacer()
            xpanel()
        }
        deck.intercept(0)
        // deck.flip_to(*)      // Will be done below in simCatChangedHandler
        deck.map()
        xpanel("")
        xlabel("Warning: Most sims above insert certain biophys mechs into")
        xlabel("                the sections and deploy custom \"proc advance\".")
        xlabel("                When you uncheck a button, the proc is removed,")
        xlabel("                but the mechs remain.")
        xpanel()
        
        simCatChangedHandler(simCatIdx)
    }
    
    func preRun() { local isInitOnly
        isInitOnly = $1
        isLastSimInited = 1
        return simIdxToWidget[lastSimIdxOrMinus1].preRun(isInitOnly)
    }
    
    func preContinue() {
        if (!isLastSimInited) {
            altRunControlWidget.showNotInitedWarning()
            return 1
        }
        return simIdxToWidget[lastSimIdxOrMinus1].preContinue()
    }
    
    proc postRun() {
        simIdxToWidget[lastSimIdxOrMinus1].postRun()
    }
    
    // All next staff is private
    
    
    proc simCatChangedHandler() {
        simCatIdx = $1
        deck.flip_to(simCatIdx)
    }
    
    proc simSelectedHandler() { local simIdx, isCancel, isRescanRequired localobj widget, nil
        strdef biophysJsonFileNameOrEmpty, hocCommand
        
        simIdx = $1
        
        isLastSimInited = 0
        
        if (lastSimIdxOrMinus1 != -1) {
            simIdxToWidget[lastSimIdxOrMinus1].dismissHandler()
            if (altRunControlWidget != nil) {
                altRunControlWidget.unplugSim()
            }
            if (simIdx == lastSimIdxOrMinus1) {
                deployDefaultProcAdvance()
                lastSimIdxOrMinus1 = -1
                return
            } else {
                simIdxToLEDState[lastSimIdxOrMinus1] = 0
                doNotify()
            }
        }
        
        if (mainUiLocker != nil) {  // !! nil in tests
            if (0) {
                // !!! more preferable, but leads to errors in certain scenarios because currently we
                //     don't delete/create MechComp-s for the nanogeometry dynamically in contrast to the nanogeometry itself
                mainUiLocker.makeSureNanoReseedingWidgetsClosed()
            } else {
                isCancel = mainUiLocker.makeSureNanoReseedingLocked()
                if (isCancel) {
                    simIdxToLEDState[simIdx] = 0
                    return
                }
            }
        }
        
        // !! here we can call some more specialized proc because no need to have them imported or rescanned
        mmIcrHelper.makeSureMechCompsCreatedOrImportedAndRescanned()
        
        widget = simIdxToWidget[simIdx]
        
        isCancel = widget.preShowCheck()
        if (isCancel) {
            simIdxToLEDState[simIdx] = 0
            return
        }
        
        // Import biophysics from JSON file
        biophysJsonFileNameOrEmpty = widget.biophysJsonFileNameOrEmpty
        if (!stringEmpty(biophysJsonFileNameOrEmpty)) {
            isCancel = beih.importForSim(biophysJsonFileNameOrEmpty)
            if (isCancel) {
                simIdxToLEDState[simIdx] = 0
                return
            }
        }
        
        // !! deprecated: remove this IF operator in favour of beih.importForSim (called just above) once we:
        //    (1) export/import density_GluTrans inhom model in the same way as for g_pas;
        //    (2) move the GLOBAL vars assigned in "MechanismSwitch_deprecated.hoc" to the loaded JSON file
        isRescanRequired = 0
        if (simIdx == 2 || simIdx == 3) {
            InsertElectricMechanisms(0)
            isRescanRequired = 1
        } else if (simIdx == 7 || simIdx == 8) {
            InsertElectricMechanisms(1)
            isRescanRequired = 1
        } else if (simIdx == 9) {
            InsertGlutamateMechanisms()
            isRescanRequired = 1
        } else if (simIdx == 10) {
            InsertPotassiumMechanisms()
            isRescanRequired = 1
        }
        
        if (isRescanRequired && mmIcrHelper != nil) {   // !! can be nil in tests
            mmIcrHelper.scheduleRescan(2)
        }
        
        if (widget.isCustomProcAdvance) {
            deployCustomProcAdvance(simIdx)
        } else {
            deployDefaultProcAdvance()
        }
        
        if (widget.isAltRunControl) {
            altRunControlWidget.show()
            altRunControlWidget.plugSim(pyObj.getTemplateName(widget))
        }
        
        lastSimIdxOrMinus1 = simIdx
        
        mwh.startIntercepting()
        {
            widget.show(simIdxToIsFirstShow.x[simIdx])
            simIdxToIsFirstShow.x[simIdx] = 0
            
            if (widget.isAltRunControl) {
                mwh.showMessageBox("This simulation integrates with \"AltRunControl\".", "Please don't use the standard \"RunControl\" for it.", "Use AltRunControl")
            }
        }
        mwh.endIntercepting()
    }
    
    proc deployDefaultProcAdvance() {
        execute("~proc advance() { fadvance() }")
    }
    
    proc deployCustomProcAdvance() { local simIdx
        strdef hocCommand
        simIdx = $1
        // !! for simplicity, we can call proc fadvance() in this generated HOC command rather than on the beginning of each proc widget.advance()
        sprint(hocCommand, "~proc advance() { simManager.simIdxToWidget[%d].advance() }", simIdx)
        execute(hocCommand)
    }
    
    proc insertSpacer() {
        xlabel("---------------------------------------------------------------------------------------------------------")
    }
    
endtemplate SimulationManager

objref simManager
simManager = new SimulationManager()
