
objref simManager

// This widget is a counterpart of the standard "RunControl" panel available via "Tools" -> "RunControl" or nrncontrolmenu() with some new features:
// * it applies the stoch (and inhom) models defined in our program;
// * it integrates with the sims providing custom handling for start/stop/continue events;
// * it eliminates the common source of errors when user clicks "Continue til", "Continue for" or "Single Step" before "Init" or "Init & Run".
begintemplate AltRunControlWidget

    public show, plugSim, unplugSim, initAndRunHandler, showNotInitedWarning, dismissHandler
    
    external cvode
    external v_init, runStopAt, runStopIn, tstop, steps_per_ms, screen_update_invl, realtime, running_
    external stdinit, run, continuerun, steprun, tstop_changed, setdt
    external alt_stdinit, alt_run, alt_continuerun, alt_steprun
    external simManager, mwh
    
    external inhomAndStochApplicator, inhomAndStochLibrary
    external mmIcrHelper
    external printNotImplementedMsgAndRaiseError, codeContractViolation
    
    objref mainBox
    
    isEnableStoch = -1
    
    isInited = -1
    isSimPlugged = -1
    strdef integratedWithVarLabel
    
    strdef none
    
    
    proc init() {
        isEnableStoch = 1
        
        isInited = 0
        isSimPlugged = 0
        none = "NONE"
        updateIntegratedWithVarLabel(none)
    }
    
    proc show() { localobj nil
        strdef label
        
        if (mainBox != nil) {           // Do not replace with one IF
            if (mainBox.ismapped()) {   //
                return
            }
        }
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            xvarlabel(integratedWithVarLabel)
            xpanel()
            
            // Making this widget look alike the standard one as close as possible
            // see "%NEURONHOME%\lib\hoc\stdrun.hoc" -> proc nrncontrolmenu()
            
            // !! the units are not added for 6 params below automatically (maybe because we are inside a template here in contrast to RunControl), so have to use some workaround
            
            xpanel("")
            
            // xpvalue("Init", &v_init, 1, "initHandler()", 1)  // No units
            label = "Init (%s)"
            addUnitsFrom(label, "v_init")
            xpvalue(label, &v_init, 1, "initHandler()", 1)
            
            xbutton("Init & Run", "initAndRunHandler()")
            
            xbutton("Stop", "stoprun = 1")
            
            // xpvalue("Continue til", &runStopAt, 1, "continueTilHandler()", 1)    // No units
            label = "Continue til (%s)"
            addUnitsFrom(label, "runStopAt")
            xpvalue(label, &runStopAt, 1, "{ continueTilHandler() stoprun = 1 }", 1)
            
            // xpvalue("Continue for", &runStopIn, 1, "continueForHandler()", 1)    // No units
            label = "Continue for (%s)"
            addUnitsFrom(label, "runStopIn")
            xpvalue(label, &runStopIn, 1, "{ continueForHandler() stoprun = 1 }", 1)
            
            xbutton("Single Step", "singleStepHandler()")
            
            xpvalue("t", &t)
            
            // xpvalue("Tstop", &tstop, 1, "tstop_changed()")   // No units
            label = "Tstop (%s)"
            addUnitsFrom(label, "tstop")
            xpvalue(label, &tstop, 1, "tstop_changed()")
            
            xpvalue("dt", &dt, 1, "setdt()")
            
            xpvalue("Points plotted/ms", &steps_per_ms, 1, "setdt()")
            
            // xpvalue("Scrn update invl", &screen_update_invl, 1)  // No units
            label = "Scrn update invl (%s)"
            addUnitsFrom(label, "screen_update_invl")
            xpvalue(label, &screen_update_invl, 1)
            
            // xpvalue("Real Time", &realtime)  // No units
            label = "Real Time (%s)"
            addUnitsFrom(label, "realtime")
            xpvalue(label, &realtime)
            
            xpanel()
            
            xpanel("")
            xlabel("Warning: If you use the standard \"RunControl\"")
            xlabel("widget instead of this one,")
            xlabel("then all stochasticity models defined")
            xlabel("in our program won't be applied.")
            // !! the same for inhomogeneity models applied to ASSIGNED and STATE vars
            xpanel()
            
            xpanel("")
            xcheckbox("Enable stochasticity", &isEnableStoch)
            xpanel()
            
            // !! maybe add a button here to reset all RNGs used by the stoch manager
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("AltRunControl", 200, 575, -1, -1)
    }
    
    proc plugSim() {
        strdef simName
        simName = $s1
        updateIntegratedWithVarLabel(simName)
        isSimPlugged = 1
    }
    
    proc unplugSim() {
        updateIntegratedWithVarLabel(none)
        isSimPlugged = 0
    }
    
    proc initAndRunHandler() { local numArg, isSkipSimPreRunAndPostRun, isCancel, isWaitingForCallbacks
        
        numArg = numarg()
        if (numArg > 1) {
            codeContractViolation()
        }
        
        if (numArg == 1) {
            isSkipSimPreRunAndPostRun = $1
            if (!isSkipSimPreRunAndPostRun) {
                codeContractViolation()
            }
        } else {
            isSkipSimPreRunAndPostRun = 0
        }
        
        rescanBiophysCompsIfNeeded()
        
        if (!isSkipSimPreRunAndPostRun) {
            isCancel = callSimPreRun(0)
            if (isCancel) {
                return
            }
        }
        
        isInited = 1
        
        if (!isEnableStoch) {
            run()
        } else {
            checkCVodeStochPrereqs()
            isWaitingForCallbacks = inhomAndStochApplicator.startPlayingVars()
            if (!isWaitingForCallbacks) {
                run()
            } else {
                alt_run()
            }
            inhomAndStochApplicator.stopPlayingVars()
        }
        
        if (!isSkipSimPreRunAndPostRun) {
            callSimPostRun()
        }
    }
    
    proc showNotInitedWarning() { localobj nil
        strdef msg
        msg = "Please don't click \"Continue til\", \"Continue for\" or \"Single Step\" before \"Init\" or \"Init & Run\"."
        if (mwh != nil) {
            mwh.showWarningBox(msg)
        } else {
            printf("\n    Warning: %s\n\n", msg)
        }
    }
    
    proc dismissHandler() { localobj nil
        if (mainBox != nil) {
            mainBox.unmap()
        }
    }
    
    // All next staff is private
    
    
    proc initHandler() { local isCancel
        rescanBiophysCompsIfNeeded()
        isCancel = callSimPreRun(1)
        if (isCancel) {
            return
        }
        isInited = 1
        if (!isEnableStoch) {
            stdinit()
        } else {
            checkCVodeStochPrereqs()
            alt_stdinit()
        }
    }
    
    proc continueTilHandler() { local isCancel, isWaitingForCallbacks
        if (!isInited) {
            showNotInitedWarning()
            return
        }
        rescanBiophysCompsIfNeeded()
        isCancel = callSimPreContinue()
        if (isCancel) {
            return
        }
        if (!isEnableStoch) {
            continuerun(runStopAt)
        } else {
            checkCVodeStochPrereqs()
            isWaitingForCallbacks = inhomAndStochApplicator.startPlayingVars()
            if (!isWaitingForCallbacks) {
                continuerun(runStopAt)
            } else {
                alt_continuerun(runStopAt)
            }
            inhomAndStochApplicator.stopPlayingVars()
        }
        callSimPostRun()
    }
    
    proc continueForHandler() { local isCancel, tStopAt, isWaitingForCallbacks
        if (!isInited) {
            showNotInitedWarning()
            return
        }
        rescanBiophysCompsIfNeeded()
        isCancel = callSimPreContinue()
        if (isCancel) {
            return
        }
        tStopAt = t + runStopIn
        if (!isEnableStoch) {
            continuerun(tStopAt)
        } else {
            checkCVodeStochPrereqs()
            isWaitingForCallbacks = inhomAndStochApplicator.startPlayingVars()
            if (!isWaitingForCallbacks) {
                continuerun(tStopAt)
            } else {
                alt_continuerun(tStopAt)
            }
            inhomAndStochApplicator.stopPlayingVars()
        }
        callSimPostRun()
    }
    
    proc singleStepHandler() { local isCancel, isWaitingForCallbacks
        if (!isInited) {
            showNotInitedWarning()
            return
        }
        rescanBiophysCompsIfNeeded()
        isCancel = callSimPreContinue()
        if (isCancel) {
            return
        }
        if (!isEnableStoch) {
            steprun()
        } else {
            checkCVodeStochPrereqs()
            isWaitingForCallbacks = inhomAndStochApplicator.startPlayingVars()
            if (!isWaitingForCallbacks) {
                steprun()
            } else {
                alt_steprun()
            }
            inhomAndStochApplicator.stopPlayingVars()
        }
        callSimPostRun()
    }
    
    proc rescanBiophysCompsIfNeeded() { localobj nil
        if (mmIcrHelper != nil) {
            mmIcrHelper.makeSureMechCompsCreatedOrImportedAndRescanned()
        }
    }
    
    func callSimPreRun() { local isInitOnly
        isInitOnly = $1
        if (isSimPlugged) {
            return simManager.preRun(isInitOnly)
        } else {
            return 0
        }
    }
    
    func callSimPreContinue() {
        if (isSimPlugged) {
            return simManager.preContinue()
        } else {
            return 0
        }
    }
    
    proc callSimPostRun() {
        if (isSimPlugged) {
            simManager.postRun()
        }
    }
    
    proc checkCVodeStochPrereqs() {
        if (cvode.active() && inhomAndStochLibrary.isAnyStochVars()) {
            printNotImplementedMsgAndRaiseError("Cannot run simulation with stoch models and variable time step \"dt\".")
        }
    }
    
    proc addUnitsFrom() {
        sprint($s1, $s1, units($s2))
    }
    
    proc updateIntegratedWithVarLabel() {
        strdef simNameOrNone
        simNameOrNone = $s1
        sprint(integratedWithVarLabel, "Integrated with: %s", simNameOrNone)
    }
    
endtemplate AltRunControlWidget
