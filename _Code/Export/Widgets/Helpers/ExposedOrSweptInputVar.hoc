
// Keeping on the top level to have access to "v_init" etc.
_tempValue = -1

begintemplate ExposedOrSweptInputVar
    
    public enumBioGjSynCeSt, tapSetIdx, compIdx, mechIdx, varType, varName, varNameWithIndex, customExpr
    public gridInfoOrNil
    public s, sg
    public prepareShownStrings, getValue, getUnitsCommentOrEmpty, isEqual, isReleaseProbability
    
    external mth, mcu, compUtils, utils4FakeMech4GapJuncExtValue
    external getWatchedVarUnits, stringEmpty, stringsEqual, codeContractViolation
    external gjmAllGapJuncSets
    external _tempValue
    
    isExposedOrSwept = -1
    
    enumBioGjSynCeSt = -1   // 0: "Distributed mechanism", 1: "Gap junc part", 2: "Synapse part", 3: "Custom expression", 4: "Standard NEURON var (exposed only)"
    enumBioGjSyn = -1
    isBioOrTapPart = -1
    isGapJuncOrSyn = -1     // For taps only
    tapSetIdx = -1          //
    compIdx = -1
    mechIdx = -1
    varType = -1
    strdef varName, varNameWithIndex
    arraySize = -1
    arrayIndex = -1
    strdef customExpr
    
    objref gridInfoOrNil
    
    strdef s, sg
    
    isInteger = -1
    
    
    proc init() { local numArg
        numArg = numarg()
        
        isInteger = 0
        
        if (numArg == 2) {
            isExposedOrSwept = $1
            customExpr = $s2
            enumBioGjSynCeSt = 3
        } else if (numArg == 3 || numArg == 4) {
            isExposedOrSwept = $1
            enumBioGjSynCeSt = $2
            customExpr = $s3
            if (numArg == 4) {
                isInteger = $4
            }
            if (!isExposedOrSwept) {
                codeContractViolation()
            }
            if (enumBioGjSynCeSt != 4) {
                codeContractViolation()
            }
        } else if (numArg == 9) {
            isExposedOrSwept = $1
            enumBioGjSynCeSt = $2
            tapSetIdx = $3
            compIdx = $4
            mechIdx = $5
            varType = $6
            varName = $s7
            arraySize = $8
            arrayIndex = $9
            mth.getVarNameWithIndex(varName, arraySize, arrayIndex, varNameWithIndex)
        } else {
            codeContractViolation()
        }
        
        if (enumBioGjSynCeSt < 3) {
            enumBioGjSyn = enumBioGjSynCeSt
        } else {
            enumBioGjSyn = -1
        }
        
        // !!! code dup. with AddOneInputVarWidget ctor
        if (enumBioGjSyn == 0) {
            isBioOrTapPart = 1
            isGapJuncOrSyn = -1
        } else if (enumBioGjSyn == 1) {
            isBioOrTapPart = 0
            isGapJuncOrSyn = 1
        } else if (enumBioGjSyn == 2) {
            isBioOrTapPart = 0
            isGapJuncOrSyn = 0
        } else {
            isBioOrTapPart = -1
            isGapJuncOrSyn = -1
        }
        
        prepareShownStrings()
    }
    
    proc prepareShownStrings() { local enumDmPpFk, idxForTapSet localobj comp, nil
        strdef compTypeName, compName, varTypeName, mechName, templ
        
        if (enumBioGjSynCeSt == 0) {
            compTypeName = "Bio"
        } else if (enumBioGjSynCeSt == 1) {
            compTypeName = "GJ"
        } else if (enumBioGjSynCeSt == 2) {
            compTypeName = "Syn"
        } else if (enumBioGjSynCeSt == 3) {
            compTypeName = "Cust"   // Keep in sync with enterVarExpression
        } else if (enumBioGjSynCeSt == 4) {
            compTypeName = "Std"
        } else {
            codeContractViolation()
        }
        
        if (enumBioGjSynCeSt < 3) {
            comp = compUtils.getComp(enumBioGjSyn, tapSetIdx, compIdx)
            compName = comp.name
            mth.getVarTypeName(varType, varTypeName)
            enumDmPpFk = comp.enumDmPpFk
            mth.getMechName(enumDmPpFk, mechIdx, mechName)
            if (varType == -1) {    // -1: GLOBAL
                if (enumDmPpFk == 2) {
                    codeContractViolation()
                }
                sprint(s, "%s: @All \\ %s \\ %s \\ %s", compTypeName, mechName, varTypeName, varNameWithIndex)
            } else {
                // !!! BUG: for syns, this is not the same as "idxForSpineSet", so user will be confused
                idxForTapSet = tapSetIdx + 1
                
                templ = "%s set #%d: %s \\ %s \\ %s \\ %s"
                
                if (enumDmPpFk == 0) {
                    sprint(s, "%s: %s \\ %s \\ %s \\ %s", compTypeName, compName, mechName, varTypeName, varNameWithIndex)
                } else if (enumDmPpFk == 1) {
                    sprint(s, templ, compTypeName, idxForTapSet, compName, mechName, varTypeName, varNameWithIndex)
                } else if (enumDmPpFk == 2) {
                    if (enumBioGjSynCeSt == 1) {
                        sprint(s, templ, compTypeName, idxForTapSet, compName, mechName, varTypeName, varNameWithIndex)
                    } else if (enumBioGjSynCeSt == 2) {
                        sprint(s, "%s set #%d: %s \\ %s \\ %s", compTypeName, idxForTapSet, compName, varTypeName, varNameWithIndex)
                    } else {
                        codeContractViolation()
                    }
                } else {
                    codeContractViolation()
                }
            }
        } else {
            sprint(s, "%s: %s", compTypeName, customExpr)   // Keep in sync with enterVarExpression
        }
        
        if (isExposedOrSwept) {
            return
        }
        
        if (gridInfoOrNil == nil) {
            sprint(sg, "%s (1 value)", s)
        } else {
            sprint(sg, "%s (%d values)", s, gridInfoOrNil.numPts)
        }
    }
    
    func getValue() { local varTypeIdx localobj comp
        if (enumBioGjSynCeSt < 3) {
            if (varType != -1) {    // PARAMETER, ASSIGNED, STATE
                comp = compUtils.getComp(enumBioGjSyn, tapSetIdx, compIdx)
                varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
                return comp.mechStds[mechIdx][varTypeIdx].get(varName, arrayIndex)
            } else {                // GLOBAL
                return getGlobalOrCustomValue(varNameWithIndex)
            }
        } else {
            return getGlobalOrCustomValue(customExpr)
        }
    }
    
    proc getUnitsCommentOrEmpty() { local numArg, enumDmPpFk
        strdef unitsOrEmpty
        
        numArg = numarg()
        if (numArg == 0 || numArg > 2) {
            codeContractViolation()
        }
        
        // !! is that needed?
        unitsOrEmpty = ""
        
        if (enumBioGjSynCeSt < 3) {
            enumDmPpFk = compUtils.getComp(enumBioGjSyn, tapSetIdx, compIdx).enumDmPpFk
            
            if (enumBioGjSynCeSt == 1 && enumDmPpFk == 2) {
                utils4FakeMech4GapJuncExtValue.setNewVarIfNeeded(gjmAllGapJuncSets.o(tapSetIdx))
            }
            
            mth.getVarUnits(enumDmPpFk, mechIdx, varName, varNameWithIndex, unitsOrEmpty)
        } else {
            getWatchedVarUnits(customExpr, unitsOrEmpty)
        }
        if (!stringEmpty(unitsOrEmpty)) {
            sprint($s1, " (%s)", unitsOrEmpty)
        } else {
            $s1 = ""
        }
        
        if (numArg == 2) {
            $s2 = unitsOrEmpty
        }
    }
    
    // in: enumDmPpFk, isGapJuncOrSyn, tapSetIdx, compIdx, mechIdx, varType, varName, arrayIndex
    func isEqual() { local enumDmPpFk, res localobj comp
        if (enumBioGjSynCeSt == 3) {
            return 0
        } else if (enumBioGjSynCeSt >= 4) {
            codeContractViolation()
        }
        comp = compUtils.getComp(enumBioGjSyn, tapSetIdx, compIdx)
        enumDmPpFk = comp.enumDmPpFk
        res = (enumDmPpFk == $1 && mechIdx == $5 && varType == $6 && stringsEqual(varName, $s7) && arrayIndex == $8)
        if (varType != -1) {    // -1: GLOBAL
            res = res && (compIdx == $4)
            if (!isBioOrTapPart) {
                res = res && (isGapJuncOrSyn == $2 && tapSetIdx == $3)
            }
        }
        return res
    }
    
    func isReleaseProbability() { local enumDmPpFk localobj comp
        if (enumBioGjSynCeSt != 2) {
            return 0
        }
        comp = compUtils.getComp(2, tapSetIdx, compIdx)
        enumDmPpFk = comp.enumDmPpFk
        return (enumDmPpFk == 2 && mcu.isMetaVar(varName))
    }
    
    // All next staff is private
    
    
    func getGlobalOrCustomValue() {
        strdef hocCommand
        sprint(hocCommand, "_tempValue = %s", $s1)
        execute(hocCommand)     // Do not replace with "execute(*, this)" not to lose access to "v_init" etc.
        return _tempValue
    }
    
endtemplate ExposedOrSweptInputVar
