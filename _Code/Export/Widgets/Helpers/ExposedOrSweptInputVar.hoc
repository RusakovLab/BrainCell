
// Keeping on the top level to have access to "v_init" etc.
_tempValue = -1

begintemplate ExposedOrSweptInputVar
    
    public enumDmTpCeSt, compIdx, mechIdx, varType, varName, varNameWithIndex, customExpr
    public gridInfoOrNil
    public s, sg
    public prepareShownStrings, getValue, getUnitsCommentOrEmpty, isEqual, isReleaseProbability
    
    external isAstrocyteOrNeuron
    external mth, mcu, compUtils
    external getWatchedVarUnits, stringEmpty, stringsEqual, codeContractViolation
    external _tempValue
    
    isExposedOrSwept = -1
    
    enumDmTpCeSt = -1   // 0: "Distributed mechanism", 1: "Tap !!!type/part", 2: "Custom expression", 3: "Standard NEURON var (exposed only)"
    compIdx = -1
    mechIdx = -1
    varType = -1
    strdef varName, varNameWithIndex
    arraySize = -1
    arrayIndex = -1
    strdef customExpr
    
    objref gridInfoOrNil
    
    strdef s, sg
    
    isInteger = -1
    
    
    proc init() { local numArg
        numArg = numarg()
        
        isInteger = 0
        
        if (numArg == 2) {
            isExposedOrSwept = $1
            customExpr = $s2
            enumDmTpCeSt = 2
        } else if (numArg == 3 || numArg == 4) {
            isExposedOrSwept = $1
            enumDmTpCeSt = $2
            customExpr = $s3
            if (numArg == 4) {
                isInteger = $4
            }
            if (!isExposedOrSwept) {
                codeContractViolation()
            }
            if (enumDmTpCeSt != 3) {
                codeContractViolation()
            }
        } else if (numArg == 8) {
            isExposedOrSwept = $1
            enumDmTpCeSt = $2
            compIdx = $3
            mechIdx = $4
            varType = $5
            varName = $s6
            arraySize = $7
            arrayIndex = $8
            mth.getVarNameWithIndex(varName, arraySize, arrayIndex, varNameWithIndex)
        } else {
            codeContractViolation()
        }
        
        prepareShownStrings()
    }
    
    proc prepareShownStrings() { local isDmOrTapPart, enumDmPpFk localobj comp, nil
        strdef compTypeName, compName, varTypeName, mechName
        
        if (enumDmTpCeSt == 0) {
            compTypeName = "Bio"
        } else if (enumDmTpCeSt == 1) {
            if (isAstrocyteOrNeuron) {
                compTypeName = "GJ"
            } else {
                compTypeName = "Syn"
            }
        } else if (enumDmTpCeSt == 2) {
            compTypeName = "Cust"   // Keep in sync with enterVarExpression
        } else if (enumDmTpCeSt == 3) {
            compTypeName = "Std"
        } else {
            codeContractViolation()
        }
        
        if (enumDmTpCeSt < 2) {
            isDmOrTapPart = 1 - enumDmTpCeSt
            comp = compUtils.getComp(isDmOrTapPart, compIdx)
            compName = comp.name
            mth.getVarTypeName(varType, varTypeName)
            enumDmPpFk = comp.enumDmPpFk
            if (enumDmPpFk != 2) {
                mth.getMechName(enumDmPpFk, mechIdx, mechName)
                if (varType != -1) {    // -1: GLOBAL
                    sprint(s, "%s: %s \\ %s \\ %s \\ %s", compTypeName, compName, mechName, varTypeName, varNameWithIndex)
                } else {
                    sprint(s, "%s: @All \\ %s \\ %s \\ %s", compTypeName, mechName, varTypeName, varNameWithIndex)
                }
            } else {
                sprint(s, "%s: %s \\ %s \\ %s", compTypeName, compName, varTypeName, varNameWithIndex)
            }
        } else {
            sprint(s, "%s: %s", compTypeName, customExpr)   // Keep in sync with enterVarExpression
        }
        
        if (isExposedOrSwept) {
            return
        }
        
        if (gridInfoOrNil == nil) {
            sprint(sg, "%s (1 value)", s)
        } else {
            sprint(sg, "%s (%d values)", s, gridInfoOrNil.numPts)
        }
    }
    
    func getValue() { local isDmOrTapPart, varTypeIdx localobj comp
        if (enumDmTpCeSt < 2) {
            if (varType != -1) {    // PARAMETER, ASSIGNED, STATE
                isDmOrTapPart = 1 - enumDmTpCeSt
                comp = compUtils.getComp(isDmOrTapPart, compIdx)
                varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
                return comp.mechStds[mechIdx][varTypeIdx].get(varName, arrayIndex)
            } else {                // GLOBAL
                return getGlobalOrCustomValue(varNameWithIndex)
            }
        } else {
            return getGlobalOrCustomValue(customExpr)
        }
    }
    
    proc getUnitsCommentOrEmpty() { local numArg, isDmOrTapPart, enumDmPpFk
        strdef unitsOrEmpty
        
        numArg = numarg()
        if (numArg == 0 || numArg > 2) {
            codeContractViolation()
        }
        
        // !! is that needed?
        unitsOrEmpty = ""
        
        if (enumDmTpCeSt < 2) {
            isDmOrTapPart = 1 - enumDmTpCeSt
            enumDmPpFk = compUtils.getComp(isDmOrTapPart, compIdx).enumDmPpFk
            mth.getVarUnits(enumDmPpFk, mechIdx, varName, varNameWithIndex, unitsOrEmpty)
        } else {
            getWatchedVarUnits(customExpr, unitsOrEmpty)
        }
        if (!stringEmpty(unitsOrEmpty)) {
            sprint($s1, " (%s)", unitsOrEmpty)
        } else {
            $s1 = ""
        }
        
        if (numArg == 2) {
            $s2 = unitsOrEmpty
        }
    }
    
    func isEqual() { local isDmOrTapPart, enumDmPpFk, res localobj comp
        if (enumDmTpCeSt == 2) {
            return 0
        } else if (enumDmTpCeSt >= 3) {
            codeContractViolation()
        }
        isDmOrTapPart = 1 - enumDmTpCeSt
        comp = compUtils.getComp(isDmOrTapPart, compIdx)
        enumDmPpFk = comp.enumDmPpFk
        res = (enumDmPpFk == $1 && mechIdx == $3 && varType == $4 && stringsEqual(varName, $s5) && arrayIndex == $6)
        if (varType != -1) {    // -1: GLOBAL
            res = res && (compIdx == $2)
        }
        return res
    }
    
    func isReleaseProbability() { local enumDmPpFk localobj comp
        if (isAstrocyteOrNeuron || enumDmTpCeSt != 1) {
            return 0
        }
        comp = compUtils.getComp(0, compIdx)
        enumDmPpFk = comp.enumDmPpFk
        return (enumDmPpFk == 2 && mcu.isMetaVar(varName))
    }
    
    // All next staff is private
    
    
    func getGlobalOrCustomValue() {
        strdef hocCommand
        sprint(hocCommand, "_tempValue = %s", $s1)
        execute(hocCommand)     // Do not replace with "execute(*, this)" not to lose access to "v_init" etc.
        return _tempValue
    }
    
endtemplate ExposedOrSweptInputVar
