
// !!!!! check that we call each public func somewere

begintemplate ExportOptions

    public isExportDistMechs, isExportDistMechAssignedAndState, isExportDistMechInhoms, isExportDistMechStochs
    public isExportGapJuncs, isExportGapJuncAssignedAndState, isExportGapJuncInhoms, isExportGapJuncStochs
    public isExportSyns, isExportSynAssignedAndState, isExportSynInhoms, isExportSynStochs
    public isExportECSs
    public isCreateParamsHoc, isExposeModelVars, isCreateRunnerHoc, isRecordAndSaveModelVars, isMakeSweepForModelVars, isRepeatForStats, isCopyDll, isNewOrExistingDll
    public isCreateNsgDataZipFile
    public exposedVarsList, sweptVarsList, watchedVarsList
    public stdExposedVarsList
    public DtOrMinus1, isRecordAndSaveWithAPCounts, isSaveToTxtOrBinFile, numRepeatsForStats
    
    public validate
    public isExportAnyDistFuncs, isExportAnyStochFuncs, isExportAnyInhomBiophysModels, isExportSegmentationHelper, isExportAnyStochBiophysModels, isExportAnyTapSets, isExportAnyGapJuncSets, isExportAnySynSets, isExportAnyInhomGapJuncModels, isExportAnyStochGapJuncModels, isExportAnyInhomSynModels, isExportAnyStochSynModels, isExportAnyInhomTapModels, isExportInhomAndStochLibrary, isExportExtracellularLibrary, isExportAltRunControl, isExportSynEventsHelper, isExportAnyInhomExtValueGapJuncModels, isExportAnyInhomNetConSynModels
    public isExportedInhomVar, isExportedStochVar, isExportedInhomBiophysVar, isExportedStochBiophysVar, isExportedInhomGapJuncVar, isExportedStochGapJuncVar, isExportedInhomSynVar, isExportedStochSynVar
    public isPythonRequired
    public isAnyExposedVars, isAnySweptVars, isAnyWatchedVars
    public isAnyCustomSweptVars, isAnyWatchedAPCounts
    
    external cvode
    external isAstrocyteOrNeuron, soma_ref
    external inhomAndStochLibrary, ecsLibrary
    external pyObj, gjmAllGapJuncSets, smAllSynSets
    external stringEmpty, codeContractViolation
    external eachItemInList
    
    isExportDistMechs = -1
    isExportDistMechAssignedAndState = -1
    isExportDistMechInhoms = -1
    isExportDistMechStochs = -1
    isExportGapJuncs = -1       // !!!!! maybe make it private and call isExportAnyGapJuncSets() everywhere instead
    isExportGapJuncAssignedAndState = -1
    isExportGapJuncInhoms = -1
    isExportGapJuncStochs = -1
    isExportSyns = -1           // !!!!! maybe make it private and call isExportAnySynSets() everywhere instead
    isExportSynAssignedAndState = -1
    isExportSynInhoms = -1
    isExportSynStochs = -1
    isExportECSs = -1
    isCreateParamsHoc = -1
    isExposeModelVars = -1
    isCreateRunnerHoc = -1
    isRecordAndSaveModelVars = -1
    isMakeSweepForModelVars = -1
    isRepeatForStats = -1
    isCopyDll = -1
    isNewOrExistingDll = -1
    isCreateNsgDataZipFile = -1
    
    objref exposedVarsList, sweptVarsList, watchedVarsList
    objref stdExposedVarsList
    
    DtOrMinus1 = -1
    isRecordAndSaveWithAPCounts = -1
    isSaveToTxtOrBinFile = -1
    numRepeatsForStats = -1
    
    
    proc init() { local x localobj apc, nil
        strdef defWatchedVar, unitsStr
        
        // Default options
        isExportDistMechs = 1
        isExportDistMechAssignedAndState = 0
        isExportDistMechInhoms = 1
        isExportDistMechStochs = 1
        isExportGapJuncs = 1
        isExportGapJuncAssignedAndState = 0
        isExportGapJuncInhoms = 1
        isExportGapJuncStochs = 1
        isExportSyns = !isAstrocyteOrNeuron
        isExportSynAssignedAndState = 0
        isExportSynInhoms = !isAstrocyteOrNeuron
        isExportSynStochs = !isAstrocyteOrNeuron
        // isExportECSs = 0     // The default value will be chosen each time user opens the widget
        isCreateParamsHoc = 0
        isExposeModelVars = 0
        isCreateRunnerHoc = 0
        isRecordAndSaveModelVars = 0
        isMakeSweepForModelVars = 0
        isRepeatForStats = 0
        isCopyDll = 1
        isNewOrExistingDll = 0
        isCreateNsgDataZipFile = 0
        
        exposedVarsList = new List()
        sweptVarsList = new List()
        watchedVarsList = new List()
        
        // Add one default watched variable
        apc = getFirstValidAPCountOrNil()
        if (apc != nil) {
            x = apc.get_loc()
            {
                sprint(defWatchedVar, "%s.v( %s )", secname(), pyObj.str(x))
            }
            pop_section()
        } else {
            soma_ref.o(0).sec {
                sprint(defWatchedVar, "%s.v( 0.5 )", secname())
            }
        }
        watchedVarsList.append(new String(defWatchedVar))
        
        // Default recording period
        if (!cvode.active()) {
            DtOrMinus1 = 4 * dt
        } else {
            DtOrMinus1 = -1
        }
        
        isRecordAndSaveWithAPCounts = 1
        isSaveToTxtOrBinFile = 1
        numRepeatsForStats = 2
        
        // Keep in sync with ExportManagerMainWidget.show
        stdExposedVarsList = new List()
        stdExposedVarsList.append(new ExposedOrSweptInputVar(1, 4, "celsius"))
        stdExposedVarsList.append(new ExposedOrSweptInputVar(1, 4, "v_init"))
        stdExposedVarsList.append(new ExposedOrSweptInputVar(1, 4, "tstop"))
        stdExposedVarsList.append(new ExposedOrSweptInputVar(1, 4, "dt"))
        // Always exporting "steps_per_ms" looks like overkill,
        // but in fact it's used by the standard "proc setdt()", so omitting it for export
        // would result in "Changed dt" when we run the exported file even though "dt" was exported
        stdExposedVarsList.append(new ExposedOrSweptInputVar(1, 4, "steps_per_ms", 1))
        
        unitsStr = units(&dt)
        if (!stringEmpty(unitsStr)) {
            sprint(unitsStr, "in model time, %s", unitsStr)
        }
        units(&DtOrMinus1, unitsStr)    // Do not replace with "units(&DtOrMinus1, units(&dt))"
    }
    
    // out: isCancel
    func validate() { local cond1, cond2
        
        if (!isCreateRunnerHoc && isCreateNsgDataZipFile) {
            if (confirmProceedingWithout("creating \"runner.hoc\"")) {
                return 1
            }
        }
        
        cond1 = (isAnySweptVars() || isRepeatForStats || isCreateNsgDataZipFile)
        cond2 = (isAnyWatchedVars() || isAnyWatchedAPCounts())
        if (isCreateRunnerHoc && cond1 && !cond2) {
            if (confirmProceedingWithout("specifying any watched variables")) {
                return 1
            }
        }
        
        return 0
    }
    
    func isExportAnyDistFuncs() {
        return isExportAnyInhomBiophysModels() || isExportAnyInhomTapModels()
    }
    
    func isExportAnyStochFuncs() {
        return isExportAnyStochBiophysModels() || isExportAnyStochGapJuncModels() || isExportAnyStochSynModels()
    }
    
    func isExportAnyInhomBiophysModels() {
        return (isExportDistMechs && isExportDistMechInhoms && inhomAndStochLibrary.getNumInhomVarsForDistMechs() != 0)
    }
    
    func isExportSegmentationHelper() {
        return (isExportDistMechs && isExportDistMechInhoms && inhomAndStochLibrary.isAnyNonVerbatimInhomVarsForDistMechs())
    }
    
    func isExportAnyStochBiophysModels() {
        return (isExportDistMechs && isExportDistMechStochs && inhomAndStochLibrary.getNumStochVarsForDistMechs() != 0)
    }
    
    func isExportAnyTapSets() { local res
        res = isExportAnyGapJuncSets()
        if (!isAstrocyteOrNeuron) {
            res = res || isExportAnySynSets()
        }
        return res
    }
    
    func isExportAnyGapJuncSets() {
        return isExportGapJuncs && gjmAllGapJuncSets.count() != 0
    }
    
    func isExportAnySynSets() {
        return isExportSyns && smAllSynSets.count() != 0
    }
    
    func isExportAnyInhomGapJuncModels() { local numArg, gapJuncSetIdx
        numArg = numarg()
        if (numArg == 0) {
            gapJuncSetIdx = -1
        } else if (numArg == 1) {
            gapJuncSetIdx = $1
        } else {
            codeContractViolation()
        }
        return (isExportGapJuncs && isExportGapJuncInhoms && inhomAndStochLibrary.getNumInhomVarsForTaps(1, gapJuncSetIdx) != 0)
    }
    
    func isExportAnyStochGapJuncModels() { local numArg, gapJuncSetIdx
        numArg = numarg()
        if (numArg == 0) {
            gapJuncSetIdx = -1
        } else if (numArg == 1) {
            gapJuncSetIdx = $1
        } else {
            codeContractViolation()
        }
        return (isExportGapJuncs && isExportGapJuncStochs && inhomAndStochLibrary.getNumStochVarsForTaps(1, gapJuncSetIdx) != 0)
    }
    
    func isExportAnyInhomSynModels() { local numArg, synSetIdx
        numArg = numarg()
        if (numArg == 0) {
            synSetIdx = -1
        } else if (numArg == 1) {
            synSetIdx = $1
        } else {
            codeContractViolation()
        }
        return (isExportSyns && isExportSynInhoms && inhomAndStochLibrary.getNumInhomVarsForTaps(0, synSetIdx) != 0)
    }
    
    func isExportAnyStochSynModels() { local numArg, synSetIdx
        numArg = numarg()
        if (numArg == 0) {
            synSetIdx = -1
        } else if (numArg == 1) {
            synSetIdx = $1
        } else {
            codeContractViolation()
        }
        return (isExportSyns && isExportSynStochs && inhomAndStochLibrary.getNumStochVarsForTaps(0, synSetIdx) != 0)
    }
    
    func isExportAnyInhomTapModels() { local res
        res = isExportAnyInhomGapJuncModels()
        if (!isAstrocyteOrNeuron) {
            res = res || isExportAnyInhomSynModels()
        }
        return res
    }
    
    func isExportInhomAndStochLibrary() { local synSetIdx localobj synSet
        if (isExportAnyDistFuncs() || isExportAnyStochFuncs() || isExportSynEventsHelper()) {
            return 1
        }
        if (isExportSyns) {
            for synSetIdx = 0, smAllSynSets.count() - 1 {   // Don't replace with "eachItemInList" because we return
                synSet = smAllSynSets.o(synSetIdx)
                if (synSet.is3Or1PartInSynStruc()) {
                    return 1
                }
            }
        }
        return 0
    }
    
    func isExportExtracellularLibrary() {
        return isExportECSs && !ecsLibrary.isEmpty()
    }
    
    func isExportAltRunControl() { local synSetIdx localobj synSet
        if (isExportAnyStochFuncs()) {
            return 1
        }
        if (isAstrocyteOrNeuron || !isExportSyns) {
            return 0
        }
        for synSetIdx = 0, smAllSynSets.count() - 1 {   // Don't replace with "eachItemInList" because we return
            synSet = smAllSynSets.o(synSetIdx)
            if (synSet.seh.isMinRPlt1) {
                return 1
            }
        }
        return isReleaseProbabilityInExposedOrSweptVars()
    }
    
    func isExportSynEventsHelper() { local synSetIdx localobj synSet
        if (isExportSyns) {
            for synSetIdx = 0, smAllSynSets.count() - 1 {   // Don't replace with "eachItemInList" because we return
                synSet = smAllSynSets.o(synSetIdx)
                if (synSet.seh.isSefwEnabled()) {
                    return 1
                }
            }
            return isReleaseProbabilityInExposedOrSweptVars()
        } else {
            return 0
        }
    }
    
    func isExportAnyInhomExtValueGapJuncModels() {
        if (!(isExportGapJuncs && isExportGapJuncInhoms)) {
            return 0
        }
        return inhomAndStochLibrary.isAnyInhomFakeCompModelsForTaps(1)
    }
    
    func isExportAnyInhomNetConSynModels() {
        if (!(isExportSyns && isExportSynInhoms)) {
            return 0
        }
        return inhomAndStochLibrary.isAnyInhomFakeCompModelsForTaps(0)
    }
    
    func isExportedInhomVar() { local varType localobj activeSpecVar
        activeSpecVar = $o1
        if (!activeSpecVar.isInhom) {
            return 0
        }
        varType = activeSpecVar.varLibId.varType
        if (activeSpecVar.isDmOrTapPart) {
            if (!isExportedVar(isExportDistMechs, isExportDistMechInhoms, varType, isExportDistMechAssignedAndState)) {
                return 0
            }
        } else {
            if (activeSpecVar.isGapJuncOrSyn) {
                if (!isExportedVar(isExportGapJuncs, isExportGapJuncInhoms, varType, isExportGapJuncAssignedAndState)) {
                    return 0
                }
            } else {
                if (!isExportedVar(isExportSyns, isExportSynInhoms, varType, isExportSynAssignedAndState)) {
                    return 0
                }
            }
        }
        return 1
    }
    
    func isExportedStochVar() { local varType localobj activeSpecVar
        activeSpecVar = $o1
        if (!activeSpecVar.isStoch) {
            return 0
        }
        varType = activeSpecVar.varLibId.varType
        if (activeSpecVar.isDmOrTapPart) {
            if (!isExportedVar(isExportDistMechs, isExportDistMechStochs, varType, isExportDistMechAssignedAndState)) {
                return 0
            }
        } else {
            if (activeSpecVar.isGapJuncOrSyn) {
                if (!isExportedVar(isExportGapJuncs, isExportGapJuncStochs, varType, isExportGapJuncAssignedAndState)) {
                    return 0
                }
            } else {
                if (!isExportedVar(isExportSyns, isExportSynStochs, varType, isExportSynAssignedAndState)) {
                    return 0
                }
            }
        }
        return 1
    }
    
    func isExportedInhomBiophysVar() { localobj activeSpecVar
        activeSpecVar = $o1
        // 1: "PARAMETER"
        return isExportDistMechs && activeSpecVar.isInhom && activeSpecVar.isDmOrTapPart && (activeSpecVar.varLibId.varType == 1 || isExportDistMechAssignedAndState)
    }
    
    func isExportedStochBiophysVar() { localobj activeSpecVar
        activeSpecVar = $o1
        // 1: "PARAMETER"
        return isExportDistMechs && activeSpecVar.isStoch && activeSpecVar.isDmOrTapPart && (activeSpecVar.varLibId.varType == 1 || isExportDistMechAssignedAndState)
    }
    
    func isExportedInhomGapJuncVar() { local gapJuncSetIdx localobj activeSpecVar
        activeSpecVar = $o1
        gapJuncSetIdx = $2
        // 1: "PARAMETER"
        return isExportGapJuncs && activeSpecVar.isInhom && !activeSpecVar.isDmOrTapPart && activeSpecVar.isGapJuncOrSyn && activeSpecVar.tapSetIdx == gapJuncSetIdx && (activeSpecVar.varLibId.varType == 1 || isExportGapJuncAssignedAndState)
    }
    
    func isExportedStochGapJuncVar() { local gapJuncSetIdx  localobj activeSpecVar
        activeSpecVar = $o1
        gapJuncSetIdx = $2
        // 1: "PARAMETER"
        return isExportGapJuncs && activeSpecVar.isStoch && !activeSpecVar.isDmOrTapPart && activeSpecVar.isGapJuncOrSyn && activeSpecVar.tapSetIdx == gapJuncSetIdx && (activeSpecVar.varLibId.varType == 1 || isExportGapJuncAssignedAndState)
    }
    
    func isExportedInhomSynVar() { local synSetIdx localobj activeSpecVar
        activeSpecVar = $o1
        synSetIdx = $2
        // 1: "PARAMETER"
        return isExportSyns && activeSpecVar.isInhom && !activeSpecVar.isDmOrTapPart && !activeSpecVar.isGapJuncOrSyn && activeSpecVar.tapSetIdx == synSetIdx && (activeSpecVar.varLibId.varType == 1 || isExportSynAssignedAndState)
    }
    
    func isExportedStochSynVar() { local synSetIdx localobj activeSpecVar
        activeSpecVar = $o1
        synSetIdx = $2
        // 1: "PARAMETER"
        return isExportSyns && activeSpecVar.isStoch && !activeSpecVar.isDmOrTapPart && !activeSpecVar.isGapJuncOrSyn && activeSpecVar.tapSetIdx == synSetIdx && (activeSpecVar.varLibId.varType == 1 || isExportSynAssignedAndState)
    }
    
    func isPythonRequired() { local cond1, cond2, cond3, cond4, cond5, cond6, cond7 localobj synSet
        // The exported file will require Python only if we export any inhom/stoch models requiring Python or we export FakeMechanismStandardForNetCon
        cond1 = (isExportDistMechs && isExportDistMechInhoms && inhomAndStochLibrary.doesAnyInhomVarRequirePython(1, -1, isExportDistMechAssignedAndState))
        cond2 = (isExportGapJuncs && isExportGapJuncInhoms && inhomAndStochLibrary.doesAnyInhomVarRequirePython(0, 1, isExportGapJuncAssignedAndState))
        cond3 = (isExportSyns && isExportSynInhoms && inhomAndStochLibrary.doesAnyInhomVarRequirePython(0, 0, isExportSynAssignedAndState))
        cond4 = (isExportDistMechs && isExportDistMechStochs && inhomAndStochLibrary.doesAnyStochVarRequirePython(1, -1, isExportDistMechAssignedAndState))
        cond5 = (isExportGapJuncs && isExportGapJuncStochs && inhomAndStochLibrary.doesAnyStochVarRequirePython(0, 1, isExportGapJuncAssignedAndState))
        cond6 = (isExportSyns && isExportSynStochs && inhomAndStochLibrary.doesAnyStochVarRequirePython(0, 0, isExportSynAssignedAndState))
        cond7 = 0
        if (isExportSyns) {
            for eachItemInList(synSet, smAllSynSets) {
                if (synSet.is3Or1PartInSynStruc()) {
                    cond7 = 1
                    break
                }
            }
        }
        return cond1 || cond2 || cond3 || cond4 || cond5 || cond6 || cond7
    }
    
    func isAnyExposedVars() {
        return (isCreateParamsHoc && isExposeModelVars && exposedVarsList.count() != 0)
    }
    
    func isAnySweptVars() {
        return (isCreateRunnerHoc && isMakeSweepForModelVars && sweptVarsList.count() != 0)
    }
    
    func isAnyWatchedVars() {
        // No need to start with "isCreateRunnerHoc && " as long as this func is called only from py:GensForRunnerHoc
        return (isRecordAndSaveModelVars && watchedVarsList.count() != 0)
    }
    
    func isAnyCustomSweptVars() { local sweptVarIdx, enumBioGjSynCeSt
        if (!isAnySweptVars()) {
            return 0
        }
        for sweptVarIdx = 0, sweptVarsList.count() - 1 {    // Don't replace with "eachItemInList" because we return
            enumBioGjSynCeSt = sweptVarsList.o(sweptVarIdx).enumBioGjSynCeSt
            if (enumBioGjSynCeSt == 3) {
                return 1
            } else if (enumBioGjSynCeSt >= 4) {
                codeContractViolation()
            }
        }
        return 0
    }
    
    // Keep the filtration logic in sync with getFirstValidAPCountOrNil and py:GeneratorsForMainHocFile.createAPCounts
    func isAnyWatchedAPCounts() { local apcIdx localobj apcList
        if (!(isCreateRunnerHoc && isRecordAndSaveModelVars && isRecordAndSaveWithAPCounts)) {
            return 0
        }
        apcList = new List("APCount")
        if (apcList.count() == 0) {
            return 0
        }
        for apcIdx = 0, apcList.count() - 1 {   // Don't replace with "eachItemInList" because we return
            if (apcList.o(apcIdx).has_loc()) {
                return 1
            }
        }
        return 0
    }
    
    // All next staff is private
    
    
    func isExportedVar() { local isExportDMsGJsSyns, isExportInhomsStochs, varType, isExportAssignedAndState
        isExportDMsGJsSyns = $1
        isExportInhomsStochs = $2
        varType = $3
        isExportAssignedAndState = $4
        if (!isExportDMsGJsSyns) {
            return 0
        }
        if (!isExportInhomsStochs) {
            return 0
        }
        if (varType > 1 && !isExportAssignedAndState) {
            return 0
        }
        return 1
    }
    
    func isReleaseProbabilityInExposedOrSweptVars() { local varIdx
        if (isCreateParamsHoc && isExposeModelVars) {
            for varIdx = 0, exposedVarsList.count() - 1 {   // Don't replace with "eachItemInList" because we return
                if (exposedVarsList.o(varIdx).isReleaseProbability()) {
                    return 1
                }
            }
        }
        if (isCreateRunnerHoc && isMakeSweepForModelVars) {
            for varIdx = 0, sweptVarsList.count() - 1 {     // The same comment
                if (sweptVarsList.o(varIdx).isReleaseProbability()) {
                    return 1
                }
            }
        }
        return 0
    }
    
    // Keep the filtration logic in sync with isAnyWatchedAPCounts and py:GeneratorsForMainHocFile.createAPCounts
    obfunc getFirstValidAPCountOrNil() { local apcIdx localobj apcList, apc, nil
        apcList = new List("APCount")
        if (apcList.count() == 0) {
            return nil
        }
        for apcIdx = 0, apcList.count() - 1 {   // Don't replace with "eachItemInList" because we return
            apc = apcList.o(apcIdx)
            if (apc.has_loc()) {
                return apc
            }
        }
        return nil
    }
    
    // out: isCancel
    func confirmProceedingWithout() {
        strdef what, text
        what = $s1
        sprint(text, "Are you sure want to proceed without %s?", what)
        return !boolean_dialog(text, "Yes", "No")
    }
    
endtemplate ExportOptions


objref exportOptions
