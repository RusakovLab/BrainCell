
// !!!! BUG: (astrocyte) user creates some Ext GJs, then adds an Ext GJ var, then removes all Ext GJs and creates some Int GJs, then tries to correct the old added var => error
//           (neuron) similar error when user adds a NetCon var, then switches to NetCon-less synapses, then tries to correct the old added var
// !!!! BUG: (astrocyte) user removes all GJs (both Ext and Int) and opens this widget => error

begintemplate AddOneInputVarWidget

    public show, dismissHandler
    
    external mwh, mth, compUtils, mechsDllUtils
    external isAstrocyteOrNeuron, gapJuncGroups, gjmAllGapJuncs, synGroup
    external stringEmpty, createEmptyPanel, createMetaVarHint, findItemInListByStringAndSelect, unmapIfNotNil, codeContractViolation
    external enumGapJuncCompIdxs, enumSynCompIdxs
    external pyObj
    
    objref mainBox, deck
    objref parentWidget
    objref compList, mechList, varTypeList, varNameWithIndexList
    
    isExposedOrSwept = -1
    
    isDmOrTapPart = -1
    
    selCompIdx = -1
    selMechIdx = -1
    selVarType = -1
    selVarNameWithIndexIdx = -1
    
    enumHomInhomStoch = -1
    
    isAddOrCorrect = -1
    
    // Used only if isAddOrCorrect == 0
    objref oldListItem
    oldVarIdx = -1
    isRecallMode = -1
    
    
    proc init() { local aoivWidIdx
        isExposedOrSwept = $1
        aoivWidIdx = $2
        parentWidget = $o3
        
        isDmOrTapPart = 1 - aoivWidIdx
        
        compList = new List()
        mechList = new List()
        varTypeList = new List()
        varNameWithIndexList = new List()
        
        selCompIdx = -2
        selMechIdx = -1
        selVarType = -2
        selVarNameWithIndexIdx = -1
        
        enumHomInhomStoch = 0
    }
    
    proc show() { local numArg, compIdx localobj nil, hBox
        strdef compText, mechText
        
        numArg = numarg()
        if (numArg == 0) {
            isAddOrCorrect = 1
            oldListItem = nil
            oldVarIdx = -1
        } else if (numArg == 2) {
            isAddOrCorrect = 0
            oldListItem = $o1
            oldVarIdx = $2
        } else {
            codeContractViolation()
        }
        
        populateCompList()
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            xlabel("Show only:")
            xradiobutton("Homogen vars", "whatToShowChangedHandler(0)", enumHomInhomStoch == 0)
            xradiobutton("Inhom models", "whatToShowChangedHandler(1)", enumHomInhomStoch == 1)
            xradiobutton("Stoch models", "whatToShowChangedHandler(2)", enumHomInhomStoch == 2)
            xpanel()
            hBox = new HBox()
            hBox.intercept(1)
            {
                if (isDmOrTapPart) {
                    compText = "Compartment"
                    mechText = "Mechanism"
                } else {
                    if (isAstrocyteOrNeuron) {
                        compText = "Gap junction type"
                        mechText = "PP or Stub"
                    } else {
                        compText = "Synapse part"
                        mechText = "PP or NetCon"
                    }
                }
                showOneList(compText, compList, "compSelectHandler")
                showOneList(mechText, mechList, "mechSelectHandler")
                showOneList("Variable type", varTypeList, "varTypeSelectHandler")
                showOneList("Variable", varNameWithIndexList, "varNameWithIndexSelectHandler")
                varNameWithIndexList.accept_action("selectHandler()")   // Double click
            }
            hBox.intercept(0)
            hBox.map()
            deck = new Deck()
            deck.intercept(1)
            {
                createEmptyPanel()
                xpanel("")
                xlabel("* Only inter-comp-homogen non-stoch vars are shown.")
                xpanel()
                xpanel("")
                createMetaVarHint()
                xpanel()
            }
            deck.intercept(0)
            // deck.flip_to(*)      // Will be done below in compSelectHandler
            deck.map()
            xpanel("")
            xbutton("Select", "selectHandler()")
            xpanel()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("One variable", 160, 200, -1, -1)
        
        if (isAddOrCorrect) {
            compIdx = 0
        } else {
            compIdx = oldListItem.compIdx
        }
        compList.select(compIdx)
        isRecallMode = !isAddOrCorrect
        {
            compSelectHandler(compIdx)
        }
        isRecallMode = 0
    }
    
    proc dismissHandler() {
        unmapIfNotNil(mainBox)
    }
    
    // All next staff is private
    
    
    proc populateCompList() { local numComps, compIdx localobj comp
        strdef actPpName
        
        compList.remove_all()
        
        if (isDmOrTapPart) {
            numComps = compUtils.getNumDistMechComps()
            for compIdx = 0, numComps - 1 {
                comp = compUtils.getComp(1, compIdx)
                compList.append(new ItemOfFilteredBrowsedList(compIdx, comp.name))
            }
            compList.append(new ItemOfFilteredBrowsedList(-1, "@All"))
        } else {
            if (isAstrocyteOrNeuron) {
                if (gjmAllGapJuncs[1].count() != 0) {   // External GJs
                    addOneTapCompToList(enumGapJuncCompIdxs.extGjPp)
                    gapJuncGroups[1].getPpNameOrEmpty(actPpName)
                    if (stringEmpty(actPpName)) {
                        codeContractViolation()
                    }
                    if (pyObj.ms_doesGapJuncHavePtr(actPpName)) {
                        addOneTapCompToList(enumGapJuncCompIdxs.extGjExtValue)
                    }
                }
                if (gjmAllGapJuncs[0].count() != 0) {   // Internal GJs
                    addOneTapCompToList(enumGapJuncCompIdxs.intGjPp)
                }
            } else {
                if (synGroup.is3Or1PartInSynStruc()) {
                    addOneTapCompToList(enumSynCompIdxs.srcPp)
                    addOneTapCompToList(enumSynCompIdxs.netCon)
                    addOneTapCompToList(enumSynCompIdxs.trgPp)
                } else {
                    addOneTapCompToList(enumSynCompIdxs.sngPp)
                }
            }
        }
    }
    
    proc addOneTapCompToList() { local tapCompIdx localobj comp
        tapCompIdx = $1
        comp = compUtils.getComp(isDmOrTapPart, tapCompIdx)
        compList.append(new ItemOfFilteredBrowsedList(tapCompIdx, comp.name))
    }
    
    proc showOneList() { localobj list, vBox
        strdef header, command
        
        header = $s1
        list = $o2
        command = $s3
        
        vBox = new VBox()
        vBox.intercept(1)
        {
            xpanel("")
            sprint(header, "%s:", header)
            xlabel(header)
            xpanel()
            sprint(command, "%s(hoc_ac_)", command)
            list.browser("", "s")
            list.select_action(command)
        }
        vBox.intercept(0)
        vBox.map()
    }
    
    proc whatToShowChangedHandler() {
        enumHomInhomStoch = $1
        if (enumHomInhomStoch != 0) {
            mwh.showNotImplementedWarning()
        }
    }
    
    proc compSelectHandler() { local compListIdx, isAll, enumDmPpFk, numMechs, mechIdx, mechListIdx localobj comp
        strdef mechName
        
        compListIdx = $1
        
        mechList.remove_all()   // This calls mechSelectHandler(-1) as a side effect
        
        if (compListIdx == -1) {
            // We are called on compList.remove_all() when user opens this widget again
            selCompIdx = -2
            return
        }
        
        selCompIdx = compList.o(compListIdx).idx
        
        isAll = (selCompIdx == -1)
        deck.flip_to(isAll)
        if (isAll) {
            mwh.showNotImplementedWarning()
            varTypeList.remove_all()
            varNameWithIndexList.remove_all()
            selMechIdx = -1
            selVarType = -2
            selVarNameWithIndexIdx = -1
            return
        }
        
        comp = compUtils.getComp(isDmOrTapPart, selCompIdx)
        
        // Populate mechList
        if (isDmOrTapPart) {
            enumDmPpFk = 0
            
            numMechs = mth.getNumMechs(enumDmPpFk)
            for mechIdx = 0, numMechs - 1 {
                mth.getMechName(enumDmPpFk, mechIdx, mechName)
                if (mechsDllUtils.isThisMechForIntUseOnly(mechName)) {
                    continue
                }
                if (!comp.isMechInserted[mechIdx]) {
                    continue
                }
                mechList.append(new ItemOfFilteredBrowsedList(mechIdx, mechName))
            }
        } else {
            if (isAstrocyteOrNeuron) {
                if (selCompIdx == enumGapJuncCompIdxs.extGjExtValue) {
                    enumDmPpFk = 2
                    mechIdx = 0
                    comp.mechStds[mechIdx][0].name(mechName)
                } else {
                    enumDmPpFk = 1
                    mechIdx = gapJuncGroups[comp.isExtOrInt].getMechIdxAndOptionalName(mechName)
                }
            } else {
                if (selCompIdx == enumSynCompIdxs.netCon) {
                    enumDmPpFk = 2
                    mechIdx = 0
                    comp.mechStds[mechIdx][0].name(mechName)
                    deck.flip_to(2)
                } else {
                    enumDmPpFk = 1
                    mechIdx = synGroup.getMechIdxAndOptionalName(comp.enumPpRole, mechName)
                }
            }
            mechList.append(new ItemOfFilteredBrowsedList(mechIdx, mechName))
        }
        
        // Select an item in mechList
        if (!isRecallMode) {
            if (isDmOrTapPart) {
                if (numMechs != 0) {
                    mechListIdx = 0
                    mechList.select(mechListIdx)
                    selMechIdx = mechList.o(mechListIdx).idx
                } else {
                    mechListIdx = -1
                    selMechIdx = -1
                }
            } else {
                mechListIdx = 0
                selMechIdx = mechIdx
            }
        } else {
            selMechIdx = oldListItem.mechIdx
            mth.getMechName(enumDmPpFk, selMechIdx, mechName)
            mechListIdx = findItemInListByStringAndSelect(mechList, mechName)
        }
        
        mechSelectHandler(mechListIdx)
    }
    
    proc mechSelectHandler() { local mechListIdx, enumDmPpFk, varType, numVarTypes, varTypeListIdx localobj comp
        strdef varTypeName
        
        mechListIdx = $1
        
        varTypeList.remove_all()    // This calls varTypeSelectHandler(-1) as a side effect
        
        if (mechListIdx == -1) {
            selMechIdx = -1
            return
        }
        
        selMechIdx = mechList.o(mechListIdx).idx
        
        comp = compUtils.getComp(isDmOrTapPart, selCompIdx)
        enumDmPpFk = comp.enumDmPpFk
        
        // Populate varTypeList
        varType = -1    // GLOBAL
        if (mth.doesMechHaveGlobalVars(enumDmPpFk, selMechIdx)) {
            addItemToVarTypeList(varType)
        }
        varType = 1     // PARAMETER
        if (mth.getNumMechVars(enumDmPpFk, selMechIdx, varType) != 0) {
            addItemToVarTypeList(varType)
        }
        
        // Select an item in varTypeList
        if (!isRecallMode) {
            numVarTypes = varTypeList.count()
            if (numVarTypes != 0) {
                varTypeListIdx = 0
                varTypeList.select(varTypeListIdx)
                selVarType = varTypeList.o(varTypeListIdx).idx
            } else {
                varTypeListIdx = -1
                selVarType = -2
            }
        } else {
            selVarType = oldListItem.varType
            mth.getVarTypeName(selVarType, varTypeName)
            varTypeListIdx = findItemInListByStringAndSelect(varTypeList, varTypeName)
        }
        
        varTypeSelectHandler(varTypeListIdx)
    }
    
    proc varTypeSelectHandler() { local varTypeListIdx, enumDmPpFk, numVars, numInhomVars, varIdx, arraySize, arrayIndex localobj comp
        strdef varName, varNameWithIndex
        
        varTypeListIdx = $1
        
        varNameWithIndexList.remove_all()   // This calls varNameWithIndexSelectHandler(-1) as a side effect
        
        if (varTypeListIdx == -1) {
            selVarType = -2
            return
        }
        
        selVarType = varTypeList.o(varTypeListIdx).idx
        
        comp = compUtils.getComp(isDmOrTapPart, selCompIdx)
        enumDmPpFk = comp.enumDmPpFk
        
        // Populate varNameWithIndexList
        numVars = mth.getNumMechVars(enumDmPpFk, selMechIdx, selVarType)
        numInhomVars = 0
        for varIdx = 0, numVars - 1 {
            arraySize = mth.getVarNameAndArraySize(enumDmPpFk, selMechIdx, selVarType, varIdx, varName)
            for arrayIndex = 0, arraySize - 1 {
                if (enumHomInhomStoch == 0 && !comp.isMechVarInhom(selMechIdx, selVarType, varName, arrayIndex)) {
                    varNameWithIndexList.append(new WatchedOutputVar(varName, arraySize, arrayIndex))
                } else {
                    numInhomVars += 1
                }
            }
        }
        numVars -= numInhomVars
        
        // Select an item in varNameWithIndexList
        if (!isRecallMode) {
            if (numVars != 0) {
                selVarNameWithIndexIdx = 0
                varNameWithIndexList.select(selVarNameWithIndexIdx)
            } else {
                selVarNameWithIndexIdx = -1
            }
        } else {
            varNameWithIndex = oldListItem.varNameWithIndex
            selVarNameWithIndexIdx = findItemInListByStringAndSelect(varNameWithIndexList, varNameWithIndex)
        }
        
        varNameWithIndexSelectHandler(selVarNameWithIndexIdx)
    }
    
    proc varNameWithIndexSelectHandler() {
        selVarNameWithIndexIdx = $1
    }
    
    proc selectHandler() { local enumDmTpCeSt, isUnique localobj itemOfVarsList, newItem
        if (selVarNameWithIndexIdx == -1) {
            mwh.showWarningBox("Please select a variable.")
            return
        }
        
        itemOfVarsList = varNameWithIndexList.o(selVarNameWithIndexIdx)
        
        enumDmTpCeSt = 1 - isDmOrTapPart
        newItem = new ExposedOrSweptInputVar(isExposedOrSwept, enumDmTpCeSt, selCompIdx, selMechIdx, selVarType, itemOfVarsList.varName, itemOfVarsList.arraySize, itemOfVarsList.arrayIndex)
        
        if (isAddOrCorrect) {
            isUnique = parentWidget.onVarAddHandler(newItem)
        } else {
            isUnique = parentWidget.onVarCorrectHandler(newItem, oldVarIdx)
        }
        
        if (!isUnique) {
            return
        }
        
        dismissHandler()
    }
    
    proc addItemToVarTypeList() { local varType
        strdef varTypeName
        varType = $1
        mth.getVarTypeName(varType, varTypeName)
        varTypeList.append(new ItemOfFilteredBrowsedList(varType, varTypeName))
    }
    
endtemplate AddOneInputVarWidget
