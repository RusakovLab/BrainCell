
// !!! BUG: the vars selected with this widget become inconsistent easily once user modifies the cell after selecting a var,
//          e.g. any of these operations makes the var inconsistent and leads to errors not only during the export,
//          but also when user tries to correct the old selected var:
//              * merging or renaming biophys comps
//              * uninserting biophys mechs
//              * deleting gap junc sets
//              * switching tap set type (between ext/int for gap juncs and NetCon-based/less for syns)
//              * choosing other PPs for taps
//              * making vars homogen/inhom/stoch
//              etc.

begintemplate AddOneInputVarWidget

    public show, dismissHandler
    
    external mwh, mth, compUtils, mechsDllUtils, utils4FakeMech4GapJuncExtValue, utils4FakeMech4SynNetCon
    external stringEmpty, createEmptyPanel, createMetaVarHint, findItemInListByStringAndSelect, unmapIfNotNil, codeContractViolation
    external gjmAllGapJuncSets, smAllSynSets
    external enumGapJuncCompIdxs, enumSynCompIdxs
    external pyObj
    
    objref mainBox, deck
    objref parentWidget
    objref compList, mechList, varTypeList, varNameWithIndexList
    
    isExposedOrSwept = -1
    
    enumBioGjSyn = -1
    isBioOrTapPart = -1
    
    isGapJuncOrSyn = -1                             // For taps only
    objref xmAllTapSets, selGapJuncSet, selSynSet   //
    
    selTapSetIdx = -1                               //
    
    selCompIdx = -1
    selMechIdx = -1
    selVarType = -1
    selVarNameWithIndexIdx = -1
    
    enumHomInhomStoch = -1
    
    isAddOrCorrect = -1
    
    // Used only if isAddOrCorrect == 0
    objref oldListItem
    oldVarIdx = -1
    isRecallMode = -1
    
    
    proc init() { local aoivWidIdx
        isExposedOrSwept = $1
        aoivWidIdx = $2
        parentWidget = $o3
        
        enumBioGjSyn = aoivWidIdx
        
        // !!! code dup. with ExposedOrSweptInputVar ctor
        if (enumBioGjSyn == 0) {
            isBioOrTapPart = 1
            isGapJuncOrSyn = -1
            selTapSetIdx = -1
        } else if (enumBioGjSyn == 1) {
            isBioOrTapPart = 0
            isGapJuncOrSyn = 1
        } else if (enumBioGjSyn == 2) {
            isBioOrTapPart = 0
            isGapJuncOrSyn = 0
        } else {
            codeContractViolation()
        }
        
        compList = new List()
        mechList = new List()
        varTypeList = new List()
        varNameWithIndexList = new List()
        
        selCompIdx = -2
        selMechIdx = -1
        selVarType = -2
        selVarNameWithIndexIdx = -1
        
        enumHomInhomStoch = 0
    }
    
    proc show() { local numArg, tapSetIdx, compListIdx localobj hBox, nil
        strdef what, msg, tapSetHeader, compHeader, mechHeader
        
        numArg = numarg()
        if (numArg == 0) {
            isAddOrCorrect = 1
            oldListItem = nil
            oldVarIdx = -1
        } else if (numArg == 2) {
            isAddOrCorrect = 0
            oldListItem = $o1
            oldVarIdx = $2
        } else {
            codeContractViolation()
        }
        
        if (!isBioOrTapPart) {
            if (isGapJuncOrSyn) {
                what = "gap junctions"
                xmAllTapSets = gjmAllGapJuncSets
            } else {
                what = "synapses"
                xmAllTapSets = smAllSynSets
            }
            if (xmAllTapSets.count() == 0) {
                sprint(msg, "At least one set of %s is required.", what)
                mwh.showWarningBox(msg)
                return
            }
            if (isAddOrCorrect) {
                tapSetIdx = 0
            } else {
                tapSetIdx = oldListItem.tapSetIdx
            }
            cacheTapSet(tapSetIdx)
        }
        
        populateCompList()
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            if (isBioOrTapPart) {
                createShowOnlyPanel()
            } else {
                hBox = new HBox()
                hBox.intercept(1)
                {
                    createShowOnlyPanel()
                    
                    if (isGapJuncOrSyn) {
                        what = "Gap junc"
                    } else {
                        what = "Synapse"
                    }
                    sprint(tapSetHeader, "%s set", what)
                    
                    showOneList(tapSetHeader, xmAllTapSets, "tapSetSelectHandler")
                }
                hBox.intercept(0)
                hBox.map()
            }
            hBox = new HBox()
            hBox.intercept(1)
            {
                if (enumBioGjSyn == 0) {
                    compHeader = "Compartment"
                    mechHeader = "Mechanism"
                } else if (enumBioGjSyn == 1) {
                    compHeader = "Gap junction type"
                    mechHeader = "PP or Stub"
                } else if (enumBioGjSyn == 2) {
                    compHeader = "Synapse part"
                    mechHeader = "PP or NetCon"
                } else {
                    codeContractViolation()
                }
                
                showOneList(compHeader, compList, "compSelectHandler")
                showOneList(mechHeader, mechList, "mechSelectHandler")
                showOneList("Variable type", varTypeList, "varTypeSelectHandler")
                showOneList("Variable", varNameWithIndexList, "varNameWithIndexSelectHandler")
                varNameWithIndexList.accept_action("selectHandler()")   // Double click
            }
            hBox.intercept(0)
            hBox.map()
            deck = new Deck()
            deck.intercept(1)
            {
                createEmptyPanel()
                xpanel("")
                xlabel("* Only inter-comp-homogen non-stoch vars are shown.")
                xpanel()
                xpanel("")
                createMetaVarHint()
                xpanel()
            }
            deck.intercept(0)
            // deck.flip_to(*)      // Will be done below in compSelectHandler
            deck.map()
            xpanel("")
            xbutton("Select", "selectHandler()")
            xpanel()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("One variable", 160, 200, -1, -1)
        
        if (!isBioOrTapPart) {
            xmAllTapSets.select(tapSetIdx)
            selTapSetIdx = tapSetIdx
            tapSetSelectHandlerCore()
        }
        
        if (isAddOrCorrect) {
            compListIdx = 0
        } else {
            compListIdx = compIdxToCompListIdx(oldListItem.compIdx)
        }
        compList.select(compListIdx)
        isRecallMode = !isAddOrCorrect
        {
            compSelectHandler(compListIdx)
        }
        isRecallMode = 0
    }
    
    proc dismissHandler() { localobj nil
        unmapIfNotNil(mainBox)
        
        if (!isBioOrTapPart) {
            selGapJuncSet = nil
            selSynSet = nil
            xmAllTapSets = nil
        }
    }
    
    // All next staff is private
    
    
    proc createShowOnlyPanel() {
        xpanel("")
        xlabel("Show only:")
        xradiobutton("Homogen vars", "whatToShowChangedHandler(0)", enumHomInhomStoch == 0)
        xradiobutton("Inhom models", "whatToShowChangedHandler(1)", enumHomInhomStoch == 1)
        xradiobutton("Stoch models", "whatToShowChangedHandler(2)", enumHomInhomStoch == 2)
        xpanel()
    }
    
    // Keep in sync with func compIdxToCompListIdx
    proc populateCompList() { local numComps, compIdx localobj comp, nil
        strdef actPpName
        
        compList.remove_all()
        
        if (enumBioGjSyn == 0) {
            numComps = compUtils.getNumDistMechComps()
            for compIdx = 0, numComps - 1 {
                comp = compUtils.getComp(1, compIdx)
                compList.append(new ItemOfFilteredBrowsedList(compIdx, comp.name))
            }
            compList.append(new ItemOfFilteredBrowsedList(-1, "@All"))
        } else if (enumBioGjSyn == 1) {
            if (selGapJuncSet != nil) {                         // Don't combine into one IF
                if (selGapJuncSet.allGapJuncs.count() != 0) {   //
                    if (selGapJuncSet.isExtOrInt) {
                        addOneTapCompToList(enumGapJuncCompIdxs.extGjPp)
                        selGapJuncSet.getPpNameOrEmpty(actPpName)
                        if (stringEmpty(actPpName)) {
                            codeContractViolation()
                        }
                        if (pyObj.ms_doesGapJuncHavePtr(actPpName)) {
                            addOneTapCompToList(enumGapJuncCompIdxs.extGjExtValue)
                        }
                    } else {
                        addOneTapCompToList(enumGapJuncCompIdxs.intGjPp)
                    }
                }
            }
        } else if (enumBioGjSyn == 2) {
            if (selSynSet != nil) {                             // Don't combine into one IF
                if (selSynSet.allSyns.count() != 0) {           //
                    if (selSynSet.is3Or1PartInSynStruc()) {
                        addOneTapCompToList(enumSynCompIdxs.srcPp)
                        addOneTapCompToList(enumSynCompIdxs.netCon)
                        addOneTapCompToList(enumSynCompIdxs.trgPp)
                    } else {
                        addOneTapCompToList(enumSynCompIdxs.sngPp)
                    }
                }
            }
        } else {
            codeContractViolation()
        }
    }
    
    // Keep in sync with proc populateCompList
    func compIdxToCompListIdx() { local compIdx, compListIdx
        compIdx = $1
        if (enumBioGjSyn == 0) {
            compListIdx = compIdx
        } else if (enumBioGjSyn == 1) {
            if (selGapJuncSet.isExtOrInt) {
                compListIdx = compIdx
            } else {
                compListIdx = compIdx - 2
            }
        } else if (enumBioGjSyn == 2) {
            if (selSynSet.is3Or1PartInSynStruc()) {
                compListIdx = compIdx
            } else {
                compListIdx = compIdx - 3
            }
        } else {
            codeContractViolation()
        }
        return compListIdx
    }
    
    proc addOneTapCompToList() { local tapCompIdx localobj comp
        tapCompIdx = $1
        comp = compUtils.getComp(0, isGapJuncOrSyn, selTapSetIdx, tapCompIdx)
        compList.append(new ItemOfFilteredBrowsedList(tapCompIdx, comp.name))
    }
    
    proc showOneList() { localobj list, vBox
        strdef header, command
        
        header = $s1
        list = $o2
        command = $s3
        
        vBox = new VBox()
        vBox.intercept(1)
        {
            xpanel("")
            sprint(header, "%s:", header)
            xlabel(header)
            xpanel()
            sprint(command, "%s(hoc_ac_)", command)
            list.browser("", "s")
            list.select_action(command)
        }
        vBox.intercept(0)
        vBox.map()
    }
    
    proc whatToShowChangedHandler() {
        enumHomInhomStoch = $1
        if (enumHomInhomStoch != 0) {
            mwh.showNotImplementedWarning()
        }
    }
    
    proc tapSetSelectHandler() { local compListIdx localobj nil
        
        selTapSetIdx = $1
        
        if (selTapSetIdx != -1) {
            tapSetSelectHandlerCore()
            populateCompList()
            compListIdx = 0
            compList.select(compListIdx)
            compSelectHandler(compListIdx)
        } else {
            selGapJuncSet = nil
            selSynSet = nil
            populateCompList()
        }
    }
    
    proc tapSetSelectHandlerCore() {
        cacheTapSet(selTapSetIdx)
        if (isGapJuncOrSyn) {
            utils4FakeMech4GapJuncExtValue.setNewVarIfNeeded(selGapJuncSet)
        }
    }
    
    proc cacheTapSet() {
        selTapSetIdx = $1
        
        if (isBioOrTapPart) {
            codeContractViolation()
        }
        
        if (isGapJuncOrSyn) {
            selGapJuncSet = gjmAllGapJuncSets.o(selTapSetIdx)
        } else {
            selSynSet = smAllSynSets.o(selTapSetIdx)
        }
    }
    
    proc compSelectHandler() { local compListIdx, isAll, enumDmPpFk, numMechs, mechIdx, mechListIdx localobj comp
        strdef mechName
        
        compListIdx = $1
        
        mechList.remove_all()   // This calls mechSelectHandler(-1) as a side effect
        
        if (compListIdx == -1) {
            // We are called on compList.remove_all() when user opens this widget again
            selCompIdx = -2
            return
        }
        
        selCompIdx = compList.o(compListIdx).idx
        
        isAll = (selCompIdx == -1)
        deck.flip_to(isAll)
        if (isAll) {
            mwh.showNotImplementedWarning()
            varTypeList.remove_all()
            varNameWithIndexList.remove_all()
            selMechIdx = -1
            selVarType = -2
            selVarNameWithIndexIdx = -1
            return
        }
        
        comp = compUtils.getComp(enumBioGjSyn, selTapSetIdx, selCompIdx)
        
        // Populate mechList
        if (isBioOrTapPart) {
            enumDmPpFk = 0
            
            numMechs = mth.getNumMechs(enumDmPpFk)
            for mechIdx = 0, numMechs - 1 {
                mth.getMechName(enumDmPpFk, mechIdx, mechName)
                if (mechsDllUtils.isThisMechForIntUseOnly(mechName)) {
                    continue
                }
                if (!comp.isMechInserted[mechIdx]) {
                    continue
                }
                mechList.append(new ItemOfFilteredBrowsedList(mechIdx, mechName))
            }
        } else {
            if (isGapJuncOrSyn) {
                if (selCompIdx == enumGapJuncCompIdxs.extGjExtValue) {
                    enumDmPpFk = 2
                    mechIdx = utils4FakeMech4GapJuncExtValue.mechIdx
                    comp.mechStds[mechIdx][0].name(mechName)
                } else {
                    enumDmPpFk = 1
                    mechIdx = selGapJuncSet.getMechIdxAndOptionalName(mechName)
                }
            } else {
                if (selCompIdx == enumSynCompIdxs.netCon) {
                    enumDmPpFk = 2
                    mechIdx = utils4FakeMech4SynNetCon.mechIdx
                    comp.mechStds[mechIdx][0].name(mechName)
                    deck.flip_to(2)
                } else {
                    enumDmPpFk = 1
                    mechIdx = selSynSet.getMechIdxAndOptionalName(comp.enumPpRole, mechName)
                }
            }
            mechList.append(new ItemOfFilteredBrowsedList(mechIdx, mechName))
        }
        
        // Select an item in mechList
        if (!isRecallMode) {
            if (isBioOrTapPart) {
                if (numMechs != 0) {
                    mechListIdx = 0
                    mechList.select(mechListIdx)
                    selMechIdx = mechList.o(mechListIdx).idx
                } else {
                    mechListIdx = -1
                    selMechIdx = -1
                }
            } else {
                mechListIdx = 0
                selMechIdx = mechIdx
            }
        } else {
            selMechIdx = oldListItem.mechIdx
            mth.getMechName(enumDmPpFk, selMechIdx, mechName)
            mechListIdx = findItemInListByStringAndSelect(mechList, mechName)
        }
        
        mechSelectHandler(mechListIdx)
    }
    
    proc mechSelectHandler() { local mechListIdx, enumDmPpFk, varType, numVarTypes, varTypeListIdx localobj comp
        strdef varTypeName
        
        mechListIdx = $1
        
        varTypeList.remove_all()    // This calls varTypeSelectHandler(-1) as a side effect
        
        if (mechListIdx == -1) {
            selMechIdx = -1
            return
        }
        
        selMechIdx = mechList.o(mechListIdx).idx
        
        comp = compUtils.getComp(enumBioGjSyn, selTapSetIdx, selCompIdx)
        enumDmPpFk = comp.enumDmPpFk
        
        // Populate varTypeList
        varType = -1    // GLOBAL
        if (mth.doesMechHaveGlobalVars(enumDmPpFk, selMechIdx)) {
            addItemToVarTypeList(varType)
        }
        varType = 1     // PARAMETER
        if (mth.getNumMechVars(enumDmPpFk, selMechIdx, varType) != 0) {
            addItemToVarTypeList(varType)
        }
        
        // Select an item in varTypeList
        if (!isRecallMode) {
            numVarTypes = varTypeList.count()
            if (numVarTypes != 0) {
                varTypeListIdx = 0
                varTypeList.select(varTypeListIdx)
                selVarType = varTypeList.o(varTypeListIdx).idx
            } else {
                varTypeListIdx = -1
                selVarType = -2
            }
        } else {
            selVarType = oldListItem.varType
            mth.getVarTypeName(selVarType, varTypeName)
            varTypeListIdx = findItemInListByStringAndSelect(varTypeList, varTypeName)
        }
        
        varTypeSelectHandler(varTypeListIdx)
    }
    
    proc varTypeSelectHandler() { local varTypeListIdx, enumDmPpFk, numVars, numInhomVars, varIdx, arraySize, arrayIndex localobj comp
        strdef varName, varNameWithIndex
        
        varTypeListIdx = $1
        
        varNameWithIndexList.remove_all()   // This calls varNameWithIndexSelectHandler(-1) as a side effect
        
        if (varTypeListIdx == -1) {
            selVarType = -2
            return
        }
        
        selVarType = varTypeList.o(varTypeListIdx).idx
        
        comp = compUtils.getComp(enumBioGjSyn, selTapSetIdx, selCompIdx)
        enumDmPpFk = comp.enumDmPpFk
        
        // Populate varNameWithIndexList
        numVars = mth.getNumMechVars(enumDmPpFk, selMechIdx, selVarType)
        numInhomVars = 0
        for varIdx = 0, numVars - 1 {
            arraySize = mth.getVarNameAndArraySize(enumDmPpFk, selMechIdx, selVarType, varIdx, varName)
            for arrayIndex = 0, arraySize - 1 {
                if (enumHomInhomStoch == 0 && !comp.isMechVarInhom(selMechIdx, selVarType, varName, arrayIndex)) {
                    varNameWithIndexList.append(new WatchedOutputVar(varName, arraySize, arrayIndex))
                } else {
                    numInhomVars += 1
                }
            }
        }
        numVars -= numInhomVars
        
        // Select an item in varNameWithIndexList
        if (!isRecallMode) {
            if (numVars != 0) {
                selVarNameWithIndexIdx = 0
                varNameWithIndexList.select(selVarNameWithIndexIdx)
            } else {
                selVarNameWithIndexIdx = -1
            }
        } else {
            varNameWithIndex = oldListItem.varNameWithIndex
            selVarNameWithIndexIdx = findItemInListByStringAndSelect(varNameWithIndexList, varNameWithIndex)
        }
        
        varNameWithIndexSelectHandler(selVarNameWithIndexIdx)
    }
    
    proc varNameWithIndexSelectHandler() {
        selVarNameWithIndexIdx = $1
    }
    
    proc selectHandler() { local enumBioGjSynCeSt, isUnique localobj itemOfVarsList, newItem
        if (selVarNameWithIndexIdx == -1) {
            mwh.showWarningBox("Please select a variable.")
            return
        }
        
        itemOfVarsList = varNameWithIndexList.o(selVarNameWithIndexIdx)
        
        enumBioGjSynCeSt = enumBioGjSyn
        newItem = new ExposedOrSweptInputVar(isExposedOrSwept, enumBioGjSynCeSt, selTapSetIdx, selCompIdx, selMechIdx, selVarType, itemOfVarsList.varName, itemOfVarsList.arraySize, itemOfVarsList.arrayIndex)
        
        if (isAddOrCorrect) {
            isUnique = parentWidget.onVarAddHandler(newItem)
        } else {
            isUnique = parentWidget.onVarCorrectHandler(newItem, oldVarIdx)
        }
        
        if (!isUnique) {
            return
        }
        
        dismissHandler()
    }
    
    proc addItemToVarTypeList() { local varType
        strdef varTypeName
        varType = $1
        mth.getVarTypeName(varType, varTypeName)
        varTypeList.append(new ItemOfFilteredBrowsedList(varType, varTypeName))
    }
    
endtemplate AddOneInputVarWidget
