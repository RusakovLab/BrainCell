
begintemplate ReducedInhomAndStochLibrary

    public onInhomCreate, onStochApply, applyAllBiophysInhomModels, applyAllInhomModelsInTheTapSet, isAnyStochVarsForSynsInTheSet, isAnyStochVars
    public activeSpecVars
    
    external eachItemInList
    external codeContractViolation
    
    objref activeSpecVars
    
    
    proc init() {
        activeSpecVars = new List()
    }
    
    // in: varLibId, segmentationHelper, distFuncHelper, distFuncCatIdx, distFuncIdx
    proc onInhomCreate() { localobj actSpecVar
        actSpecVar = createActiveSpecVar($o1)
        actSpecVar.makeInhom($o2, $o3, $4, $5)
    }
    
    // in: varLibId, boundingHelper, stochFuncHelper, stochFuncCatIdx, stochFuncIdx
    proc onStochApply() { localobj actSpecVar
        actSpecVar = findOrCreateActiveSpecVar($o1)
        actSpecVar.makeStoch($o2, $o3, $4, $5)
    }
    
    proc applyAllBiophysInhomModels() { localobj actSpecVar
        for eachItemInList(actSpecVar, activeSpecVars) {
            if (!actSpecVar.isDmOrTapPart || !actSpecVar.isInhom || actSpecVar.isStoch) {
                codeContractViolation()
            }
            actSpecVar.applyBiophysInhomogeneity()
        }
    }
    
    // !!!!! think about replacing this proc with "applyAllInhomModelsInAllTapSets" (no args, called once just before "Cleanup" paragraph)
    proc applyAllInhomModelsInTheTapSet() { local isGapJuncOrSyn, tapSetIdx localobj actSpecVar
        isGapJuncOrSyn = $1
        tapSetIdx = $2
        for eachItemInList(actSpecVar, activeSpecVars) {
            if (actSpecVar.isDmOrTapPart || !actSpecVar.isInhom || actSpecVar.isGapJuncOrSyn != isGapJuncOrSyn || actSpecVar.tapSetIdx != tapSetIdx) {
                continue
            }
            actSpecVar.applyTapInhomogeneity()
        }
    }
    
    func isAnyStochVarsForSynsInTheSet() { local isFound localobj seh, actSpecVar
        seh = $o1
        isFound = 0
        for eachItemInList(actSpecVar, activeSpecVars) {
            if (actSpecVar.seh != seh) {
                continue    // Bio, gap junc, syn (different set)
            }
            if (actSpecVar.isStoch) {
                // Don't replace with "return 1" because iterators cannot return a value (Segmentation violation)
                isFound = 1
                break
            }
        }
        return isFound
    }
    
    func isAnyStochVars() { local idx
        for idx = 0, activeSpecVars.count() - 1 {
            if (activeSpecVars.o(idx).isStoch) {
                return 1
            }
        }
        return 0
    }
    
    // All next staff is private
    
    
    // in: varLibId
    // out: actSpecVar
    obfunc createActiveSpecVar() { localobj actSpecVar
        actSpecVar = new ReducedInhomAndStochTarget($o1)
        activeSpecVars.append(actSpecVar)
        return actSpecVar
    }
    
    // in: varLibId
    // out: actSpecVar
    obfunc findOrCreateActiveSpecVar() { local idx localobj actSpecVar
        // Not many activeSpecVars-s, so hashless comparison works just fine
        for idx = 0, activeSpecVars.count() - 1 {
            actSpecVar = activeSpecVars.o(idx)
            if (actSpecVar.isEqual($o1)) {
                return actSpecVar
            }
        }
        return createActiveSpecVar($o1)
    }
    
endtemplate ReducedInhomAndStochLibrary

objref inhomAndStochLibrary
inhomAndStochLibrary = new ReducedInhomAndStochLibrary()
