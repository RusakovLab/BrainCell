
begintemplate ReducedSynPPComp

    public name, enumDmPpFk, enumPpRole, mechIdx, mechStds
    public applyInhomogeneity
    
    external tapGroup, smAllSyns
    external codeContractViolation
    
    strdef name
    enumDmPpFk = -1
    enumPpRole = -1
    mechIdx = -1
    objref mechStds[1][1]   // All nil-s except some col(s) of mechIdx row
    
    
    proc init() { local numMechs localobj mechType
        name = $s1
        enumPpRole = $2
        mechIdx = $3
        
        enumDmPpFk = 1
        
        mechType = new MechanismType(1) // 1: "Point Processes"
        numMechs = mechType.count
        objref mechStds[numMechs][3]    // 0: "PARAMETER", 1: "ASSIGNED", 2: "STATE"
    }
    
    // Keep in sync with SynPPComp.applyInhomogeneity
    proc applyInhomogeneity() { local varType, arraySize, arrayIndex, y localobj distFuncHelper, mechStd, syn, thisPp
        strdef mechName, varName
        
        mechName = $s1
        varType = $2
        varName = $s3
        arraySize = $4  // Just a placeholder
        arrayIndex = $5
        distFuncHelper = $o6
        
        if (varType == -1) {    // -1: "GLOBAL"
            codeContractViolation()
        }
        
        mechStd = new MechanismStandard(mechName, varType)
        
        for tapGroup.applyInhomogeneityIter(syn, smAllSyns, distFuncHelper) {
            thisPp = syn.getPointProcess(enumPpRole)
            mechStd.in(thisPp)
            y = distFuncHelper.calculateAt(syn.dist)
            mechStd.set(varName, y, arrayIndex)
            mechStd.out(thisPp)
        }
    }
    
endtemplate ReducedSynPPComp
