
begintemplate ReducedSynSet

    public createSynStruc, initAllHomogenVars
    public allSyns, allComps, enumSynLoc, randomSynLocP, spineNecks_ref, spineHeads_ref, spineNeckDiamCache, idxForSynSet
    public seh
    
    external tapSet, utils4FakeMech4SynNetCon
    external rngUtils
    external enumSynCompIdxs, enumSynPpRoles
    external eachItemInList
    
    objref allSyns, allComps
    enumSynLoc = -1
    randomSynLocP = -1
    objref spineNecks_ref, spineHeads_ref
    objref spineNeckDiamCache
    idxForSynSet = -1
    
    objref seh
    isSefwEnabled = -1
    
    
    proc init() { local isMinRPlt1
        allSyns = $o1
        allComps = $o2
        enumSynLoc = $3
        randomSynLocP = $4
        spineNecks_ref = $o5
        spineHeads_ref = $o6
        spineNeckDiamCache = $o7
        idxForSynSet = $8
        isMinRPlt1 = $9
        isSefwEnabled = $10     // We don't call seh.isSefwEnabled() in ReducedSynSet because all stoch models will be applied only downstream
        
        seh = new SynEventsHelper(allComps)
        seh.isMinRPlt1 = isMinRPlt1
    }
    
    // Keep in sync with SynSet.applyChangesToStrucIfNeeded
    proc createSynStruc() { local is3Or1PartInSynStruc, srcMechIdx, seed localobj syn, srcPp, trgPp, netCon, sefwPp, sefwNetCon, sngPp
        strdef srcMechName, trgMechName, sngMechName
        
        is3Or1PartInSynStruc = $1
        srcMechIdx = $2
        srcMechName = $s3
        trgMechName = $s4
        sngMechName = $s5
        
        if (is3Or1PartInSynStruc) {
            for eachItemInList(syn, allSyns) {
                srcPp = createNewSrcPp(syn, srcMechIdx, srcMechName)
                trgPp = tapSet.createNewPpAttachedToSection(trgMechName, syn.sec_ref, syn.connectionPoint)
                if (!isSefwEnabled) {
                    netCon = new NetCon(srcPp, trgPp)
                    syn.changeStructure(srcPp, netCon, trgPp)
                } else {
                    seh.createNewSynEventsFilterWatcherButTryToInherit(syn, 0, 0, trgPp, sefwPp, sefwNetCon)
                    netCon = new NetCon(srcPp, sefwPp)
                    syn.changeStructure(srcPp, netCon, sefwPp, sefwNetCon, trgPp)
                }
            }
            if (isSefwEnabled) {
                // It's enough to set the seed only once per rank (for the last sefwPp in our case)
                seed = rngUtils.getSeedFor_SEFW()
                sefwPp.setSeed(seed)
            }
        } else {
            for eachItemInList(syn, allSyns) {
                sngPp = tapSet.createNewPpAttachedToSection(sngMechName, syn.sec_ref, syn.connectionPoint)
                syn.changeStructure(sngPp)
            }
        }
    }
    
    // Keep in sync with SynSet.applyChangesToDirtyHomogenVars
    proc initAllHomogenVars() { local is3Or1PartInSynStruc, srcMechIdx, trgMechIdx, sngMechIdx
        is3Or1PartInSynStruc = $1
        srcMechIdx = $2
        trgMechIdx = $3
        sngMechIdx = $4
        if (is3Or1PartInSynStruc) {
            initHomogenVars(enumSynCompIdxs.srcPp, srcMechIdx, enumSynPpRoles.srcPp)
            initHomogenVars(enumSynCompIdxs.netCon, utils4FakeMech4SynNetCon.mechIdx, enumSynPpRoles.netCon)
            initHomogenVars(enumSynCompIdxs.trgPp, trgMechIdx, enumSynPpRoles.trgPp)
        } else {
            initHomogenVars(enumSynCompIdxs.sngPp, sngMechIdx, enumSynPpRoles.sngPp)
        }
    }
    
    // All next staff is private
    
    
    // Keep in sync with SynSet.createNewSrcPpButTryToInherit
    obfunc createNewSrcPp() { local mechIdx, doesSrcPpRequireSection localobj syn, mechType, pp
        strdef mechName
        
        syn = $o1
        mechIdx = $2
        mechName = $s3
        
        mechType = new MechanismType(1)     // 1: "Point Processes"
        
        doesSrcPpRequireSection = !mechType.is_artificial(mechIdx)
        
        if (!doesSrcPpRequireSection) {
            mechType.select(mechName)
            mechType.make(pp)   // Not located in any section
            return pp
        } else {
            return tapSet.createNewPpAttachedToSection(mechName, syn.sec_ref, syn.connectionPoint)
        }
    }
    
    // Keep in sync with SynSet.ifMechDirtyThenApplyHomogenChanges
    proc initHomogenVars() { local compIdx, mechIdx, enumPpRole, isPPorNC, maxVarType, varType, varTypeIdx localobj comp, syn, sefwPpOrNil, sefwNetConOrNil, ppOrNetCon, compMechStd, nil
        
        compIdx = $1
        mechIdx = $2
        enumPpRole = $3
        
        comp = allComps.o(compIdx)
        
        isPPorNC = (compIdx != enumSynCompIdxs.netCon)
        
        for eachItemInList(syn, allSyns) {
            sefwPpOrNil = nil
            sefwNetConOrNil = nil
            ppOrNetCon = syn.getPointProcess(enumPpRole)
            if (isPPorNC) {
                maxVarType = 3
            } else {
                if (isSefwEnabled) {
                    sefwPpOrNil = syn.sefwPp
                    sefwNetConOrNil = syn.sefwNetCon
                }
                maxVarType = 1
            }
            for varType = 1, maxVarType {   // 1: "PARAMETER", 2: "ASSIGNED", 3: "STATE"
                varTypeIdx = varType - 1
                compMechStd = comp.mechStds[mechIdx][varTypeIdx]
                if (compMechStd != nil) {
                    // Here we assign NaN values to inhom vars, but they will be overwritten shortly downstream
                    compMechStd.out(ppOrNetCon)
                }
            }
            if (sefwPpOrNil != nil) {
                if (compMechStd != nil) {
                    // The same comment regarding NaN values
                    sefwPpOrNil.release_probability = compMechStd.get(utils4FakeMech4SynNetCon.metaVarName)
                } else {
                    // We get here when all NetCon params are default (so its mechStd is nil), but stochasticity is enabled
                    sefwPpOrNil.release_probability = 1
                }
            }
            if (sefwNetConOrNil != nil) {
                if (compMechStd != nil) {
                    // The same comment regarding NaN values
                    compMechStd.out(sefwNetConOrNil)
                }
                sefwNetConOrNil.delay = 0
            }
        }
    }
    
endtemplate ReducedSynSet
