
{ load_file("SectionListUtils.hoc") }


// Plugin for SectionsSelectorWidget from NanoBranchesManager module
// !! not used at the moment
begintemplate PluginForSSW_FromNBM

    public getTopHint, isCurrentSectSelectable, updateNumSelectedSectsHint, doneHandler, dismissHandler
    
    external nanoBranchesManager, seededDendrites_ref
    external checkIfCurrentSecIsDendrite
    
    
    proc getTopHint() {
        $s1 = "Please select the dendrites that will be seeded with nanostructures."
    }
    
    func isCurrentSectSelectable() {
        // Check if the section belongs to a dendrite
        return checkIfCurrentSecIsDendrite()
    }
    
    proc updateNumSelectedSectsHint() { local numSelectedSects localobj placeholder
        numSelectedSects = $2
        placeholder = $o3
        sprint($s1, "%d dendrite section(s) selected", numSelectedSects)
    }
    
    proc doneHandler() { localobj selected_ref
        selected_ref = $o1
        
        // Here is the result of selection
        seededDendrites_ref = selected_ref
        
        nanoBranchesManager.reseedBranchesWithLastUsedArgs()
    }
    
    proc dismissHandler() {
        // !! maybe need to inform user that we'll reseed rather than restore the old nanostructures
        nanoBranchesManager.reseedBranchesWithLastUsedArgs()
    }
    
endtemplate PluginForSSW_FromNBM


// Plugin for SectionsSelectorWidget from BiophysManager module
begintemplate PluginForSSW_FromBM

    public getTopHint, isCurrentSectSelectable, updateNumSelectedSectsHint, doneHandler, dismissHandler
    
    external mmcoWidget
    external stringsEqual
    
    objref selectable_ref
    
    
    proc getTopHint() {
        $s1 = "Please select the sections that will be removed from this and assigned to a new compartment."
    }
    
    proc init() {
        selectable_ref = $o1
    }
    
    func isCurrentSectSelectable() { local secIdx localobj sec_ref
        strdef secName1, secName2
        
        secName1 = secname()
        
        // !! slow and inefficient implementation, just for demo
        //    need to use Python's Set here
        
        // Don't replace with eachSecInList to avoid the error "The sectionstack index should be 1 but it is 2"
        // (!! need to investigate what exactly causes this error: either plotShape.push_selected() upstream or
        // the fact that this func is called inside "forsec" block)
        for secIdx = 0, selectable_ref.count() - 1 {
            sec_ref = selectable_ref.o(secIdx)
            sec_ref.sec secName2 = secname()
            if (stringsEqual(secName1, secName2)) {
                return 1
            }
        }
        return 0
    }
    
    proc updateNumSelectedSectsHint() { local numSelectedSects localobj in_comp
        numSelectedSects = $2
        in_comp = $o3
        sprint($s1, "%d section(s) selected in \"%s\"", numSelectedSects, in_comp.name)
    }
    
    proc doneHandler() { localobj selected_ref
        selected_ref = $o1
        mmcoWidget.splitHandler_layer2(selected_ref)
    }
    
    proc dismissHandler() {
        // Empty by design
    }
    
endtemplate PluginForSSW_FromBM


// Plugin for SectionsSelectorWidget from GapJunctionManager module
begintemplate PluginForSSW_FromGJM

    public getTopHint, isCurrentSectSelectable, updateNumSelectedSectsHint, doneHandler, dismissHandler
    
    external gapJuncManagerMainWidget
    
    
    proc getTopHint() {
        $s1 = "Please select the sections that will be seeded with gap junctions."
    }
    
    func isCurrentSectSelectable() {
        return 1
    }
    
    proc updateNumSelectedSectsHint() { local numSelectedSects localobj placeholder
        numSelectedSects = $2
        placeholder = $o3
        sprint($s1, "%d section(s) selected", numSelectedSects)
    }
    
    proc doneHandler() { localobj selected_ref
        selected_ref = $o1
        gapJuncManagerMainWidget.selectSectionsHandler_layer2(selected_ref)
    }
    
    proc dismissHandler() {
        // Empty by design
    }
    
endtemplate PluginForSSW_FromGJM
